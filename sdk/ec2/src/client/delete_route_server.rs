// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteRouteServer`](crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`route_server_id(impl Into<String>)`](crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder::route_server_id) / [`set_route_server_id(Option<String>)`](crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder::set_route_server_id):<br>required: **true**<br><p>The ID of the route server to delete.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder::set_dry_run):<br>required: **false**<br><p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`DeleteRouteServerOutput`](crate::operation::delete_route_server::DeleteRouteServerOutput) with field(s):
    ///   - [`route_server(Option<RouteServer>)`](crate::operation::delete_route_server::DeleteRouteServerOutput::route_server): <p>Information about the deleted route server.</p>
    /// - On failure, responds with [`SdkError<DeleteRouteServerError>`](crate::operation::delete_route_server::DeleteRouteServerError)
    pub fn delete_route_server(&self) -> crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder {
        crate::operation::delete_route_server::builders::DeleteRouteServerFluentBuilder::new(self.handle.clone())
    }
}
