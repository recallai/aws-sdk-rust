// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeTrafficMirrorFilterRules`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`traffic_mirror_filter_rule_ids(impl Into<String>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::traffic_mirror_filter_rule_ids) / [`set_traffic_mirror_filter_rule_ids(Option<Vec::<String>>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_traffic_mirror_filter_rule_ids):<br>required: **false**<br><p>Traffic filter rule IDs.</p><br>
    ///   - [`traffic_mirror_filter_id(impl Into<String>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::traffic_mirror_filter_id) / [`set_traffic_mirror_filter_id(Option<String>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_traffic_mirror_filter_id):<br>required: **false**<br><p>Traffic filter ID.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    ///   - [`filters(Filter)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_filters):<br>required: **false**<br><p>Traffic mirror filters.</p> <ul>  <li>   <p><code>traffic-mirror-filter-rule-id</code>: The ID of the Traffic Mirror rule.</p></li>  <li>   <p><code>traffic-mirror-filter-id</code>: The ID of the filter that this rule is associated with.</p></li>  <li>   <p><code>rule-number</code>: The number of the Traffic Mirror rule.</p></li>  <li>   <p><code>rule-action</code>: The action taken on the filtered traffic. Possible actions are <code>accept</code> and <code>reject</code>.</p></li>  <li>   <p><code>traffic-direction</code>: The traffic direction. Possible directions are <code>ingress</code> and <code>egress</code>.</p></li>  <li>   <p><code>protocol</code>: The protocol, for example UDP, assigned to the Traffic Mirror rule.</p></li>  <li>   <p><code>source-cidr-block</code>: The source CIDR block assigned to the Traffic Mirror rule.</p></li>  <li>   <p><code>destination-cidr-block</code>: The destination CIDR block assigned to the Traffic Mirror rule.</p></li>  <li>   <p><code>description</code>: The description of the Traffic Mirror rule.</p></li> </ul><br>
    ///   - [`max_results(i32)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next page of results.</p><br>
    /// - On success, responds with [`DescribeTrafficMirrorFilterRulesOutput`](crate::operation::describe_traffic_mirror_filter_rules::DescribeTrafficMirrorFilterRulesOutput) with field(s):
    ///   - [`traffic_mirror_filter_rules(Option<Vec::<TrafficMirrorFilterRule>>)`](crate::operation::describe_traffic_mirror_filter_rules::DescribeTrafficMirrorFilterRulesOutput::traffic_mirror_filter_rules): <p>Traffic mirror rules.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_traffic_mirror_filter_rules::DescribeTrafficMirrorFilterRulesOutput::next_token): <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeTrafficMirrorFilterRulesError>`](crate::operation::describe_traffic_mirror_filter_rules::DescribeTrafficMirrorFilterRulesError)
    pub fn describe_traffic_mirror_filter_rules(
        &self,
    ) -> crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder {
        crate::operation::describe_traffic_mirror_filter_rules::builders::DescribeTrafficMirrorFilterRulesFluentBuilder::new(self.handle.clone())
    }
}
