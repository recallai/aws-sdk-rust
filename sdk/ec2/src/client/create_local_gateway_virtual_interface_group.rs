// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLocalGatewayVirtualInterfaceGroup`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`local_gateway_id(impl Into<String>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::local_gateway_id) / [`set_local_gateway_id(Option<String>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::set_local_gateway_id):<br>required: **true**<br><p>The ID of the local gateway.</p><br>
    ///   - [`local_bgp_asn(i32)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::local_bgp_asn) / [`set_local_bgp_asn(Option<i32>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::set_local_bgp_asn):<br>required: **false**<br><p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p><br>
    ///   - [`local_bgp_asn_extended(i64)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::local_bgp_asn_extended) / [`set_local_bgp_asn_extended(Option<i64>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::set_local_bgp_asn_extended):<br>required: **false**<br><p>The extended 32-bit ASN for the local BGP configuration.</p><br>
    ///   - [`tag_specifications(TagSpecification)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::tag_specifications) / [`set_tag_specifications(Option<Vec::<TagSpecification>>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::set_tag_specifications):<br>required: **false**<br><p>The tags to apply to the local gateway virtual interface group when the resource is being created.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`CreateLocalGatewayVirtualInterfaceGroupOutput`](crate::operation::create_local_gateway_virtual_interface_group::CreateLocalGatewayVirtualInterfaceGroupOutput) with field(s):
    ///   - [`local_gateway_virtual_interface_group(Option<LocalGatewayVirtualInterfaceGroup>)`](crate::operation::create_local_gateway_virtual_interface_group::CreateLocalGatewayVirtualInterfaceGroupOutput::local_gateway_virtual_interface_group): <p>Information about the created local gateway virtual interface group.</p>
    /// - On failure, responds with [`SdkError<CreateLocalGatewayVirtualInterfaceGroupError>`](crate::operation::create_local_gateway_virtual_interface_group::CreateLocalGatewayVirtualInterfaceGroupError)
    pub fn create_local_gateway_virtual_interface_group(
        &self,
    ) -> crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder {
        crate::operation::create_local_gateway_virtual_interface_group::builders::CreateLocalGatewayVirtualInterfaceGroupFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
