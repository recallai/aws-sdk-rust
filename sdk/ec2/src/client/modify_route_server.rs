// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyRouteServer`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`route_server_id(impl Into<String>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::route_server_id) / [`set_route_server_id(Option<String>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::set_route_server_id):<br>required: **true**<br><p>The ID of the route server to modify.</p><br>
    ///   - [`persist_routes(RouteServerPersistRoutesAction)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::persist_routes) / [`set_persist_routes(Option<RouteServerPersistRoutesAction>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::set_persist_routes):<br>required: **false**<br><p>Specifies whether to persist routes after all BGP sessions are terminated.</p> <ul>  <li>   <p>enable: Routes will be persisted in FIB and RIB after all BGP sessions are terminated.</p></li>  <li>   <p>disable: Routes will not be persisted in FIB and RIB after all BGP sessions are terminated.</p></li>  <li>   <p>reset: If a route server has persisted routes due to all BGP sessions having ended, reset will withdraw all routes and reset route server to an empty FIB and RIB.</p></li> </ul><br>
    ///   - [`persist_routes_duration(i64)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::persist_routes_duration) / [`set_persist_routes_duration(Option<i64>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::set_persist_routes_duration):<br>required: **false**<br><p>The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if PersistRoutes is <code>enabled</code>.</p> <p>If you set the duration to 1 minute, then when your network appliance re-establishes BGP with route server, it has 1 minute to relearn it's adjacent network and advertise those routes to route server before route server resumes normal functionality. In most cases, 1 minute is probably sufficient. If, however, you have concerns that your BGP network may not be capable of fully re-establishing and re-learning everything in 1 minute, you can increase the duration up to 5 minutes.</p><br>
    ///   - [`sns_notifications_enabled(bool)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::sns_notifications_enabled) / [`set_sns_notifications_enabled(Option<bool>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::set_sns_notifications_enabled):<br>required: **false**<br><p>Specifies whether to enable SNS notifications for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by Amazon Web Services.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::set_dry_run):<br>required: **false**<br><p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`ModifyRouteServerOutput`](crate::operation::modify_route_server::ModifyRouteServerOutput) with field(s):
    ///   - [`route_server(Option<RouteServer>)`](crate::operation::modify_route_server::ModifyRouteServerOutput::route_server): <p>Information about the modified route server.</p>
    /// - On failure, responds with [`SdkError<ModifyRouteServerError>`](crate::operation::modify_route_server::ModifyRouteServerError)
    pub fn modify_route_server(&self) -> crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder {
        crate::operation::modify_route_server::builders::ModifyRouteServerFluentBuilder::new(self.handle.clone())
    }
}
