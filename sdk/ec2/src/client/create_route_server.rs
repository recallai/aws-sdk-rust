// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRouteServer`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`amazon_side_asn(i64)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::amazon_side_asn) / [`set_amazon_side_asn(Option<i64>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_amazon_side_asn):<br>required: **true**<br><p>The private Autonomous System Number (ASN) for the Amazon side of the BGP session. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_client_token):<br>required: **false**<br><p>Unique, case-sensitive identifier to ensure idempotency of the request.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_dry_run):<br>required: **false**<br><p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    ///   - [`persist_routes(RouteServerPersistRoutesAction)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::persist_routes) / [`set_persist_routes(Option<RouteServerPersistRoutesAction>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_persist_routes):<br>required: **false**<br><p>Indicates whether routes should be persisted after all BGP sessions are terminated.</p><br>
    ///   - [`persist_routes_duration(i64)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::persist_routes_duration) / [`set_persist_routes_duration(Option<i64>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_persist_routes_duration):<br>required: **false**<br><p>The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if PersistRoutes is <code>enabled</code>.</p> <p>If you set the duration to 1 minute, then when your network appliance re-establishes BGP with route server, it has 1 minute to relearn it's adjacent network and advertise those routes to route server before route server resumes normal functionality. In most cases, 1 minute is probably sufficient. If, however, you have concerns that your BGP network may not be capable of fully re-establishing and re-learning everything in 1 minute, you can increase the duration up to 5 minutes.</p><br>
    ///   - [`sns_notifications_enabled(bool)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::sns_notifications_enabled) / [`set_sns_notifications_enabled(Option<bool>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_sns_notifications_enabled):<br>required: **false**<br><p>Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by Amazon Web Services.</p><br>
    ///   - [`tag_specifications(TagSpecification)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::tag_specifications) / [`set_tag_specifications(Option<Vec::<TagSpecification>>)`](crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::set_tag_specifications):<br>required: **false**<br><p>The tags to apply to the route server during creation.</p><br>
    /// - On success, responds with [`CreateRouteServerOutput`](crate::operation::create_route_server::CreateRouteServerOutput) with field(s):
    ///   - [`route_server(Option<RouteServer>)`](crate::operation::create_route_server::CreateRouteServerOutput::route_server): <p>Information about the created route server.</p>
    /// - On failure, responds with [`SdkError<CreateRouteServerError>`](crate::operation::create_route_server::CreateRouteServerError)
    pub fn create_route_server(&self) -> crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder {
        crate::operation::create_route_server::builders::CreateRouteServerFluentBuilder::new(self.handle.clone())
    }
}
