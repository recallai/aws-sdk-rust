// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteImageUsageReport`](crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`report_id(impl Into<String>)`](crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder::report_id) / [`set_report_id(Option<String>)`](crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder::set_report_id):<br>required: **true**<br><p>The ID of the report to delete.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`DeleteImageUsageReportOutput`](crate::operation::delete_image_usage_report::DeleteImageUsageReportOutput) with field(s):
    ///   - [`r#return(Option<bool>)`](crate::operation::delete_image_usage_report::DeleteImageUsageReportOutput::return): <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    /// - On failure, responds with [`SdkError<DeleteImageUsageReportError>`](crate::operation::delete_image_usage_report::DeleteImageUsageReportError)
    pub fn delete_image_usage_report(&self) -> crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder {
        crate::operation::delete_image_usage_report::builders::DeleteImageUsageReportFluentBuilder::new(self.handle.clone())
    }
}
