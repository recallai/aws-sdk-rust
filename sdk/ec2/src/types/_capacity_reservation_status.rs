// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the availability of capacity for a Capacity Reservation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityReservationStatus {
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The combined amount of <code>Available</code> and <code>Unavailable</code> capacity in the Capacity Reservation.</p>
    pub total_capacity: ::std::option::Option<i32>,
    /// <p>The remaining capacity. Indicates the amount of resources that can be launched into the Capacity Reservation.</p>
    pub total_available_capacity: ::std::option::Option<i32>,
    /// <p>The used capacity. Indicates that the capacity is in use by resources that are running in the Capacity Reservation.</p>
    pub total_unavailable_capacity: ::std::option::Option<i32>,
}
impl CapacityReservationStatus {
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_id(&self) -> ::std::option::Option<&str> {
        self.capacity_reservation_id.as_deref()
    }
    /// <p>The combined amount of <code>Available</code> and <code>Unavailable</code> capacity in the Capacity Reservation.</p>
    pub fn total_capacity(&self) -> ::std::option::Option<i32> {
        self.total_capacity
    }
    /// <p>The remaining capacity. Indicates the amount of resources that can be launched into the Capacity Reservation.</p>
    pub fn total_available_capacity(&self) -> ::std::option::Option<i32> {
        self.total_available_capacity
    }
    /// <p>The used capacity. Indicates that the capacity is in use by resources that are running in the Capacity Reservation.</p>
    pub fn total_unavailable_capacity(&self) -> ::std::option::Option<i32> {
        self.total_unavailable_capacity
    }
}
impl CapacityReservationStatus {
    /// Creates a new builder-style object to manufacture [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
    pub fn builder() -> crate::types::builders::CapacityReservationStatusBuilder {
        crate::types::builders::CapacityReservationStatusBuilder::default()
    }
}

/// A builder for [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityReservationStatusBuilder {
    pub(crate) capacity_reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) total_capacity: ::std::option::Option<i32>,
    pub(crate) total_available_capacity: ::std::option::Option<i32>,
    pub(crate) total_unavailable_capacity: ::std::option::Option<i32>,
}
impl CapacityReservationStatusBuilder {
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn set_capacity_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_reservation_id = input;
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn get_capacity_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_reservation_id
    }
    /// <p>The combined amount of <code>Available</code> and <code>Unavailable</code> capacity in the Capacity Reservation.</p>
    pub fn total_capacity(mut self, input: i32) -> Self {
        self.total_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The combined amount of <code>Available</code> and <code>Unavailable</code> capacity in the Capacity Reservation.</p>
    pub fn set_total_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_capacity = input;
        self
    }
    /// <p>The combined amount of <code>Available</code> and <code>Unavailable</code> capacity in the Capacity Reservation.</p>
    pub fn get_total_capacity(&self) -> &::std::option::Option<i32> {
        &self.total_capacity
    }
    /// <p>The remaining capacity. Indicates the amount of resources that can be launched into the Capacity Reservation.</p>
    pub fn total_available_capacity(mut self, input: i32) -> Self {
        self.total_available_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The remaining capacity. Indicates the amount of resources that can be launched into the Capacity Reservation.</p>
    pub fn set_total_available_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_available_capacity = input;
        self
    }
    /// <p>The remaining capacity. Indicates the amount of resources that can be launched into the Capacity Reservation.</p>
    pub fn get_total_available_capacity(&self) -> &::std::option::Option<i32> {
        &self.total_available_capacity
    }
    /// <p>The used capacity. Indicates that the capacity is in use by resources that are running in the Capacity Reservation.</p>
    pub fn total_unavailable_capacity(mut self, input: i32) -> Self {
        self.total_unavailable_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The used capacity. Indicates that the capacity is in use by resources that are running in the Capacity Reservation.</p>
    pub fn set_total_unavailable_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_unavailable_capacity = input;
        self
    }
    /// <p>The used capacity. Indicates that the capacity is in use by resources that are running in the Capacity Reservation.</p>
    pub fn get_total_unavailable_capacity(&self) -> &::std::option::Option<i32> {
        &self.total_unavailable_capacity
    }
    /// Consumes the builder and constructs a [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
    pub fn build(self) -> crate::types::CapacityReservationStatus {
        crate::types::CapacityReservationStatus {
            capacity_reservation_id: self.capacity_reservation_id,
            total_capacity: self.total_capacity,
            total_available_capacity: self.total_available_capacity,
            total_unavailable_capacity: self.total_unavailable_capacity,
        }
    }
}
