// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Reserve powerful GPU instances on a future date to support your short duration machine learning (ML) workloads. Instances that run inside a Capacity Block are automatically placed close together inside <a href="http://aws.amazon.com/ec2/ultraclusters/">Amazon EC2 UltraClusters</a>, for low-latency, petabit-scale, non-blocking networking.</p>
/// <p>You can also reserve Amazon EC2 UltraServers. UltraServers connect multiple EC2 instances using a low-latency, high-bandwidth accelerator interconnect (NeuronLink). They are built to tackle very large-scale AI/ML workloads that require significant processing power. For more information, see Amazon EC2 UltraServers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityBlock {
    /// <p>The ID of the Capacity Block.</p>
    pub capacity_block_id: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 UltraServer type of the Capacity Block.</p>
    pub ultraserver_type: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone of the Capacity Block.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone ID of the Capacity Block.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The date and time at which the Capacity Block was started.</p>
    pub start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p>
    pub end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the Capacity Block was created.</p>
    pub create_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The state of the Capacity Block.</p>
    pub state: ::std::option::Option<crate::types::CapacityBlockResourceState>,
    /// <p>The tags assigned to the Capacity Block.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CapacityBlock {
    /// <p>The ID of the Capacity Block.</p>
    pub fn capacity_block_id(&self) -> ::std::option::Option<&str> {
        self.capacity_block_id.as_deref()
    }
    /// <p>The EC2 UltraServer type of the Capacity Block.</p>
    pub fn ultraserver_type(&self) -> ::std::option::Option<&str> {
        self.ultraserver_type.as_deref()
    }
    /// <p>The Availability Zone of the Capacity Block.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The Availability Zone ID of the Capacity Block.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The ID of the Capacity Reservation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_reservation_ids.is_none()`.
    pub fn capacity_reservation_ids(&self) -> &[::std::string::String] {
        self.capacity_reservation_ids.as_deref().unwrap_or_default()
    }
    /// <p>The date and time at which the Capacity Block was started.</p>
    pub fn start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_date.as_ref()
    }
    /// <p>The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p>
    pub fn end_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_date.as_ref()
    }
    /// <p>The date and time at which the Capacity Block was created.</p>
    pub fn create_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_date.as_ref()
    }
    /// <p>The state of the Capacity Block.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CapacityBlockResourceState> {
        self.state.as_ref()
    }
    /// <p>The tags assigned to the Capacity Block.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CapacityBlock {
    /// Creates a new builder-style object to manufacture [`CapacityBlock`](crate::types::CapacityBlock).
    pub fn builder() -> crate::types::builders::CapacityBlockBuilder {
        crate::types::builders::CapacityBlockBuilder::default()
    }
}

/// A builder for [`CapacityBlock`](crate::types::CapacityBlock).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityBlockBuilder {
    pub(crate) capacity_block_id: ::std::option::Option<::std::string::String>,
    pub(crate) ultraserver_type: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_reservation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) create_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::CapacityBlockResourceState>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CapacityBlockBuilder {
    /// <p>The ID of the Capacity Block.</p>
    pub fn capacity_block_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_block_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Capacity Block.</p>
    pub fn set_capacity_block_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_block_id = input;
        self
    }
    /// <p>The ID of the Capacity Block.</p>
    pub fn get_capacity_block_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_block_id
    }
    /// <p>The EC2 UltraServer type of the Capacity Block.</p>
    pub fn ultraserver_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ultraserver_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 UltraServer type of the Capacity Block.</p>
    pub fn set_ultraserver_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ultraserver_type = input;
        self
    }
    /// <p>The EC2 UltraServer type of the Capacity Block.</p>
    pub fn get_ultraserver_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.ultraserver_type
    }
    /// <p>The Availability Zone of the Capacity Block.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone of the Capacity Block.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone of the Capacity Block.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The Availability Zone ID of the Capacity Block.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone ID of the Capacity Block.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The Availability Zone ID of the Capacity Block.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Appends an item to `capacity_reservation_ids`.
    ///
    /// To override the contents of this collection use [`set_capacity_reservation_ids`](Self::set_capacity_reservation_ids).
    ///
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capacity_reservation_ids.unwrap_or_default();
        v.push(input.into());
        self.capacity_reservation_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn set_capacity_reservation_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capacity_reservation_ids = input;
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn get_capacity_reservation_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capacity_reservation_ids
    }
    /// <p>The date and time at which the Capacity Block was started.</p>
    pub fn start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the Capacity Block was started.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The date and time at which the Capacity Block was started.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date
    }
    /// <p>The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p>
    pub fn end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p>
    pub fn set_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p>
    pub fn get_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date
    }
    /// <p>The date and time at which the Capacity Block was created.</p>
    pub fn create_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the Capacity Block was created.</p>
    pub fn set_create_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The date and time at which the Capacity Block was created.</p>
    pub fn get_create_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_date
    }
    /// <p>The state of the Capacity Block.</p>
    pub fn state(mut self, input: crate::types::CapacityBlockResourceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the Capacity Block.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CapacityBlockResourceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the Capacity Block.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CapacityBlockResourceState> {
        &self.state
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the Capacity Block.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the Capacity Block.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the Capacity Block.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CapacityBlock`](crate::types::CapacityBlock).
    pub fn build(self) -> crate::types::CapacityBlock {
        crate::types::CapacityBlock {
            capacity_block_id: self.capacity_block_id,
            ultraserver_type: self.ultraserver_type,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
            capacity_reservation_ids: self.capacity_reservation_ids,
            start_date: self.start_date,
            end_date: self.end_date,
            create_date: self.create_date,
            state: self.state,
            tags: self.tags,
        }
    }
}
