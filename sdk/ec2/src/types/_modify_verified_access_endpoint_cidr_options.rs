// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIDR options for a Verified Access endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyVerifiedAccessEndpointCidrOptions {
    /// <p>The port ranges.</p>
    pub port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::ModifyVerifiedAccessEndpointPortRange>>,
}
impl ModifyVerifiedAccessEndpointCidrOptions {
    /// <p>The port ranges.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.port_ranges.is_none()`.
    pub fn port_ranges(&self) -> &[crate::types::ModifyVerifiedAccessEndpointPortRange] {
        self.port_ranges.as_deref().unwrap_or_default()
    }
}
impl ModifyVerifiedAccessEndpointCidrOptions {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessEndpointCidrOptions`](crate::types::ModifyVerifiedAccessEndpointCidrOptions).
    pub fn builder() -> crate::types::builders::ModifyVerifiedAccessEndpointCidrOptionsBuilder {
        crate::types::builders::ModifyVerifiedAccessEndpointCidrOptionsBuilder::default()
    }
}

/// A builder for [`ModifyVerifiedAccessEndpointCidrOptions`](crate::types::ModifyVerifiedAccessEndpointCidrOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyVerifiedAccessEndpointCidrOptionsBuilder {
    pub(crate) port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::ModifyVerifiedAccessEndpointPortRange>>,
}
impl ModifyVerifiedAccessEndpointCidrOptionsBuilder {
    /// Appends an item to `port_ranges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>The port ranges.</p>
    pub fn port_ranges(mut self, input: crate::types::ModifyVerifiedAccessEndpointPortRange) -> Self {
        let mut v = self.port_ranges.unwrap_or_default();
        v.push(input);
        self.port_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>The port ranges.</p>
    pub fn set_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ModifyVerifiedAccessEndpointPortRange>>) -> Self {
        self.port_ranges = input;
        self
    }
    /// <p>The port ranges.</p>
    pub fn get_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ModifyVerifiedAccessEndpointPortRange>> {
        &self.port_ranges
    }
    /// Consumes the builder and constructs a [`ModifyVerifiedAccessEndpointCidrOptions`](crate::types::ModifyVerifiedAccessEndpointCidrOptions).
    pub fn build(self) -> crate::types::ModifyVerifiedAccessEndpointCidrOptions {
        crate::types::ModifyVerifiedAccessEndpointCidrOptions {
            port_ranges: self.port_ranges,
        }
    }
}
