// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The BGP configuration options requested for a route server peer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteServerBgpOptionsRequest {
    /// <p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p>
    pub peer_asn: ::std::option::Option<i64>,
    /// <p>The requested liveness detection protocol for the BGP peer.</p>
    /// <ul>
    /// <li>
    /// <p><code>bgp-keepalive</code>: The standard BGP keep alive mechanism (<a href="https://www.rfc-editor.org/rfc/rfc4271#page-21">RFC4271</a>) that is stable but may take longer to fail-over in cases of network impact or router failure.</p></li>
    /// <li>
    /// <p><code>bfd</code>: An additional Bidirectional Forwarding Detection (BFD) protocol (<a href="https://www.rfc-editor.org/rfc/rfc5880">RFC5880</a>) that enables fast failover by using more sensitive liveness detection.</p></li>
    /// </ul>
    /// <p>Defaults to <code>bgp-keepalive</code>.</p>
    pub peer_liveness_detection: ::std::option::Option<crate::types::RouteServerPeerLivenessMode>,
}
impl RouteServerBgpOptionsRequest {
    /// <p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p>
    pub fn peer_asn(&self) -> ::std::option::Option<i64> {
        self.peer_asn
    }
    /// <p>The requested liveness detection protocol for the BGP peer.</p>
    /// <ul>
    /// <li>
    /// <p><code>bgp-keepalive</code>: The standard BGP keep alive mechanism (<a href="https://www.rfc-editor.org/rfc/rfc4271#page-21">RFC4271</a>) that is stable but may take longer to fail-over in cases of network impact or router failure.</p></li>
    /// <li>
    /// <p><code>bfd</code>: An additional Bidirectional Forwarding Detection (BFD) protocol (<a href="https://www.rfc-editor.org/rfc/rfc5880">RFC5880</a>) that enables fast failover by using more sensitive liveness detection.</p></li>
    /// </ul>
    /// <p>Defaults to <code>bgp-keepalive</code>.</p>
    pub fn peer_liveness_detection(&self) -> ::std::option::Option<&crate::types::RouteServerPeerLivenessMode> {
        self.peer_liveness_detection.as_ref()
    }
}
impl RouteServerBgpOptionsRequest {
    /// Creates a new builder-style object to manufacture [`RouteServerBgpOptionsRequest`](crate::types::RouteServerBgpOptionsRequest).
    pub fn builder() -> crate::types::builders::RouteServerBgpOptionsRequestBuilder {
        crate::types::builders::RouteServerBgpOptionsRequestBuilder::default()
    }
}

/// A builder for [`RouteServerBgpOptionsRequest`](crate::types::RouteServerBgpOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteServerBgpOptionsRequestBuilder {
    pub(crate) peer_asn: ::std::option::Option<i64>,
    pub(crate) peer_liveness_detection: ::std::option::Option<crate::types::RouteServerPeerLivenessMode>,
}
impl RouteServerBgpOptionsRequestBuilder {
    /// <p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p>
    /// This field is required.
    pub fn peer_asn(mut self, input: i64) -> Self {
        self.peer_asn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p>
    pub fn set_peer_asn(mut self, input: ::std::option::Option<i64>) -> Self {
        self.peer_asn = input;
        self
    }
    /// <p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295. We recommend using a private ASN in the 64512–65534 (16-bit ASN) or 4200000000–4294967294 (32-bit ASN) range.</p>
    pub fn get_peer_asn(&self) -> &::std::option::Option<i64> {
        &self.peer_asn
    }
    /// <p>The requested liveness detection protocol for the BGP peer.</p>
    /// <ul>
    /// <li>
    /// <p><code>bgp-keepalive</code>: The standard BGP keep alive mechanism (<a href="https://www.rfc-editor.org/rfc/rfc4271#page-21">RFC4271</a>) that is stable but may take longer to fail-over in cases of network impact or router failure.</p></li>
    /// <li>
    /// <p><code>bfd</code>: An additional Bidirectional Forwarding Detection (BFD) protocol (<a href="https://www.rfc-editor.org/rfc/rfc5880">RFC5880</a>) that enables fast failover by using more sensitive liveness detection.</p></li>
    /// </ul>
    /// <p>Defaults to <code>bgp-keepalive</code>.</p>
    pub fn peer_liveness_detection(mut self, input: crate::types::RouteServerPeerLivenessMode) -> Self {
        self.peer_liveness_detection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested liveness detection protocol for the BGP peer.</p>
    /// <ul>
    /// <li>
    /// <p><code>bgp-keepalive</code>: The standard BGP keep alive mechanism (<a href="https://www.rfc-editor.org/rfc/rfc4271#page-21">RFC4271</a>) that is stable but may take longer to fail-over in cases of network impact or router failure.</p></li>
    /// <li>
    /// <p><code>bfd</code>: An additional Bidirectional Forwarding Detection (BFD) protocol (<a href="https://www.rfc-editor.org/rfc/rfc5880">RFC5880</a>) that enables fast failover by using more sensitive liveness detection.</p></li>
    /// </ul>
    /// <p>Defaults to <code>bgp-keepalive</code>.</p>
    pub fn set_peer_liveness_detection(mut self, input: ::std::option::Option<crate::types::RouteServerPeerLivenessMode>) -> Self {
        self.peer_liveness_detection = input;
        self
    }
    /// <p>The requested liveness detection protocol for the BGP peer.</p>
    /// <ul>
    /// <li>
    /// <p><code>bgp-keepalive</code>: The standard BGP keep alive mechanism (<a href="https://www.rfc-editor.org/rfc/rfc4271#page-21">RFC4271</a>) that is stable but may take longer to fail-over in cases of network impact or router failure.</p></li>
    /// <li>
    /// <p><code>bfd</code>: An additional Bidirectional Forwarding Detection (BFD) protocol (<a href="https://www.rfc-editor.org/rfc/rfc5880">RFC5880</a>) that enables fast failover by using more sensitive liveness detection.</p></li>
    /// </ul>
    /// <p>Defaults to <code>bgp-keepalive</code>.</p>
    pub fn get_peer_liveness_detection(&self) -> &::std::option::Option<crate::types::RouteServerPeerLivenessMode> {
        &self.peer_liveness_detection
    }
    /// Consumes the builder and constructs a [`RouteServerBgpOptionsRequest`](crate::types::RouteServerBgpOptionsRequest).
    pub fn build(self) -> crate::types::RouteServerBgpOptionsRequest {
        crate::types::RouteServerBgpOptionsRequest {
            peer_asn: self.peer_asn,
            peer_liveness_detection: self.peer_liveness_detection,
        }
    }
}
