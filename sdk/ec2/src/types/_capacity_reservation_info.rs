// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Capacity Reservation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityReservationInfo {
    /// <p>The instance type for the Capacity Reservation.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone for the Capacity Reservation.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The tenancy of the Capacity Reservation.</p>
    pub tenancy: ::std::option::Option<crate::types::CapacityReservationTenancy>,
    /// <p>The ID of the Availability Zone.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl CapacityReservationInfo {
    /// <p>The instance type for the Capacity Reservation.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The Availability Zone for the Capacity Reservation.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The tenancy of the Capacity Reservation.</p>
    pub fn tenancy(&self) -> ::std::option::Option<&crate::types::CapacityReservationTenancy> {
        self.tenancy.as_ref()
    }
    /// <p>The ID of the Availability Zone.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
}
impl CapacityReservationInfo {
    /// Creates a new builder-style object to manufacture [`CapacityReservationInfo`](crate::types::CapacityReservationInfo).
    pub fn builder() -> crate::types::builders::CapacityReservationInfoBuilder {
        crate::types::builders::CapacityReservationInfoBuilder::default()
    }
}

/// A builder for [`CapacityReservationInfo`](crate::types::CapacityReservationInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityReservationInfoBuilder {
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) tenancy: ::std::option::Option<crate::types::CapacityReservationTenancy>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl CapacityReservationInfoBuilder {
    /// <p>The instance type for the Capacity Reservation.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type for the Capacity Reservation.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type for the Capacity Reservation.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The Availability Zone for the Capacity Reservation.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone for the Capacity Reservation.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone for the Capacity Reservation.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The tenancy of the Capacity Reservation.</p>
    pub fn tenancy(mut self, input: crate::types::CapacityReservationTenancy) -> Self {
        self.tenancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tenancy of the Capacity Reservation.</p>
    pub fn set_tenancy(mut self, input: ::std::option::Option<crate::types::CapacityReservationTenancy>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>The tenancy of the Capacity Reservation.</p>
    pub fn get_tenancy(&self) -> &::std::option::Option<crate::types::CapacityReservationTenancy> {
        &self.tenancy
    }
    /// <p>The ID of the Availability Zone.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Availability Zone.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The ID of the Availability Zone.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Consumes the builder and constructs a [`CapacityReservationInfo`](crate::types::CapacityReservationInfo).
    pub fn build(self) -> crate::types::CapacityReservationInfo {
        crate::types::CapacityReservationInfo {
            instance_type: self.instance_type,
            availability_zone: self.availability_zone,
            tenancy: self.tenancy,
            availability_zone_id: self.availability_zone_id,
        }
    }
}
