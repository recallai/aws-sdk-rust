// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the accountâ€™s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcBlockPublicAccessExclusion {
    /// <p>The ID of the exclusion.</p>
    pub exclusion_id: ::std::option::Option<::std::string::String>,
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub internet_gateway_exclusion_mode: ::std::option::Option<crate::types::InternetGatewayExclusionMode>,
    /// <p>The ARN of the exclusion.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the exclusion.</p>
    pub state: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionState>,
    /// <p>The reason for the current exclusion state.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>When the exclusion was created.</p>
    pub creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the exclusion was last updated.</p>
    pub last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the exclusion was deleted.</p>
    pub deletion_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p><code>tag</code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcBlockPublicAccessExclusion {
    /// <p>The ID of the exclusion.</p>
    pub fn exclusion_id(&self) -> ::std::option::Option<&str> {
        self.exclusion_id.as_deref()
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn internet_gateway_exclusion_mode(&self) -> ::std::option::Option<&crate::types::InternetGatewayExclusionMode> {
        self.internet_gateway_exclusion_mode.as_ref()
    }
    /// <p>The ARN of the exclusion.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The state of the exclusion.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::VpcBlockPublicAccessExclusionState> {
        self.state.as_ref()
    }
    /// <p>The reason for the current exclusion state.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>When the exclusion was created.</p>
    pub fn creation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>When the exclusion was last updated.</p>
    pub fn last_update_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_timestamp.as_ref()
    }
    /// <p>When the exclusion was deleted.</p>
    pub fn deletion_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deletion_timestamp.as_ref()
    }
    /// <p><code>tag</code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpcBlockPublicAccessExclusion {
    /// Creates a new builder-style object to manufacture [`VpcBlockPublicAccessExclusion`](crate::types::VpcBlockPublicAccessExclusion).
    pub fn builder() -> crate::types::builders::VpcBlockPublicAccessExclusionBuilder {
        crate::types::builders::VpcBlockPublicAccessExclusionBuilder::default()
    }
}

/// A builder for [`VpcBlockPublicAccessExclusion`](crate::types::VpcBlockPublicAccessExclusion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcBlockPublicAccessExclusionBuilder {
    pub(crate) exclusion_id: ::std::option::Option<::std::string::String>,
    pub(crate) internet_gateway_exclusion_mode: ::std::option::Option<crate::types::InternetGatewayExclusionMode>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionState>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deletion_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcBlockPublicAccessExclusionBuilder {
    /// <p>The ID of the exclusion.</p>
    pub fn exclusion_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exclusion_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the exclusion.</p>
    pub fn set_exclusion_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exclusion_id = input;
        self
    }
    /// <p>The ID of the exclusion.</p>
    pub fn get_exclusion_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.exclusion_id
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn internet_gateway_exclusion_mode(mut self, input: crate::types::InternetGatewayExclusionMode) -> Self {
        self.internet_gateway_exclusion_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn set_internet_gateway_exclusion_mode(mut self, input: ::std::option::Option<crate::types::InternetGatewayExclusionMode>) -> Self {
        self.internet_gateway_exclusion_mode = input;
        self
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn get_internet_gateway_exclusion_mode(&self) -> &::std::option::Option<crate::types::InternetGatewayExclusionMode> {
        &self.internet_gateway_exclusion_mode
    }
    /// <p>The ARN of the exclusion.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the exclusion.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the exclusion.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The state of the exclusion.</p>
    pub fn state(mut self, input: crate::types::VpcBlockPublicAccessExclusionState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the exclusion.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the exclusion.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VpcBlockPublicAccessExclusionState> {
        &self.state
    }
    /// <p>The reason for the current exclusion state.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current exclusion state.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the current exclusion state.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>When the exclusion was created.</p>
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the exclusion was created.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>When the exclusion was created.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// <p>When the exclusion was last updated.</p>
    pub fn last_update_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the exclusion was last updated.</p>
    pub fn set_last_update_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_timestamp = input;
        self
    }
    /// <p>When the exclusion was last updated.</p>
    pub fn get_last_update_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_timestamp
    }
    /// <p>When the exclusion was deleted.</p>
    pub fn deletion_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deletion_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the exclusion was deleted.</p>
    pub fn set_deletion_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deletion_timestamp = input;
        self
    }
    /// <p>When the exclusion was deleted.</p>
    pub fn get_deletion_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deletion_timestamp
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p><code>tag</code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p><code>tag</code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p><code>tag</code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpcBlockPublicAccessExclusion`](crate::types::VpcBlockPublicAccessExclusion).
    pub fn build(self) -> crate::types::VpcBlockPublicAccessExclusion {
        crate::types::VpcBlockPublicAccessExclusion {
            exclusion_id: self.exclusion_id,
            internet_gateway_exclusion_mode: self.internet_gateway_exclusion_mode,
            resource_arn: self.resource_arn,
            state: self.state,
            reason: self.reason,
            creation_timestamp: self.creation_timestamp,
            last_update_timestamp: self.last_update_timestamp,
            deletion_timestamp: self.deletion_timestamp,
            tags: self.tags,
        }
    }
}
