// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the current security configuration of an active VPN tunnel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActiveVpnTunnelStatus {
    /// <p>The encryption algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub phase1_encryption_algorithm: ::std::option::Option<::std::string::String>,
    /// <p>The encryption algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub phase2_encryption_algorithm: ::std::option::Option<::std::string::String>,
    /// <p>The integrity algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub phase1_integrity_algorithm: ::std::option::Option<::std::string::String>,
    /// <p>The integrity algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub phase2_integrity_algorithm: ::std::option::Option<::std::string::String>,
    /// <p>The Diffie-Hellman group number being used in Phase 1 IKE negotiations.</p>
    pub phase1_dh_group: ::std::option::Option<i32>,
    /// <p>The Diffie-Hellman group number being used in Phase 2 IKE negotiations.</p>
    pub phase2_dh_group: ::std::option::Option<i32>,
    /// <p>The version of the Internet Key Exchange (IKE) protocol being used.</p>
    pub ike_version: ::std::option::Option<::std::string::String>,
    /// <p>The current provisioning status of the VPN tunnel.</p>
    pub provisioning_status: ::std::option::Option<crate::types::VpnTunnelProvisioningStatus>,
    /// <p>The reason for the current provisioning status.</p>
    pub provisioning_status_reason: ::std::option::Option<::std::string::String>,
}
impl ActiveVpnTunnelStatus {
    /// <p>The encryption algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn phase1_encryption_algorithm(&self) -> ::std::option::Option<&str> {
        self.phase1_encryption_algorithm.as_deref()
    }
    /// <p>The encryption algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn phase2_encryption_algorithm(&self) -> ::std::option::Option<&str> {
        self.phase2_encryption_algorithm.as_deref()
    }
    /// <p>The integrity algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn phase1_integrity_algorithm(&self) -> ::std::option::Option<&str> {
        self.phase1_integrity_algorithm.as_deref()
    }
    /// <p>The integrity algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn phase2_integrity_algorithm(&self) -> ::std::option::Option<&str> {
        self.phase2_integrity_algorithm.as_deref()
    }
    /// <p>The Diffie-Hellman group number being used in Phase 1 IKE negotiations.</p>
    pub fn phase1_dh_group(&self) -> ::std::option::Option<i32> {
        self.phase1_dh_group
    }
    /// <p>The Diffie-Hellman group number being used in Phase 2 IKE negotiations.</p>
    pub fn phase2_dh_group(&self) -> ::std::option::Option<i32> {
        self.phase2_dh_group
    }
    /// <p>The version of the Internet Key Exchange (IKE) protocol being used.</p>
    pub fn ike_version(&self) -> ::std::option::Option<&str> {
        self.ike_version.as_deref()
    }
    /// <p>The current provisioning status of the VPN tunnel.</p>
    pub fn provisioning_status(&self) -> ::std::option::Option<&crate::types::VpnTunnelProvisioningStatus> {
        self.provisioning_status.as_ref()
    }
    /// <p>The reason for the current provisioning status.</p>
    pub fn provisioning_status_reason(&self) -> ::std::option::Option<&str> {
        self.provisioning_status_reason.as_deref()
    }
}
impl ActiveVpnTunnelStatus {
    /// Creates a new builder-style object to manufacture [`ActiveVpnTunnelStatus`](crate::types::ActiveVpnTunnelStatus).
    pub fn builder() -> crate::types::builders::ActiveVpnTunnelStatusBuilder {
        crate::types::builders::ActiveVpnTunnelStatusBuilder::default()
    }
}

/// A builder for [`ActiveVpnTunnelStatus`](crate::types::ActiveVpnTunnelStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActiveVpnTunnelStatusBuilder {
    pub(crate) phase1_encryption_algorithm: ::std::option::Option<::std::string::String>,
    pub(crate) phase2_encryption_algorithm: ::std::option::Option<::std::string::String>,
    pub(crate) phase1_integrity_algorithm: ::std::option::Option<::std::string::String>,
    pub(crate) phase2_integrity_algorithm: ::std::option::Option<::std::string::String>,
    pub(crate) phase1_dh_group: ::std::option::Option<i32>,
    pub(crate) phase2_dh_group: ::std::option::Option<i32>,
    pub(crate) ike_version: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_status: ::std::option::Option<crate::types::VpnTunnelProvisioningStatus>,
    pub(crate) provisioning_status_reason: ::std::option::Option<::std::string::String>,
}
impl ActiveVpnTunnelStatusBuilder {
    /// <p>The encryption algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn phase1_encryption_algorithm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phase1_encryption_algorithm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encryption algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn set_phase1_encryption_algorithm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phase1_encryption_algorithm = input;
        self
    }
    /// <p>The encryption algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn get_phase1_encryption_algorithm(&self) -> &::std::option::Option<::std::string::String> {
        &self.phase1_encryption_algorithm
    }
    /// <p>The encryption algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn phase2_encryption_algorithm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phase2_encryption_algorithm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encryption algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn set_phase2_encryption_algorithm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phase2_encryption_algorithm = input;
        self
    }
    /// <p>The encryption algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn get_phase2_encryption_algorithm(&self) -> &::std::option::Option<::std::string::String> {
        &self.phase2_encryption_algorithm
    }
    /// <p>The integrity algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn phase1_integrity_algorithm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phase1_integrity_algorithm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The integrity algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn set_phase1_integrity_algorithm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phase1_integrity_algorithm = input;
        self
    }
    /// <p>The integrity algorithm negotiated in Phase 1 IKE negotiations.</p>
    pub fn get_phase1_integrity_algorithm(&self) -> &::std::option::Option<::std::string::String> {
        &self.phase1_integrity_algorithm
    }
    /// <p>The integrity algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn phase2_integrity_algorithm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phase2_integrity_algorithm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The integrity algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn set_phase2_integrity_algorithm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phase2_integrity_algorithm = input;
        self
    }
    /// <p>The integrity algorithm negotiated in Phase 2 IKE negotiations.</p>
    pub fn get_phase2_integrity_algorithm(&self) -> &::std::option::Option<::std::string::String> {
        &self.phase2_integrity_algorithm
    }
    /// <p>The Diffie-Hellman group number being used in Phase 1 IKE negotiations.</p>
    pub fn phase1_dh_group(mut self, input: i32) -> Self {
        self.phase1_dh_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Diffie-Hellman group number being used in Phase 1 IKE negotiations.</p>
    pub fn set_phase1_dh_group(mut self, input: ::std::option::Option<i32>) -> Self {
        self.phase1_dh_group = input;
        self
    }
    /// <p>The Diffie-Hellman group number being used in Phase 1 IKE negotiations.</p>
    pub fn get_phase1_dh_group(&self) -> &::std::option::Option<i32> {
        &self.phase1_dh_group
    }
    /// <p>The Diffie-Hellman group number being used in Phase 2 IKE negotiations.</p>
    pub fn phase2_dh_group(mut self, input: i32) -> Self {
        self.phase2_dh_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Diffie-Hellman group number being used in Phase 2 IKE negotiations.</p>
    pub fn set_phase2_dh_group(mut self, input: ::std::option::Option<i32>) -> Self {
        self.phase2_dh_group = input;
        self
    }
    /// <p>The Diffie-Hellman group number being used in Phase 2 IKE negotiations.</p>
    pub fn get_phase2_dh_group(&self) -> &::std::option::Option<i32> {
        &self.phase2_dh_group
    }
    /// <p>The version of the Internet Key Exchange (IKE) protocol being used.</p>
    pub fn ike_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ike_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Internet Key Exchange (IKE) protocol being used.</p>
    pub fn set_ike_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ike_version = input;
        self
    }
    /// <p>The version of the Internet Key Exchange (IKE) protocol being used.</p>
    pub fn get_ike_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.ike_version
    }
    /// <p>The current provisioning status of the VPN tunnel.</p>
    pub fn provisioning_status(mut self, input: crate::types::VpnTunnelProvisioningStatus) -> Self {
        self.provisioning_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current provisioning status of the VPN tunnel.</p>
    pub fn set_provisioning_status(mut self, input: ::std::option::Option<crate::types::VpnTunnelProvisioningStatus>) -> Self {
        self.provisioning_status = input;
        self
    }
    /// <p>The current provisioning status of the VPN tunnel.</p>
    pub fn get_provisioning_status(&self) -> &::std::option::Option<crate::types::VpnTunnelProvisioningStatus> {
        &self.provisioning_status
    }
    /// <p>The reason for the current provisioning status.</p>
    pub fn provisioning_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioning_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current provisioning status.</p>
    pub fn set_provisioning_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioning_status_reason = input;
        self
    }
    /// <p>The reason for the current provisioning status.</p>
    pub fn get_provisioning_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioning_status_reason
    }
    /// Consumes the builder and constructs a [`ActiveVpnTunnelStatus`](crate::types::ActiveVpnTunnelStatus).
    pub fn build(self) -> crate::types::ActiveVpnTunnelStatus {
        crate::types::ActiveVpnTunnelStatus {
            phase1_encryption_algorithm: self.phase1_encryption_algorithm,
            phase2_encryption_algorithm: self.phase2_encryption_algorithm,
            phase1_integrity_algorithm: self.phase1_integrity_algorithm,
            phase2_integrity_algorithm: self.phase2_integrity_algorithm,
            phase1_dh_group: self.phase1_dh_group,
            phase2_dh_group: self.phase2_dh_group,
            ike_version: self.ike_version,
            provisioning_status: self.provisioning_status,
            provisioning_status_reason: self.provisioning_status_reason,
        }
    }
}
