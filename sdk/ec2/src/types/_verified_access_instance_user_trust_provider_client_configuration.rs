// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the trust provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifiedAccessInstanceUserTrustProviderClientConfiguration {
    /// <p>The trust provider type.</p>
    pub r#type: ::std::option::Option<crate::types::UserTrustProviderType>,
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub scopes: ::std::option::Option<::std::string::String>,
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
    /// <p>The authorization endpoint of the IdP.</p>
    pub authorization_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The public signing key endpoint.</p>
    pub public_signing_key_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The token endpoint of the IdP.</p>
    pub token_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The user info endpoint of the IdP.</p>
    pub user_info_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 client identifier.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 client secret.</p>
    pub client_secret: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether Proof of Key Code Exchange (PKCE) is enabled.</p>
    pub pkce_enabled: ::std::option::Option<bool>,
}
impl VerifiedAccessInstanceUserTrustProviderClientConfiguration {
    /// <p>The trust provider type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::UserTrustProviderType> {
        self.r#type.as_ref()
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn scopes(&self) -> ::std::option::Option<&str> {
        self.scopes.as_deref()
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn authorization_endpoint(&self) -> ::std::option::Option<&str> {
        self.authorization_endpoint.as_deref()
    }
    /// <p>The public signing key endpoint.</p>
    pub fn public_signing_key_endpoint(&self) -> ::std::option::Option<&str> {
        self.public_signing_key_endpoint.as_deref()
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn token_endpoint(&self) -> ::std::option::Option<&str> {
        self.token_endpoint.as_deref()
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn user_info_endpoint(&self) -> ::std::option::Option<&str> {
        self.user_info_endpoint.as_deref()
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The OAuth 2.0 client secret.</p>
    pub fn client_secret(&self) -> ::std::option::Option<&str> {
        self.client_secret.as_deref()
    }
    /// <p>Indicates whether Proof of Key Code Exchange (PKCE) is enabled.</p>
    pub fn pkce_enabled(&self) -> ::std::option::Option<bool> {
        self.pkce_enabled
    }
}
impl ::std::fmt::Debug for VerifiedAccessInstanceUserTrustProviderClientConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifiedAccessInstanceUserTrustProviderClientConfiguration");
        formatter.field("r#type", &self.r#type);
        formatter.field("scopes", &self.scopes);
        formatter.field("issuer", &self.issuer);
        formatter.field("authorization_endpoint", &self.authorization_endpoint);
        formatter.field("public_signing_key_endpoint", &self.public_signing_key_endpoint);
        formatter.field("token_endpoint", &self.token_endpoint);
        formatter.field("user_info_endpoint", &self.user_info_endpoint);
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("pkce_enabled", &self.pkce_enabled);
        formatter.finish()
    }
}
impl VerifiedAccessInstanceUserTrustProviderClientConfiguration {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessInstanceUserTrustProviderClientConfiguration`](crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration).
    pub fn builder() -> crate::types::builders::VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder {
        crate::types::builders::VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder::default()
    }
}

/// A builder for [`VerifiedAccessInstanceUserTrustProviderClientConfiguration`](crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::UserTrustProviderType>,
    pub(crate) scopes: ::std::option::Option<::std::string::String>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) public_signing_key_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) user_info_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) pkce_enabled: ::std::option::Option<bool>,
}
impl VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder {
    /// <p>The trust provider type.</p>
    pub fn r#type(mut self, input: crate::types::UserTrustProviderType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The trust provider type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::UserTrustProviderType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The trust provider type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::UserTrustProviderType> {
        &self.r#type
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scopes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::string::String> {
        &self.scopes
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// <p>The public signing key endpoint.</p>
    pub fn public_signing_key_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_signing_key_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public signing key endpoint.</p>
    pub fn set_public_signing_key_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_signing_key_endpoint = input;
        self
    }
    /// <p>The public signing key endpoint.</p>
    pub fn get_public_signing_key_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_signing_key_endpoint
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn token_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn set_token_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_endpoint = input;
        self
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn get_token_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_endpoint
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn user_info_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_info_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn set_user_info_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_info_endpoint = input;
        self
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn get_user_info_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_info_endpoint
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The OAuth 2.0 client secret.</p>
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 client secret.</p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p>The OAuth 2.0 client secret.</p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// <p>Indicates whether Proof of Key Code Exchange (PKCE) is enabled.</p>
    pub fn pkce_enabled(mut self, input: bool) -> Self {
        self.pkce_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Proof of Key Code Exchange (PKCE) is enabled.</p>
    pub fn set_pkce_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pkce_enabled = input;
        self
    }
    /// <p>Indicates whether Proof of Key Code Exchange (PKCE) is enabled.</p>
    pub fn get_pkce_enabled(&self) -> &::std::option::Option<bool> {
        &self.pkce_enabled
    }
    /// Consumes the builder and constructs a [`VerifiedAccessInstanceUserTrustProviderClientConfiguration`](crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration).
    pub fn build(self) -> crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration {
        crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration {
            r#type: self.r#type,
            scopes: self.scopes,
            issuer: self.issuer,
            authorization_endpoint: self.authorization_endpoint,
            public_signing_key_endpoint: self.public_signing_key_endpoint,
            token_endpoint: self.token_endpoint,
            user_info_endpoint: self.user_info_endpoint,
            client_id: self.client_id,
            client_secret: self.client_secret,
            pkce_enabled: self.pkce_enabled,
        }
    }
}
impl ::std::fmt::Debug for VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifiedAccessInstanceUserTrustProviderClientConfigurationBuilder");
        formatter.field("r#type", &self.r#type);
        formatter.field("scopes", &self.scopes);
        formatter.field("issuer", &self.issuer);
        formatter.field("authorization_endpoint", &self.authorization_endpoint);
        formatter.field("public_signing_key_endpoint", &self.public_signing_key_endpoint);
        formatter.field("token_endpoint", &self.token_endpoint);
        formatter.field("user_info_endpoint", &self.user_info_endpoint);
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("pkce_enabled", &self.pkce_enabled);
        formatter.finish()
    }
}
