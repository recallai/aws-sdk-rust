// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current status of Client Route Enforcement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClientRouteEnforcementResponseOptions {
    /// <p>Status of the client route enforcement feature, indicating whether Client Route Enforcement is <code>true</code> (enabled) or <code>false</code> (disabled).</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub enforced: ::std::option::Option<bool>,
}
impl ClientRouteEnforcementResponseOptions {
    /// <p>Status of the client route enforcement feature, indicating whether Client Route Enforcement is <code>true</code> (enabled) or <code>false</code> (disabled).</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn enforced(&self) -> ::std::option::Option<bool> {
        self.enforced
    }
}
impl ClientRouteEnforcementResponseOptions {
    /// Creates a new builder-style object to manufacture [`ClientRouteEnforcementResponseOptions`](crate::types::ClientRouteEnforcementResponseOptions).
    pub fn builder() -> crate::types::builders::ClientRouteEnforcementResponseOptionsBuilder {
        crate::types::builders::ClientRouteEnforcementResponseOptionsBuilder::default()
    }
}

/// A builder for [`ClientRouteEnforcementResponseOptions`](crate::types::ClientRouteEnforcementResponseOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClientRouteEnforcementResponseOptionsBuilder {
    pub(crate) enforced: ::std::option::Option<bool>,
}
impl ClientRouteEnforcementResponseOptionsBuilder {
    /// <p>Status of the client route enforcement feature, indicating whether Client Route Enforcement is <code>true</code> (enabled) or <code>false</code> (disabled).</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn enforced(mut self, input: bool) -> Self {
        self.enforced = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the client route enforcement feature, indicating whether Client Route Enforcement is <code>true</code> (enabled) or <code>false</code> (disabled).</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn set_enforced(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enforced = input;
        self
    }
    /// <p>Status of the client route enforcement feature, indicating whether Client Route Enforcement is <code>true</code> (enabled) or <code>false</code> (disabled).</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn get_enforced(&self) -> &::std::option::Option<bool> {
        &self.enforced
    }
    /// Consumes the builder and constructs a [`ClientRouteEnforcementResponseOptions`](crate::types::ClientRouteEnforcementResponseOptions).
    pub fn build(self) -> crate::types::ClientRouteEnforcementResponseOptions {
        crate::types::ClientRouteEnforcementResponseOptions { enforced: self.enforced }
    }
}
