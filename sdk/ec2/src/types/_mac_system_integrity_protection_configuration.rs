// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for a System Integrity Protection (SIP) modification task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MacSystemIntegrityProtectionConfiguration {
    /// <p>Indicates whether Apple Internal was enabled or disabled by the task.</p>
    pub apple_internal: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether Base System was enabled or disabled by the task.</p>
    pub base_system: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether Debugging Restrictions was enabled or disabled by the task.</p>
    pub debugging_restrictions: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether Dtrace Restrictions was enabled or disabled by the task.</p>
    pub d_trace_restrictions: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether Filesystem Protections was enabled or disabled by the task.</p>
    pub filesystem_protections: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether Kext Signing was enabled or disabled by the task.</p>
    pub kext_signing: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates whether NVRAM Protections was enabled or disabled by the task.</p>
    pub nvram_protections: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Indicates SIP was enabled or disabled by the task.</p>
    pub status: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
}
impl MacSystemIntegrityProtectionConfiguration {
    /// <p>Indicates whether Apple Internal was enabled or disabled by the task.</p>
    pub fn apple_internal(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.apple_internal.as_ref()
    }
    /// <p>Indicates whether Base System was enabled or disabled by the task.</p>
    pub fn base_system(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.base_system.as_ref()
    }
    /// <p>Indicates whether Debugging Restrictions was enabled or disabled by the task.</p>
    pub fn debugging_restrictions(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.debugging_restrictions.as_ref()
    }
    /// <p>Indicates whether Dtrace Restrictions was enabled or disabled by the task.</p>
    pub fn d_trace_restrictions(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.d_trace_restrictions.as_ref()
    }
    /// <p>Indicates whether Filesystem Protections was enabled or disabled by the task.</p>
    pub fn filesystem_protections(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.filesystem_protections.as_ref()
    }
    /// <p>Indicates whether Kext Signing was enabled or disabled by the task.</p>
    pub fn kext_signing(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.kext_signing.as_ref()
    }
    /// <p>Indicates whether NVRAM Protections was enabled or disabled by the task.</p>
    pub fn nvram_protections(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.nvram_protections.as_ref()
    }
    /// <p>Indicates SIP was enabled or disabled by the task.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.status.as_ref()
    }
}
impl MacSystemIntegrityProtectionConfiguration {
    /// Creates a new builder-style object to manufacture [`MacSystemIntegrityProtectionConfiguration`](crate::types::MacSystemIntegrityProtectionConfiguration).
    pub fn builder() -> crate::types::builders::MacSystemIntegrityProtectionConfigurationBuilder {
        crate::types::builders::MacSystemIntegrityProtectionConfigurationBuilder::default()
    }
}

/// A builder for [`MacSystemIntegrityProtectionConfiguration`](crate::types::MacSystemIntegrityProtectionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MacSystemIntegrityProtectionConfigurationBuilder {
    pub(crate) apple_internal: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) base_system: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) debugging_restrictions: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) d_trace_restrictions: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) filesystem_protections: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) kext_signing: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) nvram_protections: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) status: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
}
impl MacSystemIntegrityProtectionConfigurationBuilder {
    /// <p>Indicates whether Apple Internal was enabled or disabled by the task.</p>
    pub fn apple_internal(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.apple_internal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Apple Internal was enabled or disabled by the task.</p>
    pub fn set_apple_internal(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.apple_internal = input;
        self
    }
    /// <p>Indicates whether Apple Internal was enabled or disabled by the task.</p>
    pub fn get_apple_internal(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.apple_internal
    }
    /// <p>Indicates whether Base System was enabled or disabled by the task.</p>
    pub fn base_system(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.base_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Base System was enabled or disabled by the task.</p>
    pub fn set_base_system(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.base_system = input;
        self
    }
    /// <p>Indicates whether Base System was enabled or disabled by the task.</p>
    pub fn get_base_system(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.base_system
    }
    /// <p>Indicates whether Debugging Restrictions was enabled or disabled by the task.</p>
    pub fn debugging_restrictions(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.debugging_restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Debugging Restrictions was enabled or disabled by the task.</p>
    pub fn set_debugging_restrictions(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.debugging_restrictions = input;
        self
    }
    /// <p>Indicates whether Debugging Restrictions was enabled or disabled by the task.</p>
    pub fn get_debugging_restrictions(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.debugging_restrictions
    }
    /// <p>Indicates whether Dtrace Restrictions was enabled or disabled by the task.</p>
    pub fn d_trace_restrictions(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.d_trace_restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Dtrace Restrictions was enabled or disabled by the task.</p>
    pub fn set_d_trace_restrictions(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.d_trace_restrictions = input;
        self
    }
    /// <p>Indicates whether Dtrace Restrictions was enabled or disabled by the task.</p>
    pub fn get_d_trace_restrictions(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.d_trace_restrictions
    }
    /// <p>Indicates whether Filesystem Protections was enabled or disabled by the task.</p>
    pub fn filesystem_protections(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.filesystem_protections = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Filesystem Protections was enabled or disabled by the task.</p>
    pub fn set_filesystem_protections(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.filesystem_protections = input;
        self
    }
    /// <p>Indicates whether Filesystem Protections was enabled or disabled by the task.</p>
    pub fn get_filesystem_protections(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.filesystem_protections
    }
    /// <p>Indicates whether Kext Signing was enabled or disabled by the task.</p>
    pub fn kext_signing(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.kext_signing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Kext Signing was enabled or disabled by the task.</p>
    pub fn set_kext_signing(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.kext_signing = input;
        self
    }
    /// <p>Indicates whether Kext Signing was enabled or disabled by the task.</p>
    pub fn get_kext_signing(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.kext_signing
    }
    /// <p>Indicates whether NVRAM Protections was enabled or disabled by the task.</p>
    pub fn nvram_protections(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.nvram_protections = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether NVRAM Protections was enabled or disabled by the task.</p>
    pub fn set_nvram_protections(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.nvram_protections = input;
        self
    }
    /// <p>Indicates whether NVRAM Protections was enabled or disabled by the task.</p>
    pub fn get_nvram_protections(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.nvram_protections
    }
    /// <p>Indicates SIP was enabled or disabled by the task.</p>
    pub fn status(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates SIP was enabled or disabled by the task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates SIP was enabled or disabled by the task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`MacSystemIntegrityProtectionConfiguration`](crate::types::MacSystemIntegrityProtectionConfiguration).
    pub fn build(self) -> crate::types::MacSystemIntegrityProtectionConfiguration {
        crate::types::MacSystemIntegrityProtectionConfiguration {
            apple_internal: self.apple_internal,
            base_system: self.base_system,
            debugging_restrictions: self.debugging_restrictions,
            d_trace_restrictions: self.d_trace_restrictions,
            filesystem_protections: self.filesystem_protections,
            kext_signing: self.kext_signing,
            nvram_protections: self.nvram_protections,
            status: self.status,
        }
    }
}
