// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single entry in an image usage report, detailing how an image is being used by a specific Amazon Web Services account and resource type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageUsageReportEntry {
    /// <p>The type of resource (<code>ec2:Instance</code> or <code>ec2:LaunchTemplate</code>).</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the report.</p>
    pub report_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of times resources of this type reference this image in the account.</p>
    pub usage_count: ::std::option::Option<i64>,
    /// <p>The ID of the account that uses the image.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the image.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the report creation was initiated.</p>
    pub report_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ImageUsageReportEntry {
    /// <p>The type of resource (<code>ec2:Instance</code> or <code>ec2:LaunchTemplate</code>).</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The ID of the report.</p>
    pub fn report_id(&self) -> ::std::option::Option<&str> {
        self.report_id.as_deref()
    }
    /// <p>The number of times resources of this type reference this image in the account.</p>
    pub fn usage_count(&self) -> ::std::option::Option<i64> {
        self.usage_count
    }
    /// <p>The ID of the account that uses the image.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ID of the image.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The date and time the report creation was initiated.</p>
    pub fn report_creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.report_creation_time.as_ref()
    }
}
impl ImageUsageReportEntry {
    /// Creates a new builder-style object to manufacture [`ImageUsageReportEntry`](crate::types::ImageUsageReportEntry).
    pub fn builder() -> crate::types::builders::ImageUsageReportEntryBuilder {
        crate::types::builders::ImageUsageReportEntryBuilder::default()
    }
}

/// A builder for [`ImageUsageReportEntry`](crate::types::ImageUsageReportEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageUsageReportEntryBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) report_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_count: ::std::option::Option<i64>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) report_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ImageUsageReportEntryBuilder {
    /// <p>The type of resource (<code>ec2:Instance</code> or <code>ec2:LaunchTemplate</code>).</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of resource (<code>ec2:Instance</code> or <code>ec2:LaunchTemplate</code>).</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource (<code>ec2:Instance</code> or <code>ec2:LaunchTemplate</code>).</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The ID of the report.</p>
    pub fn report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the report.</p>
    pub fn set_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_id = input;
        self
    }
    /// <p>The ID of the report.</p>
    pub fn get_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_id
    }
    /// <p>The number of times resources of this type reference this image in the account.</p>
    pub fn usage_count(mut self, input: i64) -> Self {
        self.usage_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times resources of this type reference this image in the account.</p>
    pub fn set_usage_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.usage_count = input;
        self
    }
    /// <p>The number of times resources of this type reference this image in the account.</p>
    pub fn get_usage_count(&self) -> &::std::option::Option<i64> {
        &self.usage_count
    }
    /// <p>The ID of the account that uses the image.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that uses the image.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the account that uses the image.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The ID of the image.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The ID of the image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The date and time the report creation was initiated.</p>
    pub fn report_creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.report_creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the report creation was initiated.</p>
    pub fn set_report_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.report_creation_time = input;
        self
    }
    /// <p>The date and time the report creation was initiated.</p>
    pub fn get_report_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.report_creation_time
    }
    /// Consumes the builder and constructs a [`ImageUsageReportEntry`](crate::types::ImageUsageReportEntry).
    pub fn build(self) -> crate::types::ImageUsageReportEntry {
        crate::types::ImageUsageReportEntry {
            resource_type: self.resource_type,
            report_id: self.report_id,
            usage_count: self.usage_count,
            account_id: self.account_id,
            image_id: self.image_id,
            report_creation_time: self.report_creation_time,
        }
    }
}
