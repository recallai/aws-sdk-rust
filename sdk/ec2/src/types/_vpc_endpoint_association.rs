// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the VPC resources, VPC endpoint services, Lattice services, or service networks associated with the VPC endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEndpointAssociation {
    /// <p>The ID of the VPC endpoint association.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub service_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service network.</p>
    pub service_network_name: ::std::option::Option<::std::string::String>,
    /// <p>The connectivity status of the resources associated to a VPC endpoint. The resource is accessible if the associated resource configuration is <code>AVAILABLE</code>, otherwise the resource is inaccessible.</p>
    pub associated_resource_accessibility: ::std::option::Option<::std::string::String>,
    /// <p>A message related to why an VPC endpoint association failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>An error code related to why an VPC endpoint association failed.</p>
    pub failure_code: ::std::option::Option<::std::string::String>,
    /// <p>The DNS entry of the VPC endpoint association.</p>
    pub dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    /// <p>The private DNS entry of the VPC endpoint association.</p>
    pub private_dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    /// <p>The Amazon Resource Name (ARN) of the associated resource.</p>
    pub associated_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource configuration group.</p>
    pub resource_configuration_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags to apply to the VPC endpoint association.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointAssociation {
    /// <p>The ID of the VPC endpoint association.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(&self) -> ::std::option::Option<&str> {
        self.service_network_arn.as_deref()
    }
    /// <p>The name of the service network.</p>
    pub fn service_network_name(&self) -> ::std::option::Option<&str> {
        self.service_network_name.as_deref()
    }
    /// <p>The connectivity status of the resources associated to a VPC endpoint. The resource is accessible if the associated resource configuration is <code>AVAILABLE</code>, otherwise the resource is inaccessible.</p>
    pub fn associated_resource_accessibility(&self) -> ::std::option::Option<&str> {
        self.associated_resource_accessibility.as_deref()
    }
    /// <p>A message related to why an VPC endpoint association failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>An error code related to why an VPC endpoint association failed.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&str> {
        self.failure_code.as_deref()
    }
    /// <p>The DNS entry of the VPC endpoint association.</p>
    pub fn dns_entry(&self) -> ::std::option::Option<&crate::types::DnsEntry> {
        self.dns_entry.as_ref()
    }
    /// <p>The private DNS entry of the VPC endpoint association.</p>
    pub fn private_dns_entry(&self) -> ::std::option::Option<&crate::types::DnsEntry> {
        self.private_dns_entry.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the associated resource.</p>
    pub fn associated_resource_arn(&self) -> ::std::option::Option<&str> {
        self.associated_resource_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration group.</p>
    pub fn resource_configuration_group_arn(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_group_arn.as_deref()
    }
    /// <p>The tags to apply to the VPC endpoint association.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpcEndpointAssociation {
    /// Creates a new builder-style object to manufacture [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
    pub fn builder() -> crate::types::builders::VpcEndpointAssociationBuilder {
        crate::types::builders::VpcEndpointAssociationBuilder::default()
    }
}

/// A builder for [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcEndpointAssociationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_name: ::std::option::Option<::std::string::String>,
    pub(crate) associated_resource_accessibility: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<::std::string::String>,
    pub(crate) dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    pub(crate) private_dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    pub(crate) associated_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointAssociationBuilder {
    /// <p>The ID of the VPC endpoint association.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the VPC endpoint association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn get_service_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_arn
    }
    /// <p>The name of the service network.</p>
    pub fn service_network_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service network.</p>
    pub fn set_service_network_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_name = input;
        self
    }
    /// <p>The name of the service network.</p>
    pub fn get_service_network_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_name
    }
    /// <p>The connectivity status of the resources associated to a VPC endpoint. The resource is accessible if the associated resource configuration is <code>AVAILABLE</code>, otherwise the resource is inaccessible.</p>
    pub fn associated_resource_accessibility(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource_accessibility = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connectivity status of the resources associated to a VPC endpoint. The resource is accessible if the associated resource configuration is <code>AVAILABLE</code>, otherwise the resource is inaccessible.</p>
    pub fn set_associated_resource_accessibility(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource_accessibility = input;
        self
    }
    /// <p>The connectivity status of the resources associated to a VPC endpoint. The resource is accessible if the associated resource configuration is <code>AVAILABLE</code>, otherwise the resource is inaccessible.</p>
    pub fn get_associated_resource_accessibility(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource_accessibility
    }
    /// <p>A message related to why an VPC endpoint association failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message related to why an VPC endpoint association failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>A message related to why an VPC endpoint association failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>An error code related to why an VPC endpoint association failed.</p>
    pub fn failure_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error code related to why an VPC endpoint association failed.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>An error code related to why an VPC endpoint association failed.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_code
    }
    /// <p>The DNS entry of the VPC endpoint association.</p>
    pub fn dns_entry(mut self, input: crate::types::DnsEntry) -> Self {
        self.dns_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DNS entry of the VPC endpoint association.</p>
    pub fn set_dns_entry(mut self, input: ::std::option::Option<crate::types::DnsEntry>) -> Self {
        self.dns_entry = input;
        self
    }
    /// <p>The DNS entry of the VPC endpoint association.</p>
    pub fn get_dns_entry(&self) -> &::std::option::Option<crate::types::DnsEntry> {
        &self.dns_entry
    }
    /// <p>The private DNS entry of the VPC endpoint association.</p>
    pub fn private_dns_entry(mut self, input: crate::types::DnsEntry) -> Self {
        self.private_dns_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The private DNS entry of the VPC endpoint association.</p>
    pub fn set_private_dns_entry(mut self, input: ::std::option::Option<crate::types::DnsEntry>) -> Self {
        self.private_dns_entry = input;
        self
    }
    /// <p>The private DNS entry of the VPC endpoint association.</p>
    pub fn get_private_dns_entry(&self) -> &::std::option::Option<crate::types::DnsEntry> {
        &self.private_dns_entry
    }
    /// <p>The Amazon Resource Name (ARN) of the associated resource.</p>
    pub fn associated_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the associated resource.</p>
    pub fn set_associated_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the associated resource.</p>
    pub fn get_associated_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration group.</p>
    pub fn resource_configuration_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration group.</p>
    pub fn set_resource_configuration_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration group.</p>
    pub fn get_resource_configuration_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_group_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the VPC endpoint association.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the VPC endpoint association.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to apply to the VPC endpoint association.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
    pub fn build(self) -> crate::types::VpcEndpointAssociation {
        crate::types::VpcEndpointAssociation {
            id: self.id,
            vpc_endpoint_id: self.vpc_endpoint_id,
            service_network_arn: self.service_network_arn,
            service_network_name: self.service_network_name,
            associated_resource_accessibility: self.associated_resource_accessibility,
            failure_reason: self.failure_reason,
            failure_code: self.failure_code,
            dns_entry: self.dns_entry,
            private_dns_entry: self.private_dns_entry,
            associated_resource_arn: self.associated_resource_arn,
            resource_configuration_group_arn: self.resource_configuration_group_arn,
            tags: self.tags,
        }
    }
}
