// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Outpost link aggregation group (LAG).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutpostLag {
    /// <p>The Amazon Resource Number (ARN) of the Outpost LAG.</p>
    pub outpost_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Outpost LAG owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the Outpost LAG.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Outpost LAG.</p>
    pub outpost_lag_id: ::std::option::Option<::std::string::String>,
    /// <p>The IDs of the local gateway virtual interfaces associated with the Outpost LAG.</p>
    pub local_gateway_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The service link virtual interface IDs associated with the Outpost LAG.</p>
    pub service_link_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The tags associated with the Outpost LAG.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl OutpostLag {
    /// <p>The Amazon Resource Number (ARN) of the Outpost LAG.</p>
    pub fn outpost_arn(&self) -> ::std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>The ID of the Outpost LAG owner.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The current state of the Outpost LAG.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The ID of the Outpost LAG.</p>
    pub fn outpost_lag_id(&self) -> ::std::option::Option<&str> {
        self.outpost_lag_id.as_deref()
    }
    /// <p>The IDs of the local gateway virtual interfaces associated with the Outpost LAG.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_gateway_virtual_interface_ids.is_none()`.
    pub fn local_gateway_virtual_interface_ids(&self) -> &[::std::string::String] {
        self.local_gateway_virtual_interface_ids.as_deref().unwrap_or_default()
    }
    /// <p>The service link virtual interface IDs associated with the Outpost LAG.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_link_virtual_interface_ids.is_none()`.
    pub fn service_link_virtual_interface_ids(&self) -> &[::std::string::String] {
        self.service_link_virtual_interface_ids.as_deref().unwrap_or_default()
    }
    /// <p>The tags associated with the Outpost LAG.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl OutpostLag {
    /// Creates a new builder-style object to manufacture [`OutpostLag`](crate::types::OutpostLag).
    pub fn builder() -> crate::types::builders::OutpostLagBuilder {
        crate::types::builders::OutpostLagBuilder::default()
    }
}

/// A builder for [`OutpostLag`](crate::types::OutpostLag).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OutpostLagBuilder {
    pub(crate) outpost_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_lag_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_gateway_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) service_link_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl OutpostLagBuilder {
    /// <p>The Amazon Resource Number (ARN) of the Outpost LAG.</p>
    pub fn outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the Outpost LAG.</p>
    pub fn set_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the Outpost LAG.</p>
    pub fn get_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_arn
    }
    /// <p>The ID of the Outpost LAG owner.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Outpost LAG owner.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Outpost LAG owner.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The current state of the Outpost LAG.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the Outpost LAG.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the Outpost LAG.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The ID of the Outpost LAG.</p>
    pub fn outpost_lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_lag_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Outpost LAG.</p>
    pub fn set_outpost_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_lag_id = input;
        self
    }
    /// <p>The ID of the Outpost LAG.</p>
    pub fn get_outpost_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_lag_id
    }
    /// Appends an item to `local_gateway_virtual_interface_ids`.
    ///
    /// To override the contents of this collection use [`set_local_gateway_virtual_interface_ids`](Self::set_local_gateway_virtual_interface_ids).
    ///
    /// <p>The IDs of the local gateway virtual interfaces associated with the Outpost LAG.</p>
    pub fn local_gateway_virtual_interface_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.local_gateway_virtual_interface_ids.unwrap_or_default();
        v.push(input.into());
        self.local_gateway_virtual_interface_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the local gateway virtual interfaces associated with the Outpost LAG.</p>
    pub fn set_local_gateway_virtual_interface_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.local_gateway_virtual_interface_ids = input;
        self
    }
    /// <p>The IDs of the local gateway virtual interfaces associated with the Outpost LAG.</p>
    pub fn get_local_gateway_virtual_interface_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.local_gateway_virtual_interface_ids
    }
    /// Appends an item to `service_link_virtual_interface_ids`.
    ///
    /// To override the contents of this collection use [`set_service_link_virtual_interface_ids`](Self::set_service_link_virtual_interface_ids).
    ///
    /// <p>The service link virtual interface IDs associated with the Outpost LAG.</p>
    pub fn service_link_virtual_interface_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.service_link_virtual_interface_ids.unwrap_or_default();
        v.push(input.into());
        self.service_link_virtual_interface_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The service link virtual interface IDs associated with the Outpost LAG.</p>
    pub fn set_service_link_virtual_interface_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.service_link_virtual_interface_ids = input;
        self
    }
    /// <p>The service link virtual interface IDs associated with the Outpost LAG.</p>
    pub fn get_service_link_virtual_interface_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.service_link_virtual_interface_ids
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the Outpost LAG.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the Outpost LAG.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the Outpost LAG.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`OutpostLag`](crate::types::OutpostLag).
    pub fn build(self) -> crate::types::OutpostLag {
        crate::types::OutpostLag {
            outpost_arn: self.outpost_arn,
            owner_id: self.owner_id,
            state: self.state,
            outpost_lag_id: self.outpost_lag_id,
            local_gateway_virtual_interface_ids: self.local_gateway_virtual_interface_ids,
            service_link_virtual_interface_ids: self.service_link_virtual_interface_ids,
            tags: self.tags,
        }
    }
}
