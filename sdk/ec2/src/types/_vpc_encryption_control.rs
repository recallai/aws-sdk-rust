// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEncryptionControl {
    #[allow(missing_docs)] // documentation missing in model
    pub vpc_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub vpc_encryption_control_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub mode: ::std::option::Option<crate::types::VpcEncryptionControlMode>,
    #[allow(missing_docs)] // documentation missing in model
    pub state: ::std::option::Option<crate::types::VpcEncryptionControlState>,
    #[allow(missing_docs)] // documentation missing in model
    pub state_message: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub resource_exclusions: ::std::option::Option<crate::types::VpcEncryptionControlExclusions>,
    #[allow(missing_docs)] // documentation missing in model
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEncryptionControl {
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_encryption_control_id(&self) -> ::std::option::Option<&str> {
        self.vpc_encryption_control_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn mode(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlMode> {
        self.mode.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlState> {
        self.state.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state_message(&self) -> ::std::option::Option<&str> {
        self.state_message.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn resource_exclusions(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusions> {
        self.resource_exclusions.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpcEncryptionControl {
    /// Creates a new builder-style object to manufacture [`VpcEncryptionControl`](crate::types::VpcEncryptionControl).
    pub fn builder() -> crate::types::builders::VpcEncryptionControlBuilder {
        crate::types::builders::VpcEncryptionControlBuilder::default()
    }
}

/// A builder for [`VpcEncryptionControl`](crate::types::VpcEncryptionControl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcEncryptionControlBuilder {
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_encryption_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) mode: ::std::option::Option<crate::types::VpcEncryptionControlMode>,
    pub(crate) state: ::std::option::Option<crate::types::VpcEncryptionControlState>,
    pub(crate) state_message: ::std::option::Option<::std::string::String>,
    pub(crate) resource_exclusions: ::std::option::Option<crate::types::VpcEncryptionControlExclusions>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEncryptionControlBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_encryption_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_encryption_control_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_vpc_encryption_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_encryption_control_id = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_vpc_encryption_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_encryption_control_id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn mode(mut self, input: crate::types::VpcEncryptionControlMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlMode>) -> Self {
        self.mode = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlMode> {
        &self.mode
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state(mut self, input: crate::types::VpcEncryptionControlState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlState>) -> Self {
        self.state = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlState> {
        &self.state
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_state_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_state_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_message
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn resource_exclusions(mut self, input: crate::types::VpcEncryptionControlExclusions) -> Self {
        self.resource_exclusions = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource_exclusions(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusions>) -> Self {
        self.resource_exclusions = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resource_exclusions(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusions> {
        &self.resource_exclusions
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpcEncryptionControl`](crate::types::VpcEncryptionControl).
    pub fn build(self) -> crate::types::VpcEncryptionControl {
        crate::types::VpcEncryptionControl {
            vpc_id: self.vpc_id,
            vpc_encryption_control_id: self.vpc_encryption_control_id,
            mode: self.mode,
            state: self.state,
            state_message: self.state_message,
            resource_exclusions: self.resource_exclusions,
            tags: self.tags,
        }
    }
}
