// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary report for the attribute across all Regions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeSummary {
    /// <p>The name of the attribute.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration value that is most frequently observed for the attribute.</p>
    pub most_frequent_value: ::std::option::Option<::std::string::String>,
    /// <p>The number of accounts with the same configuration value for the attribute that is most frequently observed.</p>
    pub number_of_matched_accounts: ::std::option::Option<i32>,
    /// <p>The number of accounts with a configuration value different from the most frequently observed value for the attribute.</p>
    pub number_of_unmatched_accounts: ::std::option::Option<i32>,
    /// <p>The summary report for each Region for the attribute.</p>
    pub regional_summaries: ::std::option::Option<::std::vec::Vec<crate::types::RegionalSummary>>,
}
impl AttributeSummary {
    /// <p>The name of the attribute.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The configuration value that is most frequently observed for the attribute.</p>
    pub fn most_frequent_value(&self) -> ::std::option::Option<&str> {
        self.most_frequent_value.as_deref()
    }
    /// <p>The number of accounts with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn number_of_matched_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_matched_accounts
    }
    /// <p>The number of accounts with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn number_of_unmatched_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_unmatched_accounts
    }
    /// <p>The summary report for each Region for the attribute.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regional_summaries.is_none()`.
    pub fn regional_summaries(&self) -> &[crate::types::RegionalSummary] {
        self.regional_summaries.as_deref().unwrap_or_default()
    }
}
impl AttributeSummary {
    /// Creates a new builder-style object to manufacture [`AttributeSummary`](crate::types::AttributeSummary).
    pub fn builder() -> crate::types::builders::AttributeSummaryBuilder {
        crate::types::builders::AttributeSummaryBuilder::default()
    }
}

/// A builder for [`AttributeSummary`](crate::types::AttributeSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttributeSummaryBuilder {
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) most_frequent_value: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_matched_accounts: ::std::option::Option<i32>,
    pub(crate) number_of_unmatched_accounts: ::std::option::Option<i32>,
    pub(crate) regional_summaries: ::std::option::Option<::std::vec::Vec<crate::types::RegionalSummary>>,
}
impl AttributeSummaryBuilder {
    /// <p>The name of the attribute.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// <p>The configuration value that is most frequently observed for the attribute.</p>
    pub fn most_frequent_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.most_frequent_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration value that is most frequently observed for the attribute.</p>
    pub fn set_most_frequent_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.most_frequent_value = input;
        self
    }
    /// <p>The configuration value that is most frequently observed for the attribute.</p>
    pub fn get_most_frequent_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.most_frequent_value
    }
    /// <p>The number of accounts with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn number_of_matched_accounts(mut self, input: i32) -> Self {
        self.number_of_matched_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of accounts with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn set_number_of_matched_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_matched_accounts = input;
        self
    }
    /// <p>The number of accounts with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn get_number_of_matched_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_matched_accounts
    }
    /// <p>The number of accounts with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn number_of_unmatched_accounts(mut self, input: i32) -> Self {
        self.number_of_unmatched_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of accounts with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn set_number_of_unmatched_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_unmatched_accounts = input;
        self
    }
    /// <p>The number of accounts with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn get_number_of_unmatched_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_unmatched_accounts
    }
    /// Appends an item to `regional_summaries`.
    ///
    /// To override the contents of this collection use [`set_regional_summaries`](Self::set_regional_summaries).
    ///
    /// <p>The summary report for each Region for the attribute.</p>
    pub fn regional_summaries(mut self, input: crate::types::RegionalSummary) -> Self {
        let mut v = self.regional_summaries.unwrap_or_default();
        v.push(input);
        self.regional_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The summary report for each Region for the attribute.</p>
    pub fn set_regional_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegionalSummary>>) -> Self {
        self.regional_summaries = input;
        self
    }
    /// <p>The summary report for each Region for the attribute.</p>
    pub fn get_regional_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegionalSummary>> {
        &self.regional_summaries
    }
    /// Consumes the builder and constructs a [`AttributeSummary`](crate::types::AttributeSummary).
    pub fn build(self) -> crate::types::AttributeSummary {
        crate::types::AttributeSummary {
            attribute_name: self.attribute_name,
            most_frequent_value: self.most_frequent_value,
            number_of_matched_accounts: self.number_of_matched_accounts,
            number_of_unmatched_accounts: self.number_of_unmatched_accounts,
            regional_summaries: self.regional_summaries,
        }
    }
}
