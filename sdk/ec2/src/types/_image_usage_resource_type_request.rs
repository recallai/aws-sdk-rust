// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource type to include in the report. Associated options can also be specified if the resource type is a launch template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageUsageResourceTypeRequest {
    /// <p>The resource type.</p>
    /// <p>Valid values: <code>ec2:Instance</code> | <code>ec2:LaunchTemplate</code></p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The options that affect the scope of the report. Valid only when <code>ResourceType</code> is <code>ec2:LaunchTemplate</code>.</p>
    pub resource_type_options: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceTypeOptionRequest>>,
}
impl ImageUsageResourceTypeRequest {
    /// <p>The resource type.</p>
    /// <p>Valid values: <code>ec2:Instance</code> | <code>ec2:LaunchTemplate</code></p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The options that affect the scope of the report. Valid only when <code>ResourceType</code> is <code>ec2:LaunchTemplate</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_type_options.is_none()`.
    pub fn resource_type_options(&self) -> &[crate::types::ImageUsageResourceTypeOptionRequest] {
        self.resource_type_options.as_deref().unwrap_or_default()
    }
}
impl ImageUsageResourceTypeRequest {
    /// Creates a new builder-style object to manufacture [`ImageUsageResourceTypeRequest`](crate::types::ImageUsageResourceTypeRequest).
    pub fn builder() -> crate::types::builders::ImageUsageResourceTypeRequestBuilder {
        crate::types::builders::ImageUsageResourceTypeRequestBuilder::default()
    }
}

/// A builder for [`ImageUsageResourceTypeRequest`](crate::types::ImageUsageResourceTypeRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageUsageResourceTypeRequestBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type_options: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceTypeOptionRequest>>,
}
impl ImageUsageResourceTypeRequestBuilder {
    /// <p>The resource type.</p>
    /// <p>Valid values: <code>ec2:Instance</code> | <code>ec2:LaunchTemplate</code></p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type.</p>
    /// <p>Valid values: <code>ec2:Instance</code> | <code>ec2:LaunchTemplate</code></p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type.</p>
    /// <p>Valid values: <code>ec2:Instance</code> | <code>ec2:LaunchTemplate</code></p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// Appends an item to `resource_type_options`.
    ///
    /// To override the contents of this collection use [`set_resource_type_options`](Self::set_resource_type_options).
    ///
    /// <p>The options that affect the scope of the report. Valid only when <code>ResourceType</code> is <code>ec2:LaunchTemplate</code>.</p>
    pub fn resource_type_options(mut self, input: crate::types::ImageUsageResourceTypeOptionRequest) -> Self {
        let mut v = self.resource_type_options.unwrap_or_default();
        v.push(input);
        self.resource_type_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The options that affect the scope of the report. Valid only when <code>ResourceType</code> is <code>ec2:LaunchTemplate</code>.</p>
    pub fn set_resource_type_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceTypeOptionRequest>>,
    ) -> Self {
        self.resource_type_options = input;
        self
    }
    /// <p>The options that affect the scope of the report. Valid only when <code>ResourceType</code> is <code>ec2:LaunchTemplate</code>.</p>
    pub fn get_resource_type_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceTypeOptionRequest>> {
        &self.resource_type_options
    }
    /// Consumes the builder and constructs a [`ImageUsageResourceTypeRequest`](crate::types::ImageUsageResourceTypeRequest).
    pub fn build(self) -> crate::types::ImageUsageResourceTypeRequest {
        crate::types::ImageUsageResourceTypeRequest {
            resource_type: self.resource_type,
            resource_type_options: self.resource_type_options,
        }
    }
}
