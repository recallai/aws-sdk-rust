// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the media accelerators for the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaDeviceInfo {
    /// <p>The number of media accelerators for the instance type.</p>
    pub count: ::std::option::Option<i32>,
    /// <p>The name of the media accelerator.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The manufacturer of the media accelerator.</p>
    pub manufacturer: ::std::option::Option<::std::string::String>,
    /// <p>Describes the memory available to the media accelerator.</p>
    pub memory_info: ::std::option::Option<crate::types::MediaDeviceMemoryInfo>,
}
impl MediaDeviceInfo {
    /// <p>The number of media accelerators for the instance type.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// <p>The name of the media accelerator.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The manufacturer of the media accelerator.</p>
    pub fn manufacturer(&self) -> ::std::option::Option<&str> {
        self.manufacturer.as_deref()
    }
    /// <p>Describes the memory available to the media accelerator.</p>
    pub fn memory_info(&self) -> ::std::option::Option<&crate::types::MediaDeviceMemoryInfo> {
        self.memory_info.as_ref()
    }
}
impl MediaDeviceInfo {
    /// Creates a new builder-style object to manufacture [`MediaDeviceInfo`](crate::types::MediaDeviceInfo).
    pub fn builder() -> crate::types::builders::MediaDeviceInfoBuilder {
        crate::types::builders::MediaDeviceInfoBuilder::default()
    }
}

/// A builder for [`MediaDeviceInfo`](crate::types::MediaDeviceInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaDeviceInfoBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) manufacturer: ::std::option::Option<::std::string::String>,
    pub(crate) memory_info: ::std::option::Option<crate::types::MediaDeviceMemoryInfo>,
}
impl MediaDeviceInfoBuilder {
    /// <p>The number of media accelerators for the instance type.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of media accelerators for the instance type.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of media accelerators for the instance type.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>The name of the media accelerator.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the media accelerator.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the media accelerator.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The manufacturer of the media accelerator.</p>
    pub fn manufacturer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manufacturer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The manufacturer of the media accelerator.</p>
    pub fn set_manufacturer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manufacturer = input;
        self
    }
    /// <p>The manufacturer of the media accelerator.</p>
    pub fn get_manufacturer(&self) -> &::std::option::Option<::std::string::String> {
        &self.manufacturer
    }
    /// <p>Describes the memory available to the media accelerator.</p>
    pub fn memory_info(mut self, input: crate::types::MediaDeviceMemoryInfo) -> Self {
        self.memory_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the memory available to the media accelerator.</p>
    pub fn set_memory_info(mut self, input: ::std::option::Option<crate::types::MediaDeviceMemoryInfo>) -> Self {
        self.memory_info = input;
        self
    }
    /// <p>Describes the memory available to the media accelerator.</p>
    pub fn get_memory_info(&self) -> &::std::option::Option<crate::types::MediaDeviceMemoryInfo> {
        &self.memory_info
    }
    /// Consumes the builder and constructs a [`MediaDeviceInfo`](crate::types::MediaDeviceInfo).
    pub fn build(self) -> crate::types::MediaDeviceInfo {
        crate::types::MediaDeviceInfo {
            count: self.count,
            name: self.name,
            manufacturer: self.manufacturer,
            memory_info: self.memory_info,
        }
    }
}
