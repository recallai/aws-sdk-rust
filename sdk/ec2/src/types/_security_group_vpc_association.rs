// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A security group association with a VPC that you made with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateSecurityGroupVpc.html">AssociateSecurityGroupVpc</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SecurityGroupVpcAssociation {
    /// <p>The association's security group ID.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>The association's VPC ID.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the VPC.</p>
    pub vpc_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The association's state.</p>
    pub state: ::std::option::Option<crate::types::SecurityGroupVpcAssociationState>,
    /// <p>The association's state reason.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub group_owner_id: ::std::option::Option<::std::string::String>,
}
impl SecurityGroupVpcAssociation {
    /// <p>The association's security group ID.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The association's VPC ID.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the VPC.</p>
    pub fn vpc_owner_id(&self) -> ::std::option::Option<&str> {
        self.vpc_owner_id.as_deref()
    }
    /// <p>The association's state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::SecurityGroupVpcAssociationState> {
        self.state.as_ref()
    }
    /// <p>The association's state reason.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn group_owner_id(&self) -> ::std::option::Option<&str> {
        self.group_owner_id.as_deref()
    }
}
impl SecurityGroupVpcAssociation {
    /// Creates a new builder-style object to manufacture [`SecurityGroupVpcAssociation`](crate::types::SecurityGroupVpcAssociation).
    pub fn builder() -> crate::types::builders::SecurityGroupVpcAssociationBuilder {
        crate::types::builders::SecurityGroupVpcAssociationBuilder::default()
    }
}

/// A builder for [`SecurityGroupVpcAssociation`](crate::types::SecurityGroupVpcAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SecurityGroupVpcAssociationBuilder {
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::SecurityGroupVpcAssociationState>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) group_owner_id: ::std::option::Option<::std::string::String>,
}
impl SecurityGroupVpcAssociationBuilder {
    /// <p>The association's security group ID.</p>
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association's security group ID.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The association's security group ID.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>The association's VPC ID.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association's VPC ID.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The association's VPC ID.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The Amazon Web Services account ID of the owner of the VPC.</p>
    pub fn vpc_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the VPC.</p>
    pub fn set_vpc_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the VPC.</p>
    pub fn get_vpc_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_owner_id
    }
    /// <p>The association's state.</p>
    pub fn state(mut self, input: crate::types::SecurityGroupVpcAssociationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association's state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SecurityGroupVpcAssociationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The association's state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SecurityGroupVpcAssociationState> {
        &self.state
    }
    /// <p>The association's state reason.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association's state reason.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The association's state reason.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn group_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn set_group_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn get_group_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_owner_id
    }
    /// Consumes the builder and constructs a [`SecurityGroupVpcAssociation`](crate::types::SecurityGroupVpcAssociation).
    pub fn build(self) -> crate::types::SecurityGroupVpcAssociation {
        crate::types::SecurityGroupVpcAssociation {
            group_id: self.group_id,
            vpc_id: self.vpc_id,
            vpc_owner_id: self.vpc_owner_id,
            state: self.state,
            state_reason: self.state_reason,
            group_owner_id: self.group_owner_id,
        }
    }
}
