// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Client Route Enforcement is a feature of Client VPN that helps enforce administrator defined routes on devices connected through the VPN. This feature helps improve your security posture by ensuring that network traffic originating from a connected client is not inadvertently sent outside the VPN tunnel.</p>
/// <p>Client Route Enforcement works by monitoring the route table of a connected device for routing policy changes to the VPN connection. If the feature detects any VPN routing policy modifications, it will automatically force an update to the route table, reverting it back to the expected route configurations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClientRouteEnforcementOptions {
    /// <p>Enable or disable Client Route Enforcement. The state can either be <code>true</code> (enabled) or <code>false</code> (disabled). The default is <code>false</code>.</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub enforced: ::std::option::Option<bool>,
}
impl ClientRouteEnforcementOptions {
    /// <p>Enable or disable Client Route Enforcement. The state can either be <code>true</code> (enabled) or <code>false</code> (disabled). The default is <code>false</code>.</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn enforced(&self) -> ::std::option::Option<bool> {
        self.enforced
    }
}
impl ClientRouteEnforcementOptions {
    /// Creates a new builder-style object to manufacture [`ClientRouteEnforcementOptions`](crate::types::ClientRouteEnforcementOptions).
    pub fn builder() -> crate::types::builders::ClientRouteEnforcementOptionsBuilder {
        crate::types::builders::ClientRouteEnforcementOptionsBuilder::default()
    }
}

/// A builder for [`ClientRouteEnforcementOptions`](crate::types::ClientRouteEnforcementOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClientRouteEnforcementOptionsBuilder {
    pub(crate) enforced: ::std::option::Option<bool>,
}
impl ClientRouteEnforcementOptionsBuilder {
    /// <p>Enable or disable Client Route Enforcement. The state can either be <code>true</code> (enabled) or <code>false</code> (disabled). The default is <code>false</code>.</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn enforced(mut self, input: bool) -> Self {
        self.enforced = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enable or disable Client Route Enforcement. The state can either be <code>true</code> (enabled) or <code>false</code> (disabled). The default is <code>false</code>.</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn set_enforced(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enforced = input;
        self
    }
    /// <p>Enable or disable Client Route Enforcement. The state can either be <code>true</code> (enabled) or <code>false</code> (disabled). The default is <code>false</code>.</p>
    /// <p>Valid values: <code>true | false</code></p>
    /// <p>Default value: <code>false</code></p>
    pub fn get_enforced(&self) -> &::std::option::Option<bool> {
        &self.enforced
    }
    /// Consumes the builder and constructs a [`ClientRouteEnforcementOptions`](crate::types::ClientRouteEnforcementOptions).
    pub fn build(self) -> crate::types::ClientRouteEnforcementOptions {
        crate::types::ClientRouteEnforcementOptions { enforced: self.enforced }
    }
}
