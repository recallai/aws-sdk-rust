// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an attachment change.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkInterfaceAttachmentChanges {
    /// <p>The default number of the ENA queues.</p>
    pub default_ena_queue_count: ::std::option::Option<bool>,
    /// <p>The number of ENA queues to be created with the instance.</p>
    pub ena_queue_count: ::std::option::Option<i32>,
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: ::std::option::Option<bool>,
}
impl NetworkInterfaceAttachmentChanges {
    /// <p>The default number of the ENA queues.</p>
    pub fn default_ena_queue_count(&self) -> ::std::option::Option<bool> {
        self.default_ena_queue_count
    }
    /// <p>The number of ENA queues to be created with the instance.</p>
    pub fn ena_queue_count(&self) -> ::std::option::Option<i32> {
        self.ena_queue_count
    }
    /// <p>The ID of the network interface attachment.</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn delete_on_termination(&self) -> ::std::option::Option<bool> {
        self.delete_on_termination
    }
}
impl NetworkInterfaceAttachmentChanges {
    /// Creates a new builder-style object to manufacture [`NetworkInterfaceAttachmentChanges`](crate::types::NetworkInterfaceAttachmentChanges).
    pub fn builder() -> crate::types::builders::NetworkInterfaceAttachmentChangesBuilder {
        crate::types::builders::NetworkInterfaceAttachmentChangesBuilder::default()
    }
}

/// A builder for [`NetworkInterfaceAttachmentChanges`](crate::types::NetworkInterfaceAttachmentChanges).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkInterfaceAttachmentChangesBuilder {
    pub(crate) default_ena_queue_count: ::std::option::Option<bool>,
    pub(crate) ena_queue_count: ::std::option::Option<i32>,
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) delete_on_termination: ::std::option::Option<bool>,
}
impl NetworkInterfaceAttachmentChangesBuilder {
    /// <p>The default number of the ENA queues.</p>
    pub fn default_ena_queue_count(mut self, input: bool) -> Self {
        self.default_ena_queue_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default number of the ENA queues.</p>
    pub fn set_default_ena_queue_count(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_ena_queue_count = input;
        self
    }
    /// <p>The default number of the ENA queues.</p>
    pub fn get_default_ena_queue_count(&self) -> &::std::option::Option<bool> {
        &self.default_ena_queue_count
    }
    /// <p>The number of ENA queues to be created with the instance.</p>
    pub fn ena_queue_count(mut self, input: i32) -> Self {
        self.ena_queue_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of ENA queues to be created with the instance.</p>
    pub fn set_ena_queue_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ena_queue_count = input;
        self
    }
    /// <p>The number of ENA queues to be created with the instance.</p>
    pub fn get_ena_queue_count(&self) -> &::std::option::Option<i32> {
        &self.ena_queue_count
    }
    /// <p>The ID of the network interface attachment.</p>
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the network interface attachment.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The ID of the network interface attachment.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn delete_on_termination(mut self, input: bool) -> Self {
        self.delete_on_termination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn set_delete_on_termination(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_on_termination = input;
        self
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn get_delete_on_termination(&self) -> &::std::option::Option<bool> {
        &self.delete_on_termination
    }
    /// Consumes the builder and constructs a [`NetworkInterfaceAttachmentChanges`](crate::types::NetworkInterfaceAttachmentChanges).
    pub fn build(self) -> crate::types::NetworkInterfaceAttachmentChanges {
        crate::types::NetworkInterfaceAttachmentChanges {
            default_ena_queue_count: self.default_ena_queue_count,
            ena_queue_count: self.ena_queue_count,
            attachment_id: self.attachment_id,
            delete_on_termination: self.delete_on_termination,
        }
    }
}
