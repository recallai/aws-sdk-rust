// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route server endpoint and its properties.</p>
/// <p>A route server endpoint is an Amazon Web Services-managed component inside a subnet that facilitates <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP (Border Gateway Protocol)</a> connections between your route server and your BGP peers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteServerEndpoint {
    /// <p>The ID of the route server associated with this endpoint.</p>
    pub route_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the route server endpoint.</p>
    pub route_server_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC containing the endpoint.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the subnet to place the route server endpoint into.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Elastic network interface for the endpoint.</p>
    pub eni_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the Elastic network interface for the endpoint.</p>
    pub eni_address: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the route server endpoint.</p>
    pub state: ::std::option::Option<crate::types::RouteServerEndpointState>,
    /// <p>The reason for any failure in endpoint creation or operation.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>Any tags assigned to the route server endpoint.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RouteServerEndpoint {
    /// <p>The ID of the route server associated with this endpoint.</p>
    pub fn route_server_id(&self) -> ::std::option::Option<&str> {
        self.route_server_id.as_deref()
    }
    /// <p>The unique identifier of the route server endpoint.</p>
    pub fn route_server_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.route_server_endpoint_id.as_deref()
    }
    /// <p>The ID of the VPC containing the endpoint.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the subnet to place the route server endpoint into.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The ID of the Elastic network interface for the endpoint.</p>
    pub fn eni_id(&self) -> ::std::option::Option<&str> {
        self.eni_id.as_deref()
    }
    /// <p>The IP address of the Elastic network interface for the endpoint.</p>
    pub fn eni_address(&self) -> ::std::option::Option<&str> {
        self.eni_address.as_deref()
    }
    /// <p>The current state of the route server endpoint.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::RouteServerEndpointState> {
        self.state.as_ref()
    }
    /// <p>The reason for any failure in endpoint creation or operation.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>Any tags assigned to the route server endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl RouteServerEndpoint {
    /// Creates a new builder-style object to manufacture [`RouteServerEndpoint`](crate::types::RouteServerEndpoint).
    pub fn builder() -> crate::types::builders::RouteServerEndpointBuilder {
        crate::types::builders::RouteServerEndpointBuilder::default()
    }
}

/// A builder for [`RouteServerEndpoint`](crate::types::RouteServerEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteServerEndpointBuilder {
    pub(crate) route_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) route_server_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) eni_id: ::std::option::Option<::std::string::String>,
    pub(crate) eni_address: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::RouteServerEndpointState>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RouteServerEndpointBuilder {
    /// <p>The ID of the route server associated with this endpoint.</p>
    pub fn route_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the route server associated with this endpoint.</p>
    pub fn set_route_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_server_id = input;
        self
    }
    /// <p>The ID of the route server associated with this endpoint.</p>
    pub fn get_route_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_server_id
    }
    /// <p>The unique identifier of the route server endpoint.</p>
    pub fn route_server_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_server_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the route server endpoint.</p>
    pub fn set_route_server_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_server_endpoint_id = input;
        self
    }
    /// <p>The unique identifier of the route server endpoint.</p>
    pub fn get_route_server_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_server_endpoint_id
    }
    /// <p>The ID of the VPC containing the endpoint.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC containing the endpoint.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC containing the endpoint.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The ID of the subnet to place the route server endpoint into.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet to place the route server endpoint into.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet to place the route server endpoint into.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The ID of the Elastic network interface for the endpoint.</p>
    pub fn eni_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eni_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Elastic network interface for the endpoint.</p>
    pub fn set_eni_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eni_id = input;
        self
    }
    /// <p>The ID of the Elastic network interface for the endpoint.</p>
    pub fn get_eni_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.eni_id
    }
    /// <p>The IP address of the Elastic network interface for the endpoint.</p>
    pub fn eni_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eni_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the Elastic network interface for the endpoint.</p>
    pub fn set_eni_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eni_address = input;
        self
    }
    /// <p>The IP address of the Elastic network interface for the endpoint.</p>
    pub fn get_eni_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.eni_address
    }
    /// <p>The current state of the route server endpoint.</p>
    pub fn state(mut self, input: crate::types::RouteServerEndpointState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the route server endpoint.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::RouteServerEndpointState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the route server endpoint.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::RouteServerEndpointState> {
        &self.state
    }
    /// <p>The reason for any failure in endpoint creation or operation.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for any failure in endpoint creation or operation.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason for any failure in endpoint creation or operation.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the route server endpoint.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the route server endpoint.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the route server endpoint.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RouteServerEndpoint`](crate::types::RouteServerEndpoint).
    pub fn build(self) -> crate::types::RouteServerEndpoint {
        crate::types::RouteServerEndpoint {
            route_server_id: self.route_server_id,
            route_server_endpoint_id: self.route_server_endpoint_id,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            eni_id: self.eni_id,
            eni_address: self.eni_address,
            state: self.state,
            failure_reason: self.failure_reason,
            tags: self.tags,
        }
    }
}
