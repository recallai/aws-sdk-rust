// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the service link virtual interfaces that establish connectivity between Amazon Web Services Outpost and on-premises networks.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceLinkVirtualInterface {
    /// <p>The ID of the service link virtual interface.</p>
    pub service_link_virtual_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub service_link_virtual_interface_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Outpost ID for the service link virtual interface.</p>
    pub outpost_id: ::std::option::Option<::std::string::String>,
    /// <p>The Outpost Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub outpost_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the service link virtual interface..</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address assigned to the local gateway virtual interface on the Outpost side.</p>
    pub local_address: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 peer address for the service link virtual interface.</p>
    pub peer_address: ::std::option::Option<::std::string::String>,
    /// <p>The ASN for the Border Gateway Protocol (BGP) associated with the service link virtual interface.</p>
    pub peer_bgp_asn: ::std::option::Option<i64>,
    /// <p>The virtual local area network for the service link virtual interface.</p>
    pub vlan: ::std::option::Option<i32>,
    /// <p>The link aggregation group (LAG) ID for the service link virtual interface.</p>
    pub outpost_lag_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags associated with the service link virtual interface.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The current state of the service link virtual interface.</p>
    pub configuration_state: ::std::option::Option<crate::types::ServiceLinkVirtualInterfaceConfigurationState>,
}
impl ServiceLinkVirtualInterface {
    /// <p>The ID of the service link virtual interface.</p>
    pub fn service_link_virtual_interface_id(&self) -> ::std::option::Option<&str> {
        self.service_link_virtual_interface_id.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn service_link_virtual_interface_arn(&self) -> ::std::option::Option<&str> {
        self.service_link_virtual_interface_arn.as_deref()
    }
    /// <p>The Outpost ID for the service link virtual interface.</p>
    pub fn outpost_id(&self) -> ::std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>The Outpost Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn outpost_arn(&self) -> ::std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the service link virtual interface..</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The IPv4 address assigned to the local gateway virtual interface on the Outpost side.</p>
    pub fn local_address(&self) -> ::std::option::Option<&str> {
        self.local_address.as_deref()
    }
    /// <p>The IPv4 peer address for the service link virtual interface.</p>
    pub fn peer_address(&self) -> ::std::option::Option<&str> {
        self.peer_address.as_deref()
    }
    /// <p>The ASN for the Border Gateway Protocol (BGP) associated with the service link virtual interface.</p>
    pub fn peer_bgp_asn(&self) -> ::std::option::Option<i64> {
        self.peer_bgp_asn
    }
    /// <p>The virtual local area network for the service link virtual interface.</p>
    pub fn vlan(&self) -> ::std::option::Option<i32> {
        self.vlan
    }
    /// <p>The link aggregation group (LAG) ID for the service link virtual interface.</p>
    pub fn outpost_lag_id(&self) -> ::std::option::Option<&str> {
        self.outpost_lag_id.as_deref()
    }
    /// <p>The tags associated with the service link virtual interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The current state of the service link virtual interface.</p>
    pub fn configuration_state(&self) -> ::std::option::Option<&crate::types::ServiceLinkVirtualInterfaceConfigurationState> {
        self.configuration_state.as_ref()
    }
}
impl ServiceLinkVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ServiceLinkVirtualInterface`](crate::types::ServiceLinkVirtualInterface).
    pub fn builder() -> crate::types::builders::ServiceLinkVirtualInterfaceBuilder {
        crate::types::builders::ServiceLinkVirtualInterfaceBuilder::default()
    }
}

/// A builder for [`ServiceLinkVirtualInterface`](crate::types::ServiceLinkVirtualInterface).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceLinkVirtualInterfaceBuilder {
    pub(crate) service_link_virtual_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_link_virtual_interface_arn: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_id: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_address: ::std::option::Option<::std::string::String>,
    pub(crate) peer_address: ::std::option::Option<::std::string::String>,
    pub(crate) peer_bgp_asn: ::std::option::Option<i64>,
    pub(crate) vlan: ::std::option::Option<i32>,
    pub(crate) outpost_lag_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) configuration_state: ::std::option::Option<crate::types::ServiceLinkVirtualInterfaceConfigurationState>,
}
impl ServiceLinkVirtualInterfaceBuilder {
    /// <p>The ID of the service link virtual interface.</p>
    pub fn service_link_virtual_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_link_virtual_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the service link virtual interface.</p>
    pub fn set_service_link_virtual_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_link_virtual_interface_id = input;
        self
    }
    /// <p>The ID of the service link virtual interface.</p>
    pub fn get_service_link_virtual_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_link_virtual_interface_id
    }
    /// <p>The Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn service_link_virtual_interface_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_link_virtual_interface_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn set_service_link_virtual_interface_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_link_virtual_interface_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn get_service_link_virtual_interface_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_link_virtual_interface_arn
    }
    /// <p>The Outpost ID for the service link virtual interface.</p>
    pub fn outpost_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Outpost ID for the service link virtual interface.</p>
    pub fn set_outpost_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_id = input;
        self
    }
    /// <p>The Outpost ID for the service link virtual interface.</p>
    pub fn get_outpost_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_id
    }
    /// <p>The Outpost Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Outpost Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn set_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// <p>The Outpost Amazon Resource Number (ARN) for the service link virtual interface.</p>
    pub fn get_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_arn
    }
    /// <p>The ID of the Amazon Web Services account that owns the service link virtual interface..</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the service link virtual interface..</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the service link virtual interface..</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The IPv4 address assigned to the local gateway virtual interface on the Outpost side.</p>
    pub fn local_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address assigned to the local gateway virtual interface on the Outpost side.</p>
    pub fn set_local_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_address = input;
        self
    }
    /// <p>The IPv4 address assigned to the local gateway virtual interface on the Outpost side.</p>
    pub fn get_local_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_address
    }
    /// <p>The IPv4 peer address for the service link virtual interface.</p>
    pub fn peer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.peer_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 peer address for the service link virtual interface.</p>
    pub fn set_peer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.peer_address = input;
        self
    }
    /// <p>The IPv4 peer address for the service link virtual interface.</p>
    pub fn get_peer_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.peer_address
    }
    /// <p>The ASN for the Border Gateway Protocol (BGP) associated with the service link virtual interface.</p>
    pub fn peer_bgp_asn(mut self, input: i64) -> Self {
        self.peer_bgp_asn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ASN for the Border Gateway Protocol (BGP) associated with the service link virtual interface.</p>
    pub fn set_peer_bgp_asn(mut self, input: ::std::option::Option<i64>) -> Self {
        self.peer_bgp_asn = input;
        self
    }
    /// <p>The ASN for the Border Gateway Protocol (BGP) associated with the service link virtual interface.</p>
    pub fn get_peer_bgp_asn(&self) -> &::std::option::Option<i64> {
        &self.peer_bgp_asn
    }
    /// <p>The virtual local area network for the service link virtual interface.</p>
    pub fn vlan(mut self, input: i32) -> Self {
        self.vlan = ::std::option::Option::Some(input);
        self
    }
    /// <p>The virtual local area network for the service link virtual interface.</p>
    pub fn set_vlan(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vlan = input;
        self
    }
    /// <p>The virtual local area network for the service link virtual interface.</p>
    pub fn get_vlan(&self) -> &::std::option::Option<i32> {
        &self.vlan
    }
    /// <p>The link aggregation group (LAG) ID for the service link virtual interface.</p>
    pub fn outpost_lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_lag_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The link aggregation group (LAG) ID for the service link virtual interface.</p>
    pub fn set_outpost_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_lag_id = input;
        self
    }
    /// <p>The link aggregation group (LAG) ID for the service link virtual interface.</p>
    pub fn get_outpost_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_lag_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the service link virtual interface.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the service link virtual interface.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the service link virtual interface.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The current state of the service link virtual interface.</p>
    pub fn configuration_state(mut self, input: crate::types::ServiceLinkVirtualInterfaceConfigurationState) -> Self {
        self.configuration_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the service link virtual interface.</p>
    pub fn set_configuration_state(mut self, input: ::std::option::Option<crate::types::ServiceLinkVirtualInterfaceConfigurationState>) -> Self {
        self.configuration_state = input;
        self
    }
    /// <p>The current state of the service link virtual interface.</p>
    pub fn get_configuration_state(&self) -> &::std::option::Option<crate::types::ServiceLinkVirtualInterfaceConfigurationState> {
        &self.configuration_state
    }
    /// Consumes the builder and constructs a [`ServiceLinkVirtualInterface`](crate::types::ServiceLinkVirtualInterface).
    pub fn build(self) -> crate::types::ServiceLinkVirtualInterface {
        crate::types::ServiceLinkVirtualInterface {
            service_link_virtual_interface_id: self.service_link_virtual_interface_id,
            service_link_virtual_interface_arn: self.service_link_virtual_interface_arn,
            outpost_id: self.outpost_id,
            outpost_arn: self.outpost_arn,
            owner_id: self.owner_id,
            local_address: self.local_address,
            peer_address: self.peer_address,
            peer_bgp_asn: self.peer_bgp_asn,
            vlan: self.vlan,
            outpost_lag_id: self.outpost_lag_id,
            tags: self.tags,
            configuration_state: self.configuration_state,
        }
    }
}
