// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Prefixes of the subnet IP.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubnetIpPrefixes {
    /// <p>ID of the subnet.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>Array of SubnetIpPrefixes objects.</p>
    pub ip_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SubnetIpPrefixes {
    /// <p>ID of the subnet.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>Array of SubnetIpPrefixes objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ip_prefixes.is_none()`.
    pub fn ip_prefixes(&self) -> &[::std::string::String] {
        self.ip_prefixes.as_deref().unwrap_or_default()
    }
}
impl SubnetIpPrefixes {
    /// Creates a new builder-style object to manufacture [`SubnetIpPrefixes`](crate::types::SubnetIpPrefixes).
    pub fn builder() -> crate::types::builders::SubnetIpPrefixesBuilder {
        crate::types::builders::SubnetIpPrefixesBuilder::default()
    }
}

/// A builder for [`SubnetIpPrefixes`](crate::types::SubnetIpPrefixes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubnetIpPrefixesBuilder {
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SubnetIpPrefixesBuilder {
    /// <p>ID of the subnet.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>ID of the subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// Appends an item to `ip_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ip_prefixes`](Self::set_ip_prefixes).
    ///
    /// <p>Array of SubnetIpPrefixes objects.</p>
    pub fn ip_prefixes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ip_prefixes.unwrap_or_default();
        v.push(input.into());
        self.ip_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Array of SubnetIpPrefixes objects.</p>
    pub fn set_ip_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ip_prefixes = input;
        self
    }
    /// <p>Array of SubnetIpPrefixes objects.</p>
    pub fn get_ip_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ip_prefixes
    }
    /// Consumes the builder and constructs a [`SubnetIpPrefixes`](crate::types::SubnetIpPrefixes).
    pub fn build(self) -> crate::types::SubnetIpPrefixes {
        crate::types::SubnetIpPrefixes {
            subnet_id: self.subnet_id,
            ip_prefixes: self.ip_prefixes,
        }
    }
}
