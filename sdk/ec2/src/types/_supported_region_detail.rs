// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a supported Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupportedRegionDetail {
    /// <p>The Region code.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The service state. The possible values are <code>Pending</code>, <code>Available</code>, <code>Deleting</code>, <code>Deleted</code>, <code>Failed</code>, and <code>Closed</code>.</p>
    pub service_state: ::std::option::Option<::std::string::String>,
}
impl SupportedRegionDetail {
    /// <p>The Region code.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The service state. The possible values are <code>Pending</code>, <code>Available</code>, <code>Deleting</code>, <code>Deleted</code>, <code>Failed</code>, and <code>Closed</code>.</p>
    pub fn service_state(&self) -> ::std::option::Option<&str> {
        self.service_state.as_deref()
    }
}
impl SupportedRegionDetail {
    /// Creates a new builder-style object to manufacture [`SupportedRegionDetail`](crate::types::SupportedRegionDetail).
    pub fn builder() -> crate::types::builders::SupportedRegionDetailBuilder {
        crate::types::builders::SupportedRegionDetailBuilder::default()
    }
}

/// A builder for [`SupportedRegionDetail`](crate::types::SupportedRegionDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SupportedRegionDetailBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) service_state: ::std::option::Option<::std::string::String>,
}
impl SupportedRegionDetailBuilder {
    /// <p>The Region code.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region code.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region code.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The service state. The possible values are <code>Pending</code>, <code>Available</code>, <code>Deleting</code>, <code>Deleted</code>, <code>Failed</code>, and <code>Closed</code>.</p>
    pub fn service_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service state. The possible values are <code>Pending</code>, <code>Available</code>, <code>Deleting</code>, <code>Deleted</code>, <code>Failed</code>, and <code>Closed</code>.</p>
    pub fn set_service_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_state = input;
        self
    }
    /// <p>The service state. The possible values are <code>Pending</code>, <code>Available</code>, <code>Deleting</code>, <code>Deleted</code>, <code>Failed</code>, and <code>Closed</code>.</p>
    pub fn get_service_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_state
    }
    /// Consumes the builder and constructs a [`SupportedRegionDetail`](crate::types::SupportedRegionDetail).
    pub fn build(self) -> crate::types::SupportedRegionDetail {
        crate::types::SupportedRegionDetail {
            region: self.region,
            service_state: self.service_state,
        }
    }
}
