// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about your commitment for a future-dated Capacity Reservation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityReservationCommitmentInfo {
    /// <p>The instance capacity that you committed to when you requested the future-dated Capacity Reservation.</p>
    pub committed_instance_count: ::std::option::Option<i32>,
    /// <p>The date and time at which the commitment duration expires, in the ISO8601 format in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>). You can't decrease the instance count or cancel the Capacity Reservation before this date and time.</p>
    pub commitment_end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CapacityReservationCommitmentInfo {
    /// <p>The instance capacity that you committed to when you requested the future-dated Capacity Reservation.</p>
    pub fn committed_instance_count(&self) -> ::std::option::Option<i32> {
        self.committed_instance_count
    }
    /// <p>The date and time at which the commitment duration expires, in the ISO8601 format in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>). You can't decrease the instance count or cancel the Capacity Reservation before this date and time.</p>
    pub fn commitment_end_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.commitment_end_date.as_ref()
    }
}
impl CapacityReservationCommitmentInfo {
    /// Creates a new builder-style object to manufacture [`CapacityReservationCommitmentInfo`](crate::types::CapacityReservationCommitmentInfo).
    pub fn builder() -> crate::types::builders::CapacityReservationCommitmentInfoBuilder {
        crate::types::builders::CapacityReservationCommitmentInfoBuilder::default()
    }
}

/// A builder for [`CapacityReservationCommitmentInfo`](crate::types::CapacityReservationCommitmentInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityReservationCommitmentInfoBuilder {
    pub(crate) committed_instance_count: ::std::option::Option<i32>,
    pub(crate) commitment_end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CapacityReservationCommitmentInfoBuilder {
    /// <p>The instance capacity that you committed to when you requested the future-dated Capacity Reservation.</p>
    pub fn committed_instance_count(mut self, input: i32) -> Self {
        self.committed_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance capacity that you committed to when you requested the future-dated Capacity Reservation.</p>
    pub fn set_committed_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.committed_instance_count = input;
        self
    }
    /// <p>The instance capacity that you committed to when you requested the future-dated Capacity Reservation.</p>
    pub fn get_committed_instance_count(&self) -> &::std::option::Option<i32> {
        &self.committed_instance_count
    }
    /// <p>The date and time at which the commitment duration expires, in the ISO8601 format in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>). You can't decrease the instance count or cancel the Capacity Reservation before this date and time.</p>
    pub fn commitment_end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commitment_end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the commitment duration expires, in the ISO8601 format in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>). You can't decrease the instance count or cancel the Capacity Reservation before this date and time.</p>
    pub fn set_commitment_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commitment_end_date = input;
        self
    }
    /// <p>The date and time at which the commitment duration expires, in the ISO8601 format in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>). You can't decrease the instance count or cancel the Capacity Reservation before this date and time.</p>
    pub fn get_commitment_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commitment_end_date
    }
    /// Consumes the builder and constructs a [`CapacityReservationCommitmentInfo`](crate::types::CapacityReservationCommitmentInfo).
    pub fn build(self) -> crate::types::CapacityReservationCommitmentInfo {
        crate::types::CapacityReservationCommitmentInfo {
            committed_instance_count: self.committed_instance_count,
            commitment_end_date: self.commitment_end_date,
        }
    }
}
