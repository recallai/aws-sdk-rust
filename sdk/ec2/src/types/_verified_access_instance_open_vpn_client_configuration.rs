// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a set of routes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifiedAccessInstanceOpenVpnClientConfiguration {
    /// <p>The base64-encoded Open VPN client configuration.</p>
    pub config: ::std::option::Option<::std::string::String>,
    /// <p>The routes.</p>
    pub routes: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute>>,
}
impl VerifiedAccessInstanceOpenVpnClientConfiguration {
    /// <p>The base64-encoded Open VPN client configuration.</p>
    pub fn config(&self) -> ::std::option::Option<&str> {
        self.config.as_deref()
    }
    /// <p>The routes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.routes.is_none()`.
    pub fn routes(&self) -> &[crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute] {
        self.routes.as_deref().unwrap_or_default()
    }
}
impl VerifiedAccessInstanceOpenVpnClientConfiguration {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessInstanceOpenVpnClientConfiguration`](crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration).
    pub fn builder() -> crate::types::builders::VerifiedAccessInstanceOpenVpnClientConfigurationBuilder {
        crate::types::builders::VerifiedAccessInstanceOpenVpnClientConfigurationBuilder::default()
    }
}

/// A builder for [`VerifiedAccessInstanceOpenVpnClientConfiguration`](crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerifiedAccessInstanceOpenVpnClientConfigurationBuilder {
    pub(crate) config: ::std::option::Option<::std::string::String>,
    pub(crate) routes: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute>>,
}
impl VerifiedAccessInstanceOpenVpnClientConfigurationBuilder {
    /// <p>The base64-encoded Open VPN client configuration.</p>
    pub fn config(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base64-encoded Open VPN client configuration.</p>
    pub fn set_config(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config = input;
        self
    }
    /// <p>The base64-encoded Open VPN client configuration.</p>
    pub fn get_config(&self) -> &::std::option::Option<::std::string::String> {
        &self.config
    }
    /// Appends an item to `routes`.
    ///
    /// To override the contents of this collection use [`set_routes`](Self::set_routes).
    ///
    /// <p>The routes.</p>
    pub fn routes(mut self, input: crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute) -> Self {
        let mut v = self.routes.unwrap_or_default();
        v.push(input);
        self.routes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The routes.</p>
    pub fn set_routes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute>>,
    ) -> Self {
        self.routes = input;
        self
    }
    /// <p>The routes.</p>
    pub fn get_routes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfigurationRoute>> {
        &self.routes
    }
    /// Consumes the builder and constructs a [`VerifiedAccessInstanceOpenVpnClientConfiguration`](crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration).
    pub fn build(self) -> crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration {
        crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration {
            config: self.config,
            routes: self.routes,
        }
    }
}
