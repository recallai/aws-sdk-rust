// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes overrides for a launch template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FleetLaunchTemplateOverridesRequest {
    /// <p>The instance type.</p>
    /// <p><code>mac1.metal</code> is not supported as a launch template override.</p><note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p><important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// <p>If you specify a maximum price, it must be more than USD $0.001. Specifying a value below USD $0.001 will result in an <code>InvalidParameterValue</code> error message.</p>
    /// </important>
    pub max_price: ::std::option::Option<::std::string::String>,
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p>
    /// <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p><note>
    /// <p>When specifying weights, the price used in the <code>lowest-price</code> and <code>price-capacity-optimized</code> allocation strategies is per <i>unit</i> hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested <code>TargetCapacity</code>, resulting in only 1 instance being launched, the price used is per <i>instance</i> hour.</p>
    /// </note>
    pub weighted_capacity: ::std::option::Option<f64>,
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub priority: ::std::option::Option<f64>,
    /// <p>The location where the instance launched, if applicable.</p>
    pub placement: ::std::option::Option<crate::types::Placement>,
    /// <p>The block device mappings, which define the EBS volumes and instance store volumes to attach to the instance at launch.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings for volumes on Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub block_device_mappings: ::std::option::Option<::std::vec::Vec<crate::types::FleetBlockDeviceMappingRequest>>,
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p><note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
    /// <p>The ID of the AMI in the format <code>ami-17characters00000</code>.</p>
    /// <p>Alternatively, you can specify a Systems Manager parameter, using one of the following formats. The Systems Manager parameter will resolve to an AMI ID on launch.</p>
    /// <p>To reference a public parameter:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>public-parameter</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter stored in the same account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:label</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter shared from another Amazon Web Services account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:label</i> </code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon EC2 User Guide</i>.</p><note>
    /// <p>This parameter is only available for fleets of type <code>instant</code>. For fleets of type <code>maintain</code> and <code>request</code>, you must specify the AMI ID in the launch template.</p>
    /// </note>
    pub image_id: ::std::option::Option<::std::string::String>,
}
impl FleetLaunchTemplateOverridesRequest {
    /// <p>The instance type.</p>
    /// <p><code>mac1.metal</code> is not supported as a launch template override.</p><note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p><important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// <p>If you specify a maximum price, it must be more than USD $0.001. Specifying a value below USD $0.001 will result in an <code>InvalidParameterValue</code> error message.</p>
    /// </important>
    pub fn max_price(&self) -> ::std::option::Option<&str> {
        self.max_price.as_deref()
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p>
    /// <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p><note>
    /// <p>When specifying weights, the price used in the <code>lowest-price</code> and <code>price-capacity-optimized</code> allocation strategies is per <i>unit</i> hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested <code>TargetCapacity</code>, resulting in only 1 instance being launched, the price used is per <i>instance</i> hour.</p>
    /// </note>
    pub fn weighted_capacity(&self) -> ::std::option::Option<f64> {
        self.weighted_capacity
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn priority(&self) -> ::std::option::Option<f64> {
        self.priority
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn placement(&self) -> ::std::option::Option<&crate::types::Placement> {
        self.placement.as_ref()
    }
    /// <p>The block device mappings, which define the EBS volumes and instance store volumes to attach to the instance at launch.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings for volumes on Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.block_device_mappings.is_none()`.
    pub fn block_device_mappings(&self) -> &[crate::types::FleetBlockDeviceMappingRequest] {
        self.block_device_mappings.as_deref().unwrap_or_default()
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p><note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn instance_requirements(&self) -> ::std::option::Option<&crate::types::InstanceRequirementsRequest> {
        self.instance_requirements.as_ref()
    }
    /// <p>The ID of the AMI in the format <code>ami-17characters00000</code>.</p>
    /// <p>Alternatively, you can specify a Systems Manager parameter, using one of the following formats. The Systems Manager parameter will resolve to an AMI ID on launch.</p>
    /// <p>To reference a public parameter:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>public-parameter</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter stored in the same account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:label</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter shared from another Amazon Web Services account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:label</i> </code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon EC2 User Guide</i>.</p><note>
    /// <p>This parameter is only available for fleets of type <code>instant</code>. For fleets of type <code>maintain</code> and <code>request</code>, you must specify the AMI ID in the launch template.</p>
    /// </note>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl FleetLaunchTemplateOverridesRequest {
    /// Creates a new builder-style object to manufacture [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
    pub fn builder() -> crate::types::builders::FleetLaunchTemplateOverridesRequestBuilder {
        crate::types::builders::FleetLaunchTemplateOverridesRequestBuilder::default()
    }
}

/// A builder for [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FleetLaunchTemplateOverridesRequestBuilder {
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) max_price: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) weighted_capacity: ::std::option::Option<f64>,
    pub(crate) priority: ::std::option::Option<f64>,
    pub(crate) placement: ::std::option::Option<crate::types::Placement>,
    pub(crate) block_device_mappings: ::std::option::Option<::std::vec::Vec<crate::types::FleetBlockDeviceMappingRequest>>,
    pub(crate) instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
}
impl FleetLaunchTemplateOverridesRequestBuilder {
    /// <p>The instance type.</p>
    /// <p><code>mac1.metal</code> is not supported as a launch template override.</p><note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type.</p>
    /// <p><code>mac1.metal</code> is not supported as a launch template override.</p><note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type.</p>
    /// <p><code>mac1.metal</code> is not supported as a launch template override.</p><note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p><important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// <p>If you specify a maximum price, it must be more than USD $0.001. Specifying a value below USD $0.001 will result in an <code>InvalidParameterValue</code> error message.</p>
    /// </important>
    pub fn max_price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p><important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// <p>If you specify a maximum price, it must be more than USD $0.001. Specifying a value below USD $0.001 will result in an <code>InvalidParameterValue</code> error message.</p>
    /// </important>
    pub fn set_max_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_price = input;
        self
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p><important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// <p>If you specify a maximum price, it must be more than USD $0.001. Specifying a value below USD $0.001 will result in an <code>InvalidParameterValue</code> error message.</p>
    /// </important>
    pub fn get_max_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_price
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p>
    /// <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p><note>
    /// <p>When specifying weights, the price used in the <code>lowest-price</code> and <code>price-capacity-optimized</code> allocation strategies is per <i>unit</i> hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested <code>TargetCapacity</code>, resulting in only 1 instance being launched, the price used is per <i>instance</i> hour.</p>
    /// </note>
    pub fn weighted_capacity(mut self, input: f64) -> Self {
        self.weighted_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p>
    /// <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p><note>
    /// <p>When specifying weights, the price used in the <code>lowest-price</code> and <code>price-capacity-optimized</code> allocation strategies is per <i>unit</i> hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested <code>TargetCapacity</code>, resulting in only 1 instance being launched, the price used is per <i>instance</i> hour.</p>
    /// </note>
    pub fn set_weighted_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.weighted_capacity = input;
        self
    }
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p>
    /// <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p><note>
    /// <p>When specifying weights, the price used in the <code>lowest-price</code> and <code>price-capacity-optimized</code> allocation strategies is per <i>unit</i> hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested <code>TargetCapacity</code>, resulting in only 1 instance being launched, the price used is per <i>instance</i> hour.</p>
    /// </note>
    pub fn get_weighted_capacity(&self) -> &::std::option::Option<f64> {
        &self.weighted_capacity
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn priority(mut self, input: f64) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<f64>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn get_priority(&self) -> &::std::option::Option<f64> {
        &self.priority
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn placement(mut self, input: crate::types::Placement) -> Self {
        self.placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn set_placement(mut self, input: ::std::option::Option<crate::types::Placement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn get_placement(&self) -> &::std::option::Option<crate::types::Placement> {
        &self.placement
    }
    /// Appends an item to `block_device_mappings`.
    ///
    /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
    ///
    /// <p>The block device mappings, which define the EBS volumes and instance store volumes to attach to the instance at launch.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings for volumes on Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn block_device_mappings(mut self, input: crate::types::FleetBlockDeviceMappingRequest) -> Self {
        let mut v = self.block_device_mappings.unwrap_or_default();
        v.push(input);
        self.block_device_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The block device mappings, which define the EBS volumes and instance store volumes to attach to the instance at launch.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings for volumes on Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_block_device_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetBlockDeviceMappingRequest>>) -> Self {
        self.block_device_mappings = input;
        self
    }
    /// <p>The block device mappings, which define the EBS volumes and instance store volumes to attach to the instance at launch.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings for volumes on Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_block_device_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetBlockDeviceMappingRequest>> {
        &self.block_device_mappings
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p><note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn instance_requirements(mut self, input: crate::types::InstanceRequirementsRequest) -> Self {
        self.instance_requirements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p><note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn set_instance_requirements(mut self, input: ::std::option::Option<crate::types::InstanceRequirementsRequest>) -> Self {
        self.instance_requirements = input;
        self
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p><note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn get_instance_requirements(&self) -> &::std::option::Option<crate::types::InstanceRequirementsRequest> {
        &self.instance_requirements
    }
    /// <p>The ID of the AMI in the format <code>ami-17characters00000</code>.</p>
    /// <p>Alternatively, you can specify a Systems Manager parameter, using one of the following formats. The Systems Manager parameter will resolve to an AMI ID on launch.</p>
    /// <p>To reference a public parameter:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>public-parameter</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter stored in the same account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:label</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter shared from another Amazon Web Services account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:label</i> </code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon EC2 User Guide</i>.</p><note>
    /// <p>This parameter is only available for fleets of type <code>instant</code>. For fleets of type <code>maintain</code> and <code>request</code>, you must specify the AMI ID in the launch template.</p>
    /// </note>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AMI in the format <code>ami-17characters00000</code>.</p>
    /// <p>Alternatively, you can specify a Systems Manager parameter, using one of the following formats. The Systems Manager parameter will resolve to an AMI ID on launch.</p>
    /// <p>To reference a public parameter:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>public-parameter</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter stored in the same account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:label</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter shared from another Amazon Web Services account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:label</i> </code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon EC2 User Guide</i>.</p><note>
    /// <p>This parameter is only available for fleets of type <code>instant</code>. For fleets of type <code>maintain</code> and <code>request</code>, you must specify the AMI ID in the launch template.</p>
    /// </note>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The ID of the AMI in the format <code>ami-17characters00000</code>.</p>
    /// <p>Alternatively, you can specify a Systems Manager parameter, using one of the following formats. The Systems Manager parameter will resolve to an AMI ID on launch.</p>
    /// <p>To reference a public parameter:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>public-parameter</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter stored in the same account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-name:label</i> </code></p></li>
    /// </ul>
    /// <p>To reference a parameter shared from another Amazon Web Services account:</p>
    /// <ul>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:version-number</i> </code></p></li>
    /// <li>
    /// <p><code>resolve:ssm:<i>parameter-ARN:label</i> </code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon EC2 User Guide</i>.</p><note>
    /// <p>This parameter is only available for fleets of type <code>instant</code>. For fleets of type <code>maintain</code> and <code>request</code>, you must specify the AMI ID in the launch template.</p>
    /// </note>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// Consumes the builder and constructs a [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
    pub fn build(self) -> crate::types::FleetLaunchTemplateOverridesRequest {
        crate::types::FleetLaunchTemplateOverridesRequest {
            instance_type: self.instance_type,
            max_price: self.max_price,
            subnet_id: self.subnet_id,
            availability_zone: self.availability_zone,
            weighted_capacity: self.weighted_capacity,
            priority: self.priority,
            placement: self.placement,
            block_device_mappings: self.block_device_mappings,
            instance_requirements: self.instance_requirements,
            image_id: self.image_id,
        }
    }
}
