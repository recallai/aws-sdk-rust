// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a custom subdomain for a network CIDR endpoint for Verified Access.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifiedAccessInstanceCustomSubDomain {
    /// <p>The subdomain.</p>
    pub sub_domain: ::std::option::Option<::std::string::String>,
    /// <p>The name servers.</p>
    pub nameservers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl VerifiedAccessInstanceCustomSubDomain {
    /// <p>The subdomain.</p>
    pub fn sub_domain(&self) -> ::std::option::Option<&str> {
        self.sub_domain.as_deref()
    }
    /// <p>The name servers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nameservers.is_none()`.
    pub fn nameservers(&self) -> &[::std::string::String] {
        self.nameservers.as_deref().unwrap_or_default()
    }
}
impl VerifiedAccessInstanceCustomSubDomain {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessInstanceCustomSubDomain`](crate::types::VerifiedAccessInstanceCustomSubDomain).
    pub fn builder() -> crate::types::builders::VerifiedAccessInstanceCustomSubDomainBuilder {
        crate::types::builders::VerifiedAccessInstanceCustomSubDomainBuilder::default()
    }
}

/// A builder for [`VerifiedAccessInstanceCustomSubDomain`](crate::types::VerifiedAccessInstanceCustomSubDomain).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerifiedAccessInstanceCustomSubDomainBuilder {
    pub(crate) sub_domain: ::std::option::Option<::std::string::String>,
    pub(crate) nameservers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl VerifiedAccessInstanceCustomSubDomainBuilder {
    /// <p>The subdomain.</p>
    pub fn sub_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subdomain.</p>
    pub fn set_sub_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_domain = input;
        self
    }
    /// <p>The subdomain.</p>
    pub fn get_sub_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_domain
    }
    /// Appends an item to `nameservers`.
    ///
    /// To override the contents of this collection use [`set_nameservers`](Self::set_nameservers).
    ///
    /// <p>The name servers.</p>
    pub fn nameservers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.nameservers.unwrap_or_default();
        v.push(input.into());
        self.nameservers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name servers.</p>
    pub fn set_nameservers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.nameservers = input;
        self
    }
    /// <p>The name servers.</p>
    pub fn get_nameservers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.nameservers
    }
    /// Consumes the builder and constructs a [`VerifiedAccessInstanceCustomSubDomain`](crate::types::VerifiedAccessInstanceCustomSubDomain).
    pub fn build(self) -> crate::types::VerifiedAccessInstanceCustomSubDomain {
        crate::types::VerifiedAccessInstanceCustomSubDomain {
            sub_domain: self.sub_domain,
            nameservers: self.nameservers,
        }
    }
}
