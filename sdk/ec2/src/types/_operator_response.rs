// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes whether the resource is managed by a service provider and, if so, describes the service provider that manages it.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OperatorResponse {
    /// <p>If <code>true</code>, the resource is managed by a service provider.</p>
    pub managed: ::std::option::Option<bool>,
    /// <p>If <code>managed</code> is <code>true</code>, then the principal is returned. The principal is the service provider that manages the resource.</p>
    pub principal: ::std::option::Option<::std::string::String>,
}
impl OperatorResponse {
    /// <p>If <code>true</code>, the resource is managed by a service provider.</p>
    pub fn managed(&self) -> ::std::option::Option<bool> {
        self.managed
    }
    /// <p>If <code>managed</code> is <code>true</code>, then the principal is returned. The principal is the service provider that manages the resource.</p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
}
impl OperatorResponse {
    /// Creates a new builder-style object to manufacture [`OperatorResponse`](crate::types::OperatorResponse).
    pub fn builder() -> crate::types::builders::OperatorResponseBuilder {
        crate::types::builders::OperatorResponseBuilder::default()
    }
}

/// A builder for [`OperatorResponse`](crate::types::OperatorResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OperatorResponseBuilder {
    pub(crate) managed: ::std::option::Option<bool>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
}
impl OperatorResponseBuilder {
    /// <p>If <code>true</code>, the resource is managed by a service provider.</p>
    pub fn managed(mut self, input: bool) -> Self {
        self.managed = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, the resource is managed by a service provider.</p>
    pub fn set_managed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.managed = input;
        self
    }
    /// <p>If <code>true</code>, the resource is managed by a service provider.</p>
    pub fn get_managed(&self) -> &::std::option::Option<bool> {
        &self.managed
    }
    /// <p>If <code>managed</code> is <code>true</code>, then the principal is returned. The principal is the service provider that manages the resource.</p>
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>managed</code> is <code>true</code>, then the principal is returned. The principal is the service provider that manages the resource.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>If <code>managed</code> is <code>true</code>, then the principal is returned. The principal is the service provider that manages the resource.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Consumes the builder and constructs a [`OperatorResponse`](crate::types::OperatorResponse).
    pub fn build(self) -> crate::types::OperatorResponse {
        crate::types::OperatorResponse {
            managed: self.managed,
            principal: self.principal,
        }
    }
}
