// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default instance metadata service (IMDS) settings that were set at the account level in the specified Amazon Web Services  Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceMetadataDefaultsResponse {
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub http_tokens: ::std::option::Option<crate::types::HttpTokensState>,
    /// <p>The maximum number of hops that the metadata token can travel.</p>
    pub http_put_response_hop_limit: ::std::option::Option<i32>,
    /// <p>Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.</p>
    pub http_endpoint: ::std::option::Option<crate::types::InstanceMetadataEndpointState>,
    /// <p>Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub instance_metadata_tags: ::std::option::Option<crate::types::InstanceMetadataTagsState>,
    /// <p>The entity that manages the IMDS default settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The IMDS default settings are managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The IMDS default settings are managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub managed_by: ::std::option::Option<crate::types::ManagedBy>,
    /// <p>The customized exception message that is specified in the declarative policy.</p>
    pub managed_exception_message: ::std::option::Option<::std::string::String>,
}
impl InstanceMetadataDefaultsResponse {
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn http_tokens(&self) -> ::std::option::Option<&crate::types::HttpTokensState> {
        self.http_tokens.as_ref()
    }
    /// <p>The maximum number of hops that the metadata token can travel.</p>
    pub fn http_put_response_hop_limit(&self) -> ::std::option::Option<i32> {
        self.http_put_response_hop_limit
    }
    /// <p>Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.</p>
    pub fn http_endpoint(&self) -> ::std::option::Option<&crate::types::InstanceMetadataEndpointState> {
        self.http_endpoint.as_ref()
    }
    /// <p>Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_metadata_tags(&self) -> ::std::option::Option<&crate::types::InstanceMetadataTagsState> {
        self.instance_metadata_tags.as_ref()
    }
    /// <p>The entity that manages the IMDS default settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The IMDS default settings are managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The IMDS default settings are managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(&self) -> ::std::option::Option<&crate::types::ManagedBy> {
        self.managed_by.as_ref()
    }
    /// <p>The customized exception message that is specified in the declarative policy.</p>
    pub fn managed_exception_message(&self) -> ::std::option::Option<&str> {
        self.managed_exception_message.as_deref()
    }
}
impl InstanceMetadataDefaultsResponse {
    /// Creates a new builder-style object to manufacture [`InstanceMetadataDefaultsResponse`](crate::types::InstanceMetadataDefaultsResponse).
    pub fn builder() -> crate::types::builders::InstanceMetadataDefaultsResponseBuilder {
        crate::types::builders::InstanceMetadataDefaultsResponseBuilder::default()
    }
}

/// A builder for [`InstanceMetadataDefaultsResponse`](crate::types::InstanceMetadataDefaultsResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceMetadataDefaultsResponseBuilder {
    pub(crate) http_tokens: ::std::option::Option<crate::types::HttpTokensState>,
    pub(crate) http_put_response_hop_limit: ::std::option::Option<i32>,
    pub(crate) http_endpoint: ::std::option::Option<crate::types::InstanceMetadataEndpointState>,
    pub(crate) instance_metadata_tags: ::std::option::Option<crate::types::InstanceMetadataTagsState>,
    pub(crate) managed_by: ::std::option::Option<crate::types::ManagedBy>,
    pub(crate) managed_exception_message: ::std::option::Option<::std::string::String>,
}
impl InstanceMetadataDefaultsResponseBuilder {
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn http_tokens(mut self, input: crate::types::HttpTokensState) -> Self {
        self.http_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn set_http_tokens(mut self, input: ::std::option::Option<crate::types::HttpTokensState>) -> Self {
        self.http_tokens = input;
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn get_http_tokens(&self) -> &::std::option::Option<crate::types::HttpTokensState> {
        &self.http_tokens
    }
    /// <p>The maximum number of hops that the metadata token can travel.</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.http_put_response_hop_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of hops that the metadata token can travel.</p>
    pub fn set_http_put_response_hop_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.http_put_response_hop_limit = input;
        self
    }
    /// <p>The maximum number of hops that the metadata token can travel.</p>
    pub fn get_http_put_response_hop_limit(&self) -> &::std::option::Option<i32> {
        &self.http_put_response_hop_limit
    }
    /// <p>Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.</p>
    pub fn http_endpoint(mut self, input: crate::types::InstanceMetadataEndpointState) -> Self {
        self.http_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.</p>
    pub fn set_http_endpoint(mut self, input: ::std::option::Option<crate::types::InstanceMetadataEndpointState>) -> Self {
        self.http_endpoint = input;
        self
    }
    /// <p>Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.</p>
    pub fn get_http_endpoint(&self) -> &::std::option::Option<crate::types::InstanceMetadataEndpointState> {
        &self.http_endpoint
    }
    /// <p>Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_metadata_tags(mut self, input: crate::types::InstanceMetadataTagsState) -> Self {
        self.instance_metadata_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_instance_metadata_tags(mut self, input: ::std::option::Option<crate::types::InstanceMetadataTagsState>) -> Self {
        self.instance_metadata_tags = input;
        self
    }
    /// <p>Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_instance_metadata_tags(&self) -> &::std::option::Option<crate::types::InstanceMetadataTagsState> {
        &self.instance_metadata_tags
    }
    /// <p>The entity that manages the IMDS default settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The IMDS default settings are managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The IMDS default settings are managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(mut self, input: crate::types::ManagedBy) -> Self {
        self.managed_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that manages the IMDS default settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The IMDS default settings are managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The IMDS default settings are managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn set_managed_by(mut self, input: ::std::option::Option<crate::types::ManagedBy>) -> Self {
        self.managed_by = input;
        self
    }
    /// <p>The entity that manages the IMDS default settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The IMDS default settings are managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The IMDS default settings are managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn get_managed_by(&self) -> &::std::option::Option<crate::types::ManagedBy> {
        &self.managed_by
    }
    /// <p>The customized exception message that is specified in the declarative policy.</p>
    pub fn managed_exception_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_exception_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customized exception message that is specified in the declarative policy.</p>
    pub fn set_managed_exception_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_exception_message = input;
        self
    }
    /// <p>The customized exception message that is specified in the declarative policy.</p>
    pub fn get_managed_exception_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_exception_message
    }
    /// Consumes the builder and constructs a [`InstanceMetadataDefaultsResponse`](crate::types::InstanceMetadataDefaultsResponse).
    pub fn build(self) -> crate::types::InstanceMetadataDefaultsResponse {
        crate::types::InstanceMetadataDefaultsResponse {
            http_tokens: self.http_tokens,
            http_put_response_hop_limit: self.http_put_response_hop_limit,
            http_endpoint: self.http_endpoint,
            instance_metadata_tags: self.instance_metadata_tags,
            managed_by: self.managed_by,
            managed_exception_message: self.managed_exception_message,
        }
    }
}
