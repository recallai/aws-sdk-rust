// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the targets for the specified Verified Access endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifiedAccessEndpointTarget {
    /// <p>The ID of the Verified Access endpoint.</p>
    pub verified_access_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the target.</p>
    pub verified_access_endpoint_target_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The DNS name of the target.</p>
    pub verified_access_endpoint_target_dns: ::std::option::Option<::std::string::String>,
}
impl VerifiedAccessEndpointTarget {
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn verified_access_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_endpoint_id.as_deref()
    }
    /// <p>The IP address of the target.</p>
    pub fn verified_access_endpoint_target_ip_address(&self) -> ::std::option::Option<&str> {
        self.verified_access_endpoint_target_ip_address.as_deref()
    }
    /// <p>The DNS name of the target.</p>
    pub fn verified_access_endpoint_target_dns(&self) -> ::std::option::Option<&str> {
        self.verified_access_endpoint_target_dns.as_deref()
    }
}
impl VerifiedAccessEndpointTarget {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessEndpointTarget`](crate::types::VerifiedAccessEndpointTarget).
    pub fn builder() -> crate::types::builders::VerifiedAccessEndpointTargetBuilder {
        crate::types::builders::VerifiedAccessEndpointTargetBuilder::default()
    }
}

/// A builder for [`VerifiedAccessEndpointTarget`](crate::types::VerifiedAccessEndpointTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerifiedAccessEndpointTargetBuilder {
    pub(crate) verified_access_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_endpoint_target_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_endpoint_target_dns: ::std::option::Option<::std::string::String>,
}
impl VerifiedAccessEndpointTargetBuilder {
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn verified_access_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn set_verified_access_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_endpoint_id = input;
        self
    }
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn get_verified_access_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_endpoint_id
    }
    /// <p>The IP address of the target.</p>
    pub fn verified_access_endpoint_target_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_endpoint_target_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the target.</p>
    pub fn set_verified_access_endpoint_target_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_endpoint_target_ip_address = input;
        self
    }
    /// <p>The IP address of the target.</p>
    pub fn get_verified_access_endpoint_target_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_endpoint_target_ip_address
    }
    /// <p>The DNS name of the target.</p>
    pub fn verified_access_endpoint_target_dns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_endpoint_target_dns = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS name of the target.</p>
    pub fn set_verified_access_endpoint_target_dns(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_endpoint_target_dns = input;
        self
    }
    /// <p>The DNS name of the target.</p>
    pub fn get_verified_access_endpoint_target_dns(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_endpoint_target_dns
    }
    /// Consumes the builder and constructs a [`VerifiedAccessEndpointTarget`](crate::types::VerifiedAccessEndpointTarget).
    pub fn build(self) -> crate::types::VerifiedAccessEndpointTarget {
        crate::types::VerifiedAccessEndpointTarget {
            verified_access_endpoint_id: self.verified_access_endpoint_id,
            verified_access_endpoint_target_ip_address: self.verified_access_endpoint_target_ip_address,
            verified_access_endpoint_target_dns: self.verified_access_endpoint_target_dns,
        }
    }
}
