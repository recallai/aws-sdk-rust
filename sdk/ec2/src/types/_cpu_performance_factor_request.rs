// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CpuPerformanceFactorRequest {
    /// <p>Specify an instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes will be compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.</p><note>
    /// <p>Currently, only one instance family can be specified in the list.</p>
    /// </note>
    pub references: ::std::option::Option<::std::vec::Vec<crate::types::PerformanceFactorReferenceRequest>>,
}
impl CpuPerformanceFactorRequest {
    /// <p>Specify an instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes will be compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.</p><note>
    /// <p>Currently, only one instance family can be specified in the list.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.references.is_none()`.
    pub fn references(&self) -> &[crate::types::PerformanceFactorReferenceRequest] {
        self.references.as_deref().unwrap_or_default()
    }
}
impl CpuPerformanceFactorRequest {
    /// Creates a new builder-style object to manufacture [`CpuPerformanceFactorRequest`](crate::types::CpuPerformanceFactorRequest).
    pub fn builder() -> crate::types::builders::CpuPerformanceFactorRequestBuilder {
        crate::types::builders::CpuPerformanceFactorRequestBuilder::default()
    }
}

/// A builder for [`CpuPerformanceFactorRequest`](crate::types::CpuPerformanceFactorRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CpuPerformanceFactorRequestBuilder {
    pub(crate) references: ::std::option::Option<::std::vec::Vec<crate::types::PerformanceFactorReferenceRequest>>,
}
impl CpuPerformanceFactorRequestBuilder {
    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p>Specify an instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes will be compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.</p><note>
    /// <p>Currently, only one instance family can be specified in the list.</p>
    /// </note>
    pub fn references(mut self, input: crate::types::PerformanceFactorReferenceRequest) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input);
        self.references = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify an instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes will be compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.</p><note>
    /// <p>Currently, only one instance family can be specified in the list.</p>
    /// </note>
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PerformanceFactorReferenceRequest>>) -> Self {
        self.references = input;
        self
    }
    /// <p>Specify an instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes will be compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.</p><note>
    /// <p>Currently, only one instance family can be specified in the list.</p>
    /// </note>
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PerformanceFactorReferenceRequest>> {
        &self.references
    }
    /// Consumes the builder and constructs a [`CpuPerformanceFactorRequest`](crate::types::CpuPerformanceFactorRequest).
    pub fn build(self) -> crate::types::CpuPerformanceFactorRequest {
        crate::types::CpuPerformanceFactorRequest { references: self.references }
    }
}
