// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Public hostname type options. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublicIpDnsNameOptions {
    /// <p>The public hostname type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub dns_hostname_type: ::std::option::Option<::std::string::String>,
    /// <p>An IPv4-enabled public hostname for a network interface. Requests from within the VPC resolve to the private primary IPv4 address of the network interface. Requests from the internet resolve to the public IPv4 address of the network interface.</p>
    pub public_ipv4_dns_name: ::std::option::Option<::std::string::String>,
    /// <p>An IPv6-enabled public hostname for a network interface. Requests from within the VPC or from the internet resolve to the IPv6 GUA of the network interface.</p>
    pub public_ipv6_dns_name: ::std::option::Option<::std::string::String>,
    /// <p>A dual-stack public hostname for a network interface. Requests from within the VPC resolve to both the private IPv4 address and the IPv6 Global Unicast Address of the network interface. Requests from the internet resolve to both the public IPv4 and the IPv6 GUA address of the network interface.</p>
    pub public_dual_stack_dns_name: ::std::option::Option<::std::string::String>,
}
impl PublicIpDnsNameOptions {
    /// <p>The public hostname type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn dns_hostname_type(&self) -> ::std::option::Option<&str> {
        self.dns_hostname_type.as_deref()
    }
    /// <p>An IPv4-enabled public hostname for a network interface. Requests from within the VPC resolve to the private primary IPv4 address of the network interface. Requests from the internet resolve to the public IPv4 address of the network interface.</p>
    pub fn public_ipv4_dns_name(&self) -> ::std::option::Option<&str> {
        self.public_ipv4_dns_name.as_deref()
    }
    /// <p>An IPv6-enabled public hostname for a network interface. Requests from within the VPC or from the internet resolve to the IPv6 GUA of the network interface.</p>
    pub fn public_ipv6_dns_name(&self) -> ::std::option::Option<&str> {
        self.public_ipv6_dns_name.as_deref()
    }
    /// <p>A dual-stack public hostname for a network interface. Requests from within the VPC resolve to both the private IPv4 address and the IPv6 Global Unicast Address of the network interface. Requests from the internet resolve to both the public IPv4 and the IPv6 GUA address of the network interface.</p>
    pub fn public_dual_stack_dns_name(&self) -> ::std::option::Option<&str> {
        self.public_dual_stack_dns_name.as_deref()
    }
}
impl PublicIpDnsNameOptions {
    /// Creates a new builder-style object to manufacture [`PublicIpDnsNameOptions`](crate::types::PublicIpDnsNameOptions).
    pub fn builder() -> crate::types::builders::PublicIpDnsNameOptionsBuilder {
        crate::types::builders::PublicIpDnsNameOptionsBuilder::default()
    }
}

/// A builder for [`PublicIpDnsNameOptions`](crate::types::PublicIpDnsNameOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PublicIpDnsNameOptionsBuilder {
    pub(crate) dns_hostname_type: ::std::option::Option<::std::string::String>,
    pub(crate) public_ipv4_dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) public_ipv6_dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) public_dual_stack_dns_name: ::std::option::Option<::std::string::String>,
}
impl PublicIpDnsNameOptionsBuilder {
    /// <p>The public hostname type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn dns_hostname_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_hostname_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public hostname type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_dns_hostname_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_hostname_type = input;
        self
    }
    /// <p>The public hostname type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_dns_hostname_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_hostname_type
    }
    /// <p>An IPv4-enabled public hostname for a network interface. Requests from within the VPC resolve to the private primary IPv4 address of the network interface. Requests from the internet resolve to the public IPv4 address of the network interface.</p>
    pub fn public_ipv4_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ipv4_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IPv4-enabled public hostname for a network interface. Requests from within the VPC resolve to the private primary IPv4 address of the network interface. Requests from the internet resolve to the public IPv4 address of the network interface.</p>
    pub fn set_public_ipv4_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ipv4_dns_name = input;
        self
    }
    /// <p>An IPv4-enabled public hostname for a network interface. Requests from within the VPC resolve to the private primary IPv4 address of the network interface. Requests from the internet resolve to the public IPv4 address of the network interface.</p>
    pub fn get_public_ipv4_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ipv4_dns_name
    }
    /// <p>An IPv6-enabled public hostname for a network interface. Requests from within the VPC or from the internet resolve to the IPv6 GUA of the network interface.</p>
    pub fn public_ipv6_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ipv6_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IPv6-enabled public hostname for a network interface. Requests from within the VPC or from the internet resolve to the IPv6 GUA of the network interface.</p>
    pub fn set_public_ipv6_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ipv6_dns_name = input;
        self
    }
    /// <p>An IPv6-enabled public hostname for a network interface. Requests from within the VPC or from the internet resolve to the IPv6 GUA of the network interface.</p>
    pub fn get_public_ipv6_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ipv6_dns_name
    }
    /// <p>A dual-stack public hostname for a network interface. Requests from within the VPC resolve to both the private IPv4 address and the IPv6 Global Unicast Address of the network interface. Requests from the internet resolve to both the public IPv4 and the IPv6 GUA address of the network interface.</p>
    pub fn public_dual_stack_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_dual_stack_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A dual-stack public hostname for a network interface. Requests from within the VPC resolve to both the private IPv4 address and the IPv6 Global Unicast Address of the network interface. Requests from the internet resolve to both the public IPv4 and the IPv6 GUA address of the network interface.</p>
    pub fn set_public_dual_stack_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_dual_stack_dns_name = input;
        self
    }
    /// <p>A dual-stack public hostname for a network interface. Requests from within the VPC resolve to both the private IPv4 address and the IPv6 Global Unicast Address of the network interface. Requests from the internet resolve to both the public IPv4 and the IPv6 GUA address of the network interface.</p>
    pub fn get_public_dual_stack_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_dual_stack_dns_name
    }
    /// Consumes the builder and constructs a [`PublicIpDnsNameOptions`](crate::types::PublicIpDnsNameOptions).
    pub fn build(self) -> crate::types::PublicIpDnsNameOptions {
        crate::types::PublicIpDnsNameOptions {
            dns_hostname_type: self.dns_hostname_type,
            public_ipv4_dns_name: self.public_ipv4_dns_name,
            public_ipv6_dns_name: self.public_ipv6_dns_name,
            public_dual_stack_dns_name: self.public_dual_stack_dns_name,
        }
    }
}
