// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that affect the scope of the report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageUsageResourceTypeOption {
    /// <p>The name of the option.</p>
    pub option_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of launch template versions to check.</p>
    pub option_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ImageUsageResourceTypeOption {
    /// <p>The name of the option.</p>
    pub fn option_name(&self) -> ::std::option::Option<&str> {
        self.option_name.as_deref()
    }
    /// <p>The number of launch template versions to check.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.option_values.is_none()`.
    pub fn option_values(&self) -> &[::std::string::String] {
        self.option_values.as_deref().unwrap_or_default()
    }
}
impl ImageUsageResourceTypeOption {
    /// Creates a new builder-style object to manufacture [`ImageUsageResourceTypeOption`](crate::types::ImageUsageResourceTypeOption).
    pub fn builder() -> crate::types::builders::ImageUsageResourceTypeOptionBuilder {
        crate::types::builders::ImageUsageResourceTypeOptionBuilder::default()
    }
}

/// A builder for [`ImageUsageResourceTypeOption`](crate::types::ImageUsageResourceTypeOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageUsageResourceTypeOptionBuilder {
    pub(crate) option_name: ::std::option::Option<::std::string::String>,
    pub(crate) option_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ImageUsageResourceTypeOptionBuilder {
    /// <p>The name of the option.</p>
    pub fn option_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.option_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the option.</p>
    pub fn set_option_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.option_name = input;
        self
    }
    /// <p>The name of the option.</p>
    pub fn get_option_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.option_name
    }
    /// Appends an item to `option_values`.
    ///
    /// To override the contents of this collection use [`set_option_values`](Self::set_option_values).
    ///
    /// <p>The number of launch template versions to check.</p>
    pub fn option_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.option_values.unwrap_or_default();
        v.push(input.into());
        self.option_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The number of launch template versions to check.</p>
    pub fn set_option_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.option_values = input;
        self
    }
    /// <p>The number of launch template versions to check.</p>
    pub fn get_option_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.option_values
    }
    /// Consumes the builder and constructs a [`ImageUsageResourceTypeOption`](crate::types::ImageUsageResourceTypeOption).
    pub fn build(self) -> crate::types::ImageUsageResourceTypeOption {
        crate::types::ImageUsageResourceTypeOption {
            option_name: self.option_name,
            option_values: self.option_values,
        }
    }
}
