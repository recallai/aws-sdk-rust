// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the media accelerators for the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaAcceleratorInfo {
    /// <p>Describes the media accelerators for the instance type.</p>
    pub accelerators: ::std::option::Option<::std::vec::Vec<crate::types::MediaDeviceInfo>>,
    /// <p>The total size of the memory for the media accelerators for the instance type, in MiB.</p>
    pub total_media_memory_in_mib: ::std::option::Option<i32>,
}
impl MediaAcceleratorInfo {
    /// <p>Describes the media accelerators for the instance type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accelerators.is_none()`.
    pub fn accelerators(&self) -> &[crate::types::MediaDeviceInfo] {
        self.accelerators.as_deref().unwrap_or_default()
    }
    /// <p>The total size of the memory for the media accelerators for the instance type, in MiB.</p>
    pub fn total_media_memory_in_mib(&self) -> ::std::option::Option<i32> {
        self.total_media_memory_in_mib
    }
}
impl MediaAcceleratorInfo {
    /// Creates a new builder-style object to manufacture [`MediaAcceleratorInfo`](crate::types::MediaAcceleratorInfo).
    pub fn builder() -> crate::types::builders::MediaAcceleratorInfoBuilder {
        crate::types::builders::MediaAcceleratorInfoBuilder::default()
    }
}

/// A builder for [`MediaAcceleratorInfo`](crate::types::MediaAcceleratorInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaAcceleratorInfoBuilder {
    pub(crate) accelerators: ::std::option::Option<::std::vec::Vec<crate::types::MediaDeviceInfo>>,
    pub(crate) total_media_memory_in_mib: ::std::option::Option<i32>,
}
impl MediaAcceleratorInfoBuilder {
    /// Appends an item to `accelerators`.
    ///
    /// To override the contents of this collection use [`set_accelerators`](Self::set_accelerators).
    ///
    /// <p>Describes the media accelerators for the instance type.</p>
    pub fn accelerators(mut self, input: crate::types::MediaDeviceInfo) -> Self {
        let mut v = self.accelerators.unwrap_or_default();
        v.push(input);
        self.accelerators = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the media accelerators for the instance type.</p>
    pub fn set_accelerators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaDeviceInfo>>) -> Self {
        self.accelerators = input;
        self
    }
    /// <p>Describes the media accelerators for the instance type.</p>
    pub fn get_accelerators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaDeviceInfo>> {
        &self.accelerators
    }
    /// <p>The total size of the memory for the media accelerators for the instance type, in MiB.</p>
    pub fn total_media_memory_in_mib(mut self, input: i32) -> Self {
        self.total_media_memory_in_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total size of the memory for the media accelerators for the instance type, in MiB.</p>
    pub fn set_total_media_memory_in_mib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_media_memory_in_mib = input;
        self
    }
    /// <p>The total size of the memory for the media accelerators for the instance type, in MiB.</p>
    pub fn get_total_media_memory_in_mib(&self) -> &::std::option::Option<i32> {
        &self.total_media_memory_in_mib
    }
    /// Consumes the builder and constructs a [`MediaAcceleratorInfo`](crate::types::MediaAcceleratorInfo).
    pub fn build(self) -> crate::types::MediaAcceleratorInfo {
        crate::types::MediaAcceleratorInfo {
            accelerators: self.accelerators,
            total_media_memory_in_mib: self.total_media_memory_in_mib,
        }
    }
}
