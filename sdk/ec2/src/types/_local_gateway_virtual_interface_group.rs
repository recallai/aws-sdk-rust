// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a local gateway virtual interface group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocalGatewayVirtualInterfaceGroup {
    /// <p>The ID of the virtual interface group.</p>
    pub local_gateway_virtual_interface_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The IDs of the virtual interfaces.</p>
    pub local_gateway_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the local gateway.</p>
    pub local_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p>
    pub local_bgp_asn: ::std::option::Option<i32>,
    /// <p>The extended 32-bit ASN for the local BGP configuration.</p>
    pub local_bgp_asn_extended: ::std::option::Option<i64>,
    /// <p>The Amazon Resource Number (ARN) of the local gateway virtual interface group.</p>
    pub local_gateway_virtual_interface_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the virtual interface group.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The current state of the local gateway virtual interface group.</p>
    pub configuration_state: ::std::option::Option<crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState>,
}
impl LocalGatewayVirtualInterfaceGroup {
    /// <p>The ID of the virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_id(&self) -> ::std::option::Option<&str> {
        self.local_gateway_virtual_interface_group_id.as_deref()
    }
    /// <p>The IDs of the virtual interfaces.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_gateway_virtual_interface_ids.is_none()`.
    pub fn local_gateway_virtual_interface_ids(&self) -> &[::std::string::String] {
        self.local_gateway_virtual_interface_ids.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(&self) -> ::std::option::Option<&str> {
        self.local_gateway_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p>
    pub fn local_bgp_asn(&self) -> ::std::option::Option<i32> {
        self.local_bgp_asn
    }
    /// <p>The extended 32-bit ASN for the local BGP configuration.</p>
    pub fn local_bgp_asn_extended(&self) -> ::std::option::Option<i64> {
        self.local_bgp_asn_extended
    }
    /// <p>The Amazon Resource Number (ARN) of the local gateway virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_arn(&self) -> ::std::option::Option<&str> {
        self.local_gateway_virtual_interface_group_arn.as_deref()
    }
    /// <p>The tags assigned to the virtual interface group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The current state of the local gateway virtual interface group.</p>
    pub fn configuration_state(&self) -> ::std::option::Option<&crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState> {
        self.configuration_state.as_ref()
    }
}
impl LocalGatewayVirtualInterfaceGroup {
    /// Creates a new builder-style object to manufacture [`LocalGatewayVirtualInterfaceGroup`](crate::types::LocalGatewayVirtualInterfaceGroup).
    pub fn builder() -> crate::types::builders::LocalGatewayVirtualInterfaceGroupBuilder {
        crate::types::builders::LocalGatewayVirtualInterfaceGroupBuilder::default()
    }
}

/// A builder for [`LocalGatewayVirtualInterfaceGroup`](crate::types::LocalGatewayVirtualInterfaceGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LocalGatewayVirtualInterfaceGroupBuilder {
    pub(crate) local_gateway_virtual_interface_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_gateway_virtual_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) local_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_bgp_asn: ::std::option::Option<i32>,
    pub(crate) local_bgp_asn_extended: ::std::option::Option<i64>,
    pub(crate) local_gateway_virtual_interface_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) configuration_state: ::std::option::Option<crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState>,
}
impl LocalGatewayVirtualInterfaceGroupBuilder {
    /// <p>The ID of the virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual interface group.</p>
    pub fn set_local_gateway_virtual_interface_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_id = input;
        self
    }
    /// <p>The ID of the virtual interface group.</p>
    pub fn get_local_gateway_virtual_interface_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_gateway_virtual_interface_group_id
    }
    /// Appends an item to `local_gateway_virtual_interface_ids`.
    ///
    /// To override the contents of this collection use [`set_local_gateway_virtual_interface_ids`](Self::set_local_gateway_virtual_interface_ids).
    ///
    /// <p>The IDs of the virtual interfaces.</p>
    pub fn local_gateway_virtual_interface_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.local_gateway_virtual_interface_ids.unwrap_or_default();
        v.push(input.into());
        self.local_gateway_virtual_interface_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the virtual interfaces.</p>
    pub fn set_local_gateway_virtual_interface_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.local_gateway_virtual_interface_ids = input;
        self
    }
    /// <p>The IDs of the virtual interfaces.</p>
    pub fn get_local_gateway_virtual_interface_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.local_gateway_virtual_interface_ids
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn set_local_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_gateway_id = input;
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn get_local_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_gateway_id
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p>
    pub fn local_bgp_asn(mut self, input: i32) -> Self {
        self.local_bgp_asn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p>
    pub fn set_local_bgp_asn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.local_bgp_asn = input;
        self
    }
    /// <p>The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP).</p>
    pub fn get_local_bgp_asn(&self) -> &::std::option::Option<i32> {
        &self.local_bgp_asn
    }
    /// <p>The extended 32-bit ASN for the local BGP configuration.</p>
    pub fn local_bgp_asn_extended(mut self, input: i64) -> Self {
        self.local_bgp_asn_extended = ::std::option::Option::Some(input);
        self
    }
    /// <p>The extended 32-bit ASN for the local BGP configuration.</p>
    pub fn set_local_bgp_asn_extended(mut self, input: ::std::option::Option<i64>) -> Self {
        self.local_bgp_asn_extended = input;
        self
    }
    /// <p>The extended 32-bit ASN for the local BGP configuration.</p>
    pub fn get_local_bgp_asn_extended(&self) -> &::std::option::Option<i64> {
        &self.local_bgp_asn_extended
    }
    /// <p>The Amazon Resource Number (ARN) of the local gateway virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the local gateway virtual interface group.</p>
    pub fn set_local_gateway_virtual_interface_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the local gateway virtual interface group.</p>
    pub fn get_local_gateway_virtual_interface_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_gateway_virtual_interface_group_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the virtual interface group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the virtual interface group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the virtual interface group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The current state of the local gateway virtual interface group.</p>
    pub fn configuration_state(mut self, input: crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState) -> Self {
        self.configuration_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the local gateway virtual interface group.</p>
    pub fn set_configuration_state(
        mut self,
        input: ::std::option::Option<crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState>,
    ) -> Self {
        self.configuration_state = input;
        self
    }
    /// <p>The current state of the local gateway virtual interface group.</p>
    pub fn get_configuration_state(&self) -> &::std::option::Option<crate::types::LocalGatewayVirtualInterfaceGroupConfigurationState> {
        &self.configuration_state
    }
    /// Consumes the builder and constructs a [`LocalGatewayVirtualInterfaceGroup`](crate::types::LocalGatewayVirtualInterfaceGroup).
    pub fn build(self) -> crate::types::LocalGatewayVirtualInterfaceGroup {
        crate::types::LocalGatewayVirtualInterfaceGroup {
            local_gateway_virtual_interface_group_id: self.local_gateway_virtual_interface_group_id,
            local_gateway_virtual_interface_ids: self.local_gateway_virtual_interface_ids,
            local_gateway_id: self.local_gateway_id,
            owner_id: self.owner_id,
            local_bgp_asn: self.local_bgp_asn,
            local_bgp_asn_extended: self.local_bgp_asn_extended,
            local_gateway_virtual_interface_group_arn: self.local_gateway_virtual_interface_group_arn,
            tags: self.tags,
            configuration_state: self.configuration_state,
        }
    }
}
