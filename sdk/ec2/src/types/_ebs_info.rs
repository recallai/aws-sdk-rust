// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon EBS features supported by the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsInfo {
    /// <p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub ebs_optimized_support: ::std::option::Option<crate::types::EbsOptimizedSupport>,
    /// <p>Indicates whether Amazon EBS encryption is supported.</p>
    pub encryption_support: ::std::option::Option<crate::types::EbsEncryptionSupport>,
    /// <p>Describes the optimized EBS performance for the instance type.</p>
    pub ebs_optimized_info: ::std::option::Option<crate::types::EbsOptimizedInfo>,
    /// <p>Indicates whether non-volatile memory express (NVMe) is supported.</p>
    pub nvme_support: ::std::option::Option<crate::types::EbsNvmeSupport>,
    /// <p>Indicates the maximum number of Amazon EBS volumes that can be attached to the instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub maximum_ebs_attachments: ::std::option::Option<i32>,
    /// <p>Indicates whether the instance type features a shared or dedicated Amazon EBS volume attachment limit. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub attachment_limit_type: ::std::option::Option<crate::types::AttachmentLimitType>,
}
impl EbsInfo {
    /// <p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn ebs_optimized_support(&self) -> ::std::option::Option<&crate::types::EbsOptimizedSupport> {
        self.ebs_optimized_support.as_ref()
    }
    /// <p>Indicates whether Amazon EBS encryption is supported.</p>
    pub fn encryption_support(&self) -> ::std::option::Option<&crate::types::EbsEncryptionSupport> {
        self.encryption_support.as_ref()
    }
    /// <p>Describes the optimized EBS performance for the instance type.</p>
    pub fn ebs_optimized_info(&self) -> ::std::option::Option<&crate::types::EbsOptimizedInfo> {
        self.ebs_optimized_info.as_ref()
    }
    /// <p>Indicates whether non-volatile memory express (NVMe) is supported.</p>
    pub fn nvme_support(&self) -> ::std::option::Option<&crate::types::EbsNvmeSupport> {
        self.nvme_support.as_ref()
    }
    /// <p>Indicates the maximum number of Amazon EBS volumes that can be attached to the instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn maximum_ebs_attachments(&self) -> ::std::option::Option<i32> {
        self.maximum_ebs_attachments
    }
    /// <p>Indicates whether the instance type features a shared or dedicated Amazon EBS volume attachment limit. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn attachment_limit_type(&self) -> ::std::option::Option<&crate::types::AttachmentLimitType> {
        self.attachment_limit_type.as_ref()
    }
}
impl EbsInfo {
    /// Creates a new builder-style object to manufacture [`EbsInfo`](crate::types::EbsInfo).
    pub fn builder() -> crate::types::builders::EbsInfoBuilder {
        crate::types::builders::EbsInfoBuilder::default()
    }
}

/// A builder for [`EbsInfo`](crate::types::EbsInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EbsInfoBuilder {
    pub(crate) ebs_optimized_support: ::std::option::Option<crate::types::EbsOptimizedSupport>,
    pub(crate) encryption_support: ::std::option::Option<crate::types::EbsEncryptionSupport>,
    pub(crate) ebs_optimized_info: ::std::option::Option<crate::types::EbsOptimizedInfo>,
    pub(crate) nvme_support: ::std::option::Option<crate::types::EbsNvmeSupport>,
    pub(crate) maximum_ebs_attachments: ::std::option::Option<i32>,
    pub(crate) attachment_limit_type: ::std::option::Option<crate::types::AttachmentLimitType>,
}
impl EbsInfoBuilder {
    /// <p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn ebs_optimized_support(mut self, input: crate::types::EbsOptimizedSupport) -> Self {
        self.ebs_optimized_support = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_ebs_optimized_support(mut self, input: ::std::option::Option<crate::types::EbsOptimizedSupport>) -> Self {
        self.ebs_optimized_support = input;
        self
    }
    /// <p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_ebs_optimized_support(&self) -> &::std::option::Option<crate::types::EbsOptimizedSupport> {
        &self.ebs_optimized_support
    }
    /// <p>Indicates whether Amazon EBS encryption is supported.</p>
    pub fn encryption_support(mut self, input: crate::types::EbsEncryptionSupport) -> Self {
        self.encryption_support = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Amazon EBS encryption is supported.</p>
    pub fn set_encryption_support(mut self, input: ::std::option::Option<crate::types::EbsEncryptionSupport>) -> Self {
        self.encryption_support = input;
        self
    }
    /// <p>Indicates whether Amazon EBS encryption is supported.</p>
    pub fn get_encryption_support(&self) -> &::std::option::Option<crate::types::EbsEncryptionSupport> {
        &self.encryption_support
    }
    /// <p>Describes the optimized EBS performance for the instance type.</p>
    pub fn ebs_optimized_info(mut self, input: crate::types::EbsOptimizedInfo) -> Self {
        self.ebs_optimized_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the optimized EBS performance for the instance type.</p>
    pub fn set_ebs_optimized_info(mut self, input: ::std::option::Option<crate::types::EbsOptimizedInfo>) -> Self {
        self.ebs_optimized_info = input;
        self
    }
    /// <p>Describes the optimized EBS performance for the instance type.</p>
    pub fn get_ebs_optimized_info(&self) -> &::std::option::Option<crate::types::EbsOptimizedInfo> {
        &self.ebs_optimized_info
    }
    /// <p>Indicates whether non-volatile memory express (NVMe) is supported.</p>
    pub fn nvme_support(mut self, input: crate::types::EbsNvmeSupport) -> Self {
        self.nvme_support = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether non-volatile memory express (NVMe) is supported.</p>
    pub fn set_nvme_support(mut self, input: ::std::option::Option<crate::types::EbsNvmeSupport>) -> Self {
        self.nvme_support = input;
        self
    }
    /// <p>Indicates whether non-volatile memory express (NVMe) is supported.</p>
    pub fn get_nvme_support(&self) -> &::std::option::Option<crate::types::EbsNvmeSupport> {
        &self.nvme_support
    }
    /// <p>Indicates the maximum number of Amazon EBS volumes that can be attached to the instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn maximum_ebs_attachments(mut self, input: i32) -> Self {
        self.maximum_ebs_attachments = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the maximum number of Amazon EBS volumes that can be attached to the instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_maximum_ebs_attachments(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_ebs_attachments = input;
        self
    }
    /// <p>Indicates the maximum number of Amazon EBS volumes that can be attached to the instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_maximum_ebs_attachments(&self) -> &::std::option::Option<i32> {
        &self.maximum_ebs_attachments
    }
    /// <p>Indicates whether the instance type features a shared or dedicated Amazon EBS volume attachment limit. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn attachment_limit_type(mut self, input: crate::types::AttachmentLimitType) -> Self {
        self.attachment_limit_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the instance type features a shared or dedicated Amazon EBS volume attachment limit. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_attachment_limit_type(mut self, input: ::std::option::Option<crate::types::AttachmentLimitType>) -> Self {
        self.attachment_limit_type = input;
        self
    }
    /// <p>Indicates whether the instance type features a shared or dedicated Amazon EBS volume attachment limit. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Amazon EBS volume limits for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_attachment_limit_type(&self) -> &::std::option::Option<crate::types::AttachmentLimitType> {
        &self.attachment_limit_type
    }
    /// Consumes the builder and constructs a [`EbsInfo`](crate::types::EbsInfo).
    pub fn build(self) -> crate::types::EbsInfo {
        crate::types::EbsInfo {
            ebs_optimized_support: self.ebs_optimized_support,
            encryption_support: self.encryption_support,
            ebs_optimized_info: self.ebs_optimized_info,
            nvme_support: self.nvme_support,
            maximum_ebs_attachments: self.maximum_ebs_attachments,
            attachment_limit_type: self.attachment_limit_type,
        }
    }
}
