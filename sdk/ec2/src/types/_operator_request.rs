// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The service provider that manages the resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OperatorRequest {
    /// <p>The service provider that manages the resource.</p>
    pub principal: ::std::option::Option<::std::string::String>,
}
impl OperatorRequest {
    /// <p>The service provider that manages the resource.</p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
}
impl OperatorRequest {
    /// Creates a new builder-style object to manufacture [`OperatorRequest`](crate::types::OperatorRequest).
    pub fn builder() -> crate::types::builders::OperatorRequestBuilder {
        crate::types::builders::OperatorRequestBuilder::default()
    }
}

/// A builder for [`OperatorRequest`](crate::types::OperatorRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OperatorRequestBuilder {
    pub(crate) principal: ::std::option::Option<::std::string::String>,
}
impl OperatorRequestBuilder {
    /// <p>The service provider that manages the resource.</p>
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service provider that manages the resource.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The service provider that manages the resource.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Consumes the builder and constructs a [`OperatorRequest`](crate::types::OperatorRequest).
    pub fn build(self) -> crate::types::OperatorRequest {
        crate::types::OperatorRequest { principal: self.principal }
    }
}
