// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary report for the attribute for a Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegionalSummary {
    /// <p>The Amazon Web Services Region.</p>
    pub region_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of accounts in the Region with the same configuration value for the attribute that is most frequently observed.</p>
    pub number_of_matched_accounts: ::std::option::Option<i32>,
    /// <p>The number of accounts in the Region with a configuration value different from the most frequently observed value for the attribute.</p>
    pub number_of_unmatched_accounts: ::std::option::Option<i32>,
}
impl RegionalSummary {
    /// <p>The Amazon Web Services Region.</p>
    pub fn region_name(&self) -> ::std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>The number of accounts in the Region with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn number_of_matched_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_matched_accounts
    }
    /// <p>The number of accounts in the Region with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn number_of_unmatched_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_unmatched_accounts
    }
}
impl RegionalSummary {
    /// Creates a new builder-style object to manufacture [`RegionalSummary`](crate::types::RegionalSummary).
    pub fn builder() -> crate::types::builders::RegionalSummaryBuilder {
        crate::types::builders::RegionalSummaryBuilder::default()
    }
}

/// A builder for [`RegionalSummary`](crate::types::RegionalSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegionalSummaryBuilder {
    pub(crate) region_name: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_matched_accounts: ::std::option::Option<i32>,
    pub(crate) number_of_unmatched_accounts: ::std::option::Option<i32>,
}
impl RegionalSummaryBuilder {
    /// <p>The Amazon Web Services Region.</p>
    pub fn region_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn set_region_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn get_region_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_name
    }
    /// <p>The number of accounts in the Region with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn number_of_matched_accounts(mut self, input: i32) -> Self {
        self.number_of_matched_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of accounts in the Region with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn set_number_of_matched_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_matched_accounts = input;
        self
    }
    /// <p>The number of accounts in the Region with the same configuration value for the attribute that is most frequently observed.</p>
    pub fn get_number_of_matched_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_matched_accounts
    }
    /// <p>The number of accounts in the Region with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn number_of_unmatched_accounts(mut self, input: i32) -> Self {
        self.number_of_unmatched_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of accounts in the Region with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn set_number_of_unmatched_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_unmatched_accounts = input;
        self
    }
    /// <p>The number of accounts in the Region with a configuration value different from the most frequently observed value for the attribute.</p>
    pub fn get_number_of_unmatched_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_unmatched_accounts
    }
    /// Consumes the builder and constructs a [`RegionalSummary`](crate::types::RegionalSummary).
    pub fn build(self) -> crate::types::RegionalSummary {
        crate::types::RegionalSummary {
            region_name: self.region_name,
            number_of_matched_accounts: self.number_of_matched_accounts,
            number_of_unmatched_accounts: self.number_of_unmatched_accounts,
        }
    }
}
