// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the AMI.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageMetadata {
    /// <p>The ID of the AMI.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the AMI.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the AMI.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the AMI. If the state is <code>available</code>, the AMI is successfully registered and can be used to launch an instance.</p>
    pub state: ::std::option::Option<crate::types::ImageState>,
    /// <p>The alias of the AMI owner.</p>
    /// <p>Valid values: <code>amazon</code> | <code>aws-backup-vault</code> | <code>aws-marketplace</code></p>
    pub image_owner_alias: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the AMI was created.</p>
    pub creation_date: ::std::option::Option<::std::string::String>,
    /// <p>The deprecation date and time of the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.</p>
    pub deprecation_time: ::std::option::Option<::std::string::String>,
    /// <p>If <code>true</code>, the AMI satisfies the criteria for Allowed AMIs and can be discovered and used in the account. If <code>false</code>, the AMI can't be discovered or used in the account.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub image_allowed: ::std::option::Option<bool>,
    /// <p>Indicates whether the AMI has public launch permissions. A value of <code>true</code> means this AMI has public launch permissions, while <code>false</code> means it has only implicit (AMI owner) or explicit (shared with your account) launch permissions.</p>
    pub is_public: ::std::option::Option<bool>,
}
impl ImageMetadata {
    /// <p>The ID of the AMI.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The name of the AMI.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the AMI.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The current state of the AMI. If the state is <code>available</code>, the AMI is successfully registered and can be used to launch an instance.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ImageState> {
        self.state.as_ref()
    }
    /// <p>The alias of the AMI owner.</p>
    /// <p>Valid values: <code>amazon</code> | <code>aws-backup-vault</code> | <code>aws-marketplace</code></p>
    pub fn image_owner_alias(&self) -> ::std::option::Option<&str> {
        self.image_owner_alias.as_deref()
    }
    /// <p>The date and time the AMI was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The deprecation date and time of the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.</p>
    pub fn deprecation_time(&self) -> ::std::option::Option<&str> {
        self.deprecation_time.as_deref()
    }
    /// <p>If <code>true</code>, the AMI satisfies the criteria for Allowed AMIs and can be discovered and used in the account. If <code>false</code>, the AMI can't be discovered or used in the account.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn image_allowed(&self) -> ::std::option::Option<bool> {
        self.image_allowed
    }
    /// <p>Indicates whether the AMI has public launch permissions. A value of <code>true</code> means this AMI has public launch permissions, while <code>false</code> means it has only implicit (AMI owner) or explicit (shared with your account) launch permissions.</p>
    pub fn is_public(&self) -> ::std::option::Option<bool> {
        self.is_public
    }
}
impl ImageMetadata {
    /// Creates a new builder-style object to manufacture [`ImageMetadata`](crate::types::ImageMetadata).
    pub fn builder() -> crate::types::builders::ImageMetadataBuilder {
        crate::types::builders::ImageMetadataBuilder::default()
    }
}

/// A builder for [`ImageMetadata`](crate::types::ImageMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageMetadataBuilder {
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ImageState>,
    pub(crate) image_owner_alias: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::std::string::String>,
    pub(crate) deprecation_time: ::std::option::Option<::std::string::String>,
    pub(crate) image_allowed: ::std::option::Option<bool>,
    pub(crate) is_public: ::std::option::Option<bool>,
}
impl ImageMetadataBuilder {
    /// <p>The ID of the AMI.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AMI.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The ID of the AMI.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The name of the AMI.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AMI.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AMI.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the Amazon Web Services account that owns the AMI.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the AMI.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the AMI.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The current state of the AMI. If the state is <code>available</code>, the AMI is successfully registered and can be used to launch an instance.</p>
    pub fn state(mut self, input: crate::types::ImageState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the AMI. If the state is <code>available</code>, the AMI is successfully registered and can be used to launch an instance.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ImageState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the AMI. If the state is <code>available</code>, the AMI is successfully registered and can be used to launch an instance.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ImageState> {
        &self.state
    }
    /// <p>The alias of the AMI owner.</p>
    /// <p>Valid values: <code>amazon</code> | <code>aws-backup-vault</code> | <code>aws-marketplace</code></p>
    pub fn image_owner_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_owner_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias of the AMI owner.</p>
    /// <p>Valid values: <code>amazon</code> | <code>aws-backup-vault</code> | <code>aws-marketplace</code></p>
    pub fn set_image_owner_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_owner_alias = input;
        self
    }
    /// <p>The alias of the AMI owner.</p>
    /// <p>Valid values: <code>amazon</code> | <code>aws-backup-vault</code> | <code>aws-marketplace</code></p>
    pub fn get_image_owner_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_owner_alias
    }
    /// <p>The date and time the AMI was created.</p>
    pub fn creation_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time the AMI was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time the AMI was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date
    }
    /// <p>The deprecation date and time of the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.</p>
    pub fn deprecation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deprecation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The deprecation date and time of the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.</p>
    pub fn set_deprecation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deprecation_time = input;
        self
    }
    /// <p>The deprecation date and time of the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.</p>
    pub fn get_deprecation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.deprecation_time
    }
    /// <p>If <code>true</code>, the AMI satisfies the criteria for Allowed AMIs and can be discovered and used in the account. If <code>false</code>, the AMI can't be discovered or used in the account.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn image_allowed(mut self, input: bool) -> Self {
        self.image_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, the AMI satisfies the criteria for Allowed AMIs and can be discovered and used in the account. If <code>false</code>, the AMI can't be discovered or used in the account.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_image_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.image_allowed = input;
        self
    }
    /// <p>If <code>true</code>, the AMI satisfies the criteria for Allowed AMIs and can be discovered and used in the account. If <code>false</code>, the AMI can't be discovered or used in the account.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_image_allowed(&self) -> &::std::option::Option<bool> {
        &self.image_allowed
    }
    /// <p>Indicates whether the AMI has public launch permissions. A value of <code>true</code> means this AMI has public launch permissions, while <code>false</code> means it has only implicit (AMI owner) or explicit (shared with your account) launch permissions.</p>
    pub fn is_public(mut self, input: bool) -> Self {
        self.is_public = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the AMI has public launch permissions. A value of <code>true</code> means this AMI has public launch permissions, while <code>false</code> means it has only implicit (AMI owner) or explicit (shared with your account) launch permissions.</p>
    pub fn set_is_public(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_public = input;
        self
    }
    /// <p>Indicates whether the AMI has public launch permissions. A value of <code>true</code> means this AMI has public launch permissions, while <code>false</code> means it has only implicit (AMI owner) or explicit (shared with your account) launch permissions.</p>
    pub fn get_is_public(&self) -> &::std::option::Option<bool> {
        &self.is_public
    }
    /// Consumes the builder and constructs a [`ImageMetadata`](crate::types::ImageMetadata).
    pub fn build(self) -> crate::types::ImageMetadata {
        crate::types::ImageMetadata {
            image_id: self.image_id,
            name: self.name,
            owner_id: self.owner_id,
            state: self.state,
            image_owner_alias: self.image_owner_alias,
            creation_date: self.creation_date,
            deprecation_time: self.deprecation_time,
            image_allowed: self.image_allowed,
            is_public: self.is_public,
        }
    }
}
