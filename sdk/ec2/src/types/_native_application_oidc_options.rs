// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the OpenID Connect (OIDC) options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NativeApplicationOidcOptions {
    /// <p>The public signing key endpoint.</p>
    pub public_signing_key_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
    /// <p>The authorization endpoint of the IdP.</p>
    pub authorization_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The token endpoint of the IdP.</p>
    pub token_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The user info endpoint of the IdP.</p>
    pub user_info_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 client identifier.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub scope: ::std::option::Option<::std::string::String>,
}
impl NativeApplicationOidcOptions {
    /// <p>The public signing key endpoint.</p>
    pub fn public_signing_key_endpoint(&self) -> ::std::option::Option<&str> {
        self.public_signing_key_endpoint.as_deref()
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn authorization_endpoint(&self) -> ::std::option::Option<&str> {
        self.authorization_endpoint.as_deref()
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn token_endpoint(&self) -> ::std::option::Option<&str> {
        self.token_endpoint.as_deref()
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn user_info_endpoint(&self) -> ::std::option::Option<&str> {
        self.user_info_endpoint.as_deref()
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
}
impl NativeApplicationOidcOptions {
    /// Creates a new builder-style object to manufacture [`NativeApplicationOidcOptions`](crate::types::NativeApplicationOidcOptions).
    pub fn builder() -> crate::types::builders::NativeApplicationOidcOptionsBuilder {
        crate::types::builders::NativeApplicationOidcOptionsBuilder::default()
    }
}

/// A builder for [`NativeApplicationOidcOptions`](crate::types::NativeApplicationOidcOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NativeApplicationOidcOptionsBuilder {
    pub(crate) public_signing_key_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) user_info_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
}
impl NativeApplicationOidcOptionsBuilder {
    /// <p>The public signing key endpoint.</p>
    pub fn public_signing_key_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_signing_key_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public signing key endpoint.</p>
    pub fn set_public_signing_key_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_signing_key_endpoint = input;
        self
    }
    /// <p>The public signing key endpoint.</p>
    pub fn get_public_signing_key_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_signing_key_endpoint
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The OIDC issuer identifier of the IdP.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The authorization endpoint of the IdP.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn token_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn set_token_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_endpoint = input;
        self
    }
    /// <p>The token endpoint of the IdP.</p>
    pub fn get_token_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_endpoint
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn user_info_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_info_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn set_user_info_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_info_endpoint = input;
        self
    }
    /// <p>The user info endpoint of the IdP.</p>
    pub fn get_user_info_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_info_endpoint
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The set of user claims to be requested from the IdP.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// Consumes the builder and constructs a [`NativeApplicationOidcOptions`](crate::types::NativeApplicationOidcOptions).
    pub fn build(self) -> crate::types::NativeApplicationOidcOptions {
        crate::types::NativeApplicationOidcOptions {
            public_signing_key_endpoint: self.public_signing_key_endpoint,
            issuer: self.issuer,
            authorization_endpoint: self.authorization_endpoint,
            token_endpoint: self.token_endpoint,
            user_info_endpoint: self.user_info_endpoint,
            client_id: self.client_id,
            scope: self.scope,
        }
    }
}
