// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a parameter used to set up an EBS volume in a block device mapping.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsInstanceBlockDevice {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub delete_on_termination: ::std::option::Option<bool>,
    /// <p>The attachment state.</p>
    pub status: ::std::option::Option<crate::types::AttachmentStatus>,
    /// <p>The ID of the EBS volume.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Amazon Web Services-managed resource to which the volume is attached.</p>
    pub associated_resource: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the volume.</p>
    /// <p>This parameter is returned only for volumes that are attached to Amazon Web Services-managed resources.</p>
    pub volume_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The service provider that manages the EBS volume.</p>
    pub operator: ::std::option::Option<crate::types::OperatorResponse>,
}
impl EbsInstanceBlockDevice {
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn attach_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.attach_time.as_ref()
    }
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn delete_on_termination(&self) -> ::std::option::Option<bool> {
        self.delete_on_termination
    }
    /// <p>The attachment state.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AttachmentStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the EBS volume.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The ARN of the Amazon Web Services-managed resource to which the volume is attached.</p>
    pub fn associated_resource(&self) -> ::std::option::Option<&str> {
        self.associated_resource.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the volume.</p>
    /// <p>This parameter is returned only for volumes that are attached to Amazon Web Services-managed resources.</p>
    pub fn volume_owner_id(&self) -> ::std::option::Option<&str> {
        self.volume_owner_id.as_deref()
    }
    /// <p>The service provider that manages the EBS volume.</p>
    pub fn operator(&self) -> ::std::option::Option<&crate::types::OperatorResponse> {
        self.operator.as_ref()
    }
}
impl EbsInstanceBlockDevice {
    /// Creates a new builder-style object to manufacture [`EbsInstanceBlockDevice`](crate::types::EbsInstanceBlockDevice).
    pub fn builder() -> crate::types::builders::EbsInstanceBlockDeviceBuilder {
        crate::types::builders::EbsInstanceBlockDeviceBuilder::default()
    }
}

/// A builder for [`EbsInstanceBlockDevice`](crate::types::EbsInstanceBlockDevice).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EbsInstanceBlockDeviceBuilder {
    pub(crate) attach_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_on_termination: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<crate::types::AttachmentStatus>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) associated_resource: ::std::option::Option<::std::string::String>,
    pub(crate) volume_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::OperatorResponse>,
}
impl EbsInstanceBlockDeviceBuilder {
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn attach_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.attach_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn set_attach_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.attach_time = input;
        self
    }
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn get_attach_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.attach_time
    }
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn delete_on_termination(mut self, input: bool) -> Self {
        self.delete_on_termination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn set_delete_on_termination(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_on_termination = input;
        self
    }
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn get_delete_on_termination(&self) -> &::std::option::Option<bool> {
        &self.delete_on_termination
    }
    /// <p>The attachment state.</p>
    pub fn status(mut self, input: crate::types::AttachmentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attachment state.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AttachmentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The attachment state.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AttachmentStatus> {
        &self.status
    }
    /// <p>The ID of the EBS volume.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the EBS volume.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The ID of the EBS volume.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The ARN of the Amazon Web Services-managed resource to which the volume is attached.</p>
    pub fn associated_resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Web Services-managed resource to which the volume is attached.</p>
    pub fn set_associated_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource = input;
        self
    }
    /// <p>The ARN of the Amazon Web Services-managed resource to which the volume is attached.</p>
    pub fn get_associated_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource
    }
    /// <p>The ID of the Amazon Web Services account that owns the volume.</p>
    /// <p>This parameter is returned only for volumes that are attached to Amazon Web Services-managed resources.</p>
    pub fn volume_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the volume.</p>
    /// <p>This parameter is returned only for volumes that are attached to Amazon Web Services-managed resources.</p>
    pub fn set_volume_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the volume.</p>
    /// <p>This parameter is returned only for volumes that are attached to Amazon Web Services-managed resources.</p>
    pub fn get_volume_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_owner_id
    }
    /// <p>The service provider that manages the EBS volume.</p>
    pub fn operator(mut self, input: crate::types::OperatorResponse) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service provider that manages the EBS volume.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::OperatorResponse>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The service provider that manages the EBS volume.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::OperatorResponse> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`EbsInstanceBlockDevice`](crate::types::EbsInstanceBlockDevice).
    pub fn build(self) -> crate::types::EbsInstanceBlockDevice {
        crate::types::EbsInstanceBlockDevice {
            attach_time: self.attach_time,
            delete_on_termination: self.delete_on_termination,
            status: self.status,
            volume_id: self.volume_id,
            associated_resource: self.associated_resource,
            volume_owner_id: self.volume_owner_id,
            operator: self.operator,
        }
    }
}
