// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the neuron accelerators for the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NeuronDeviceInfo {
    /// <p>The number of neuron accelerators for the instance type.</p>
    pub count: ::std::option::Option<i32>,
    /// <p>The name of the neuron accelerator.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Describes the cores available to each neuron accelerator.</p>
    pub core_info: ::std::option::Option<crate::types::NeuronDeviceCoreInfo>,
    /// <p>Describes the memory available to each neuron accelerator.</p>
    pub memory_info: ::std::option::Option<crate::types::NeuronDeviceMemoryInfo>,
}
impl NeuronDeviceInfo {
    /// <p>The number of neuron accelerators for the instance type.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// <p>The name of the neuron accelerator.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Describes the cores available to each neuron accelerator.</p>
    pub fn core_info(&self) -> ::std::option::Option<&crate::types::NeuronDeviceCoreInfo> {
        self.core_info.as_ref()
    }
    /// <p>Describes the memory available to each neuron accelerator.</p>
    pub fn memory_info(&self) -> ::std::option::Option<&crate::types::NeuronDeviceMemoryInfo> {
        self.memory_info.as_ref()
    }
}
impl NeuronDeviceInfo {
    /// Creates a new builder-style object to manufacture [`NeuronDeviceInfo`](crate::types::NeuronDeviceInfo).
    pub fn builder() -> crate::types::builders::NeuronDeviceInfoBuilder {
        crate::types::builders::NeuronDeviceInfoBuilder::default()
    }
}

/// A builder for [`NeuronDeviceInfo`](crate::types::NeuronDeviceInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NeuronDeviceInfoBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) core_info: ::std::option::Option<crate::types::NeuronDeviceCoreInfo>,
    pub(crate) memory_info: ::std::option::Option<crate::types::NeuronDeviceMemoryInfo>,
}
impl NeuronDeviceInfoBuilder {
    /// <p>The number of neuron accelerators for the instance type.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of neuron accelerators for the instance type.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of neuron accelerators for the instance type.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>The name of the neuron accelerator.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the neuron accelerator.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the neuron accelerator.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Describes the cores available to each neuron accelerator.</p>
    pub fn core_info(mut self, input: crate::types::NeuronDeviceCoreInfo) -> Self {
        self.core_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the cores available to each neuron accelerator.</p>
    pub fn set_core_info(mut self, input: ::std::option::Option<crate::types::NeuronDeviceCoreInfo>) -> Self {
        self.core_info = input;
        self
    }
    /// <p>Describes the cores available to each neuron accelerator.</p>
    pub fn get_core_info(&self) -> &::std::option::Option<crate::types::NeuronDeviceCoreInfo> {
        &self.core_info
    }
    /// <p>Describes the memory available to each neuron accelerator.</p>
    pub fn memory_info(mut self, input: crate::types::NeuronDeviceMemoryInfo) -> Self {
        self.memory_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the memory available to each neuron accelerator.</p>
    pub fn set_memory_info(mut self, input: ::std::option::Option<crate::types::NeuronDeviceMemoryInfo>) -> Self {
        self.memory_info = input;
        self
    }
    /// <p>Describes the memory available to each neuron accelerator.</p>
    pub fn get_memory_info(&self) -> &::std::option::Option<crate::types::NeuronDeviceMemoryInfo> {
        &self.memory_info
    }
    /// Consumes the builder and constructs a [`NeuronDeviceInfo`](crate::types::NeuronDeviceInfo).
    pub fn build(self) -> crate::types::NeuronDeviceInfo {
        crate::types::NeuronDeviceInfo {
            count: self.count,
            name: self.name,
            core_info: self.core_info,
            memory_info: self.memory_info,
        }
    }
}
