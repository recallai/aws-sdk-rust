// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the cores available to the neuron accelerator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NeuronDeviceCoreInfo {
    /// <p>The number of cores available to the neuron accelerator.</p>
    pub count: ::std::option::Option<i32>,
    /// <p>The version of the neuron accelerator.</p>
    pub version: ::std::option::Option<i32>,
}
impl NeuronDeviceCoreInfo {
    /// <p>The number of cores available to the neuron accelerator.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// <p>The version of the neuron accelerator.</p>
    pub fn version(&self) -> ::std::option::Option<i32> {
        self.version
    }
}
impl NeuronDeviceCoreInfo {
    /// Creates a new builder-style object to manufacture [`NeuronDeviceCoreInfo`](crate::types::NeuronDeviceCoreInfo).
    pub fn builder() -> crate::types::builders::NeuronDeviceCoreInfoBuilder {
        crate::types::builders::NeuronDeviceCoreInfoBuilder::default()
    }
}

/// A builder for [`NeuronDeviceCoreInfo`](crate::types::NeuronDeviceCoreInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NeuronDeviceCoreInfoBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) version: ::std::option::Option<i32>,
}
impl NeuronDeviceCoreInfoBuilder {
    /// <p>The number of cores available to the neuron accelerator.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of cores available to the neuron accelerator.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of cores available to the neuron accelerator.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>The version of the neuron accelerator.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the neuron accelerator.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the neuron accelerator.</p>
    pub fn get_version(&self) -> &::std::option::Option<i32> {
        &self.version
    }
    /// Consumes the builder and constructs a [`NeuronDeviceCoreInfo`](crate::types::NeuronDeviceCoreInfo).
    pub fn build(self) -> crate::types::NeuronDeviceCoreInfo {
        crate::types::NeuronDeviceCoreInfo {
            count: self.count,
            version: self.version,
        }
    }
}
