// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the CIDR options for a Verified Access endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateVerifiedAccessEndpointCidrOptions {
    /// <p>The protocol.</p>
    pub protocol: ::std::option::Option<crate::types::VerifiedAccessEndpointProtocol>,
    /// <p>The IDs of the subnets.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The CIDR.</p>
    pub cidr: ::std::option::Option<::std::string::String>,
    /// <p>The port ranges.</p>
    pub port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::CreateVerifiedAccessEndpointPortRange>>,
}
impl CreateVerifiedAccessEndpointCidrOptions {
    /// <p>The protocol.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::VerifiedAccessEndpointProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The IDs of the subnets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>The CIDR.</p>
    pub fn cidr(&self) -> ::std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The port ranges.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.port_ranges.is_none()`.
    pub fn port_ranges(&self) -> &[crate::types::CreateVerifiedAccessEndpointPortRange] {
        self.port_ranges.as_deref().unwrap_or_default()
    }
}
impl CreateVerifiedAccessEndpointCidrOptions {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessEndpointCidrOptions`](crate::types::CreateVerifiedAccessEndpointCidrOptions).
    pub fn builder() -> crate::types::builders::CreateVerifiedAccessEndpointCidrOptionsBuilder {
        crate::types::builders::CreateVerifiedAccessEndpointCidrOptionsBuilder::default()
    }
}

/// A builder for [`CreateVerifiedAccessEndpointCidrOptions`](crate::types::CreateVerifiedAccessEndpointCidrOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateVerifiedAccessEndpointCidrOptionsBuilder {
    pub(crate) protocol: ::std::option::Option<crate::types::VerifiedAccessEndpointProtocol>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
    pub(crate) port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::CreateVerifiedAccessEndpointPortRange>>,
}
impl CreateVerifiedAccessEndpointCidrOptionsBuilder {
    /// <p>The protocol.</p>
    pub fn protocol(mut self, input: crate::types::VerifiedAccessEndpointProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::VerifiedAccessEndpointProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::VerifiedAccessEndpointProtocol> {
        &self.protocol
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The IDs of the subnets.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the subnets.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The IDs of the subnets.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>The CIDR.</p>
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The CIDR.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// Appends an item to `port_ranges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>The port ranges.</p>
    pub fn port_ranges(mut self, input: crate::types::CreateVerifiedAccessEndpointPortRange) -> Self {
        let mut v = self.port_ranges.unwrap_or_default();
        v.push(input);
        self.port_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>The port ranges.</p>
    pub fn set_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateVerifiedAccessEndpointPortRange>>) -> Self {
        self.port_ranges = input;
        self
    }
    /// <p>The port ranges.</p>
    pub fn get_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateVerifiedAccessEndpointPortRange>> {
        &self.port_ranges
    }
    /// Consumes the builder and constructs a [`CreateVerifiedAccessEndpointCidrOptions`](crate::types::CreateVerifiedAccessEndpointCidrOptions).
    pub fn build(self) -> crate::types::CreateVerifiedAccessEndpointCidrOptions {
        crate::types::CreateVerifiedAccessEndpointCidrOptions {
            protocol: self.protocol,
            subnet_ids: self.subnet_ids,
            cidr: self.cidr,
            port_ranges: self.port_ranges,
        }
    }
}
