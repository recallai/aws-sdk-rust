// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The state of VPC Block Public Access (BPA).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlockPublicAccessStates {
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub internet_gateway_block_mode: ::std::option::Option<crate::types::BlockPublicAccessMode>,
}
impl BlockPublicAccessStates {
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn internet_gateway_block_mode(&self) -> ::std::option::Option<&crate::types::BlockPublicAccessMode> {
        self.internet_gateway_block_mode.as_ref()
    }
}
impl BlockPublicAccessStates {
    /// Creates a new builder-style object to manufacture [`BlockPublicAccessStates`](crate::types::BlockPublicAccessStates).
    pub fn builder() -> crate::types::builders::BlockPublicAccessStatesBuilder {
        crate::types::builders::BlockPublicAccessStatesBuilder::default()
    }
}

/// A builder for [`BlockPublicAccessStates`](crate::types::BlockPublicAccessStates).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BlockPublicAccessStatesBuilder {
    pub(crate) internet_gateway_block_mode: ::std::option::Option<crate::types::BlockPublicAccessMode>,
}
impl BlockPublicAccessStatesBuilder {
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn internet_gateway_block_mode(mut self, input: crate::types::BlockPublicAccessMode) -> Self {
        self.internet_gateway_block_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn set_internet_gateway_block_mode(mut self, input: ::std::option::Option<crate::types::BlockPublicAccessMode>) -> Self {
        self.internet_gateway_block_mode = input;
        self
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn get_internet_gateway_block_mode(&self) -> &::std::option::Option<crate::types::BlockPublicAccessMode> {
        &self.internet_gateway_block_mode
    }
    /// Consumes the builder and constructs a [`BlockPublicAccessStates`](crate::types::BlockPublicAccessStates).
    pub fn build(self) -> crate::types::BlockPublicAccessStates {
        crate::types::BlockPublicAccessStates {
            internet_gateway_block_mode: self.internet_gateway_block_mode,
        }
    }
}
