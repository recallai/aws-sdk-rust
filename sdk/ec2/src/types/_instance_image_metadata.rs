// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the instance and the AMI used to launch the instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceImageMetadata {
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The instance type.</p>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>The time the instance was launched.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Availability Zone or Local Zone of the instance.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Availability Zone or Local Zone of the instance.</p>
    pub zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the instance.</p>
    pub state: ::std::option::Option<crate::types::InstanceState>,
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>Any tags assigned to the instance.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Information about the AMI used to launch the instance.</p>
    pub image_metadata: ::std::option::Option<crate::types::ImageMetadata>,
    /// <p>The entity that manages the instance.</p>
    pub operator: ::std::option::Option<crate::types::OperatorResponse>,
}
impl InstanceImageMetadata {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The instance type.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The time the instance was launched.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>The Availability Zone or Local Zone of the instance.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The ID of the Availability Zone or Local Zone of the instance.</p>
    pub fn zone_id(&self) -> ::std::option::Option<&str> {
        self.zone_id.as_deref()
    }
    /// <p>The current state of the instance.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::InstanceState> {
        self.state.as_ref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>Any tags assigned to the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Information about the AMI used to launch the instance.</p>
    pub fn image_metadata(&self) -> ::std::option::Option<&crate::types::ImageMetadata> {
        self.image_metadata.as_ref()
    }
    /// <p>The entity that manages the instance.</p>
    pub fn operator(&self) -> ::std::option::Option<&crate::types::OperatorResponse> {
        self.operator.as_ref()
    }
}
impl InstanceImageMetadata {
    /// Creates a new builder-style object to manufacture [`InstanceImageMetadata`](crate::types::InstanceImageMetadata).
    pub fn builder() -> crate::types::builders::InstanceImageMetadataBuilder {
        crate::types::builders::InstanceImageMetadataBuilder::default()
    }
}

/// A builder for [`InstanceImageMetadata`](crate::types::InstanceImageMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceImageMetadataBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::InstanceState>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) image_metadata: ::std::option::Option<crate::types::ImageMetadata>,
    pub(crate) operator: ::std::option::Option<crate::types::OperatorResponse>,
}
impl InstanceImageMetadataBuilder {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The instance type.</p>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The time the instance was launched.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the instance was launched.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>The time the instance was launched.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>The Availability Zone or Local Zone of the instance.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone or Local Zone of the instance.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone or Local Zone of the instance.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The ID of the Availability Zone or Local Zone of the instance.</p>
    pub fn zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Availability Zone or Local Zone of the instance.</p>
    pub fn set_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.zone_id = input;
        self
    }
    /// <p>The ID of the Availability Zone or Local Zone of the instance.</p>
    pub fn get_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.zone_id
    }
    /// <p>The current state of the instance.</p>
    pub fn state(mut self, input: crate::types::InstanceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the instance.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::InstanceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the instance.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::InstanceState> {
        &self.state
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the instance.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the instance.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the instance.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Information about the AMI used to launch the instance.</p>
    pub fn image_metadata(mut self, input: crate::types::ImageMetadata) -> Self {
        self.image_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the AMI used to launch the instance.</p>
    pub fn set_image_metadata(mut self, input: ::std::option::Option<crate::types::ImageMetadata>) -> Self {
        self.image_metadata = input;
        self
    }
    /// <p>Information about the AMI used to launch the instance.</p>
    pub fn get_image_metadata(&self) -> &::std::option::Option<crate::types::ImageMetadata> {
        &self.image_metadata
    }
    /// <p>The entity that manages the instance.</p>
    pub fn operator(mut self, input: crate::types::OperatorResponse) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that manages the instance.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::OperatorResponse>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The entity that manages the instance.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::OperatorResponse> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`InstanceImageMetadata`](crate::types::InstanceImageMetadata).
    pub fn build(self) -> crate::types::InstanceImageMetadata {
        crate::types::InstanceImageMetadata {
            instance_id: self.instance_id,
            instance_type: self.instance_type,
            launch_time: self.launch_time,
            availability_zone: self.availability_zone,
            zone_id: self.zone_id,
            state: self.state,
            owner_id: self.owner_id,
            tags: self.tags,
            image_metadata: self.image_metadata,
            operator: self.operator,
        }
    }
}
