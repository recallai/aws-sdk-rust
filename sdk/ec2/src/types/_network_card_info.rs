// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the network card support of the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkCardInfo {
    /// <p>The index of the network card.</p>
    pub network_card_index: ::std::option::Option<i32>,
    /// <p>The network performance of the network card.</p>
    pub network_performance: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of network interfaces for the network card.</p>
    pub maximum_network_interfaces: ::std::option::Option<i32>,
    /// <p>The baseline network performance of the network card, in Gbps.</p>
    pub baseline_bandwidth_in_gbps: ::std::option::Option<f64>,
    /// <p>The peak (burst) network performance of the network card, in Gbps.</p>
    pub peak_bandwidth_in_gbps: ::std::option::Option<f64>,
    /// <p>The default number of the ENA queues for each interface.</p>
    pub default_ena_queue_count_per_interface: ::std::option::Option<i32>,
    /// <p>The maximum number of the ENA queues.</p>
    pub maximum_ena_queue_count: ::std::option::Option<i32>,
    /// <p>The maximum number of the ENA queues for each interface.</p>
    pub maximum_ena_queue_count_per_interface: ::std::option::Option<i32>,
}
impl NetworkCardInfo {
    /// <p>The index of the network card.</p>
    pub fn network_card_index(&self) -> ::std::option::Option<i32> {
        self.network_card_index
    }
    /// <p>The network performance of the network card.</p>
    pub fn network_performance(&self) -> ::std::option::Option<&str> {
        self.network_performance.as_deref()
    }
    /// <p>The maximum number of network interfaces for the network card.</p>
    pub fn maximum_network_interfaces(&self) -> ::std::option::Option<i32> {
        self.maximum_network_interfaces
    }
    /// <p>The baseline network performance of the network card, in Gbps.</p>
    pub fn baseline_bandwidth_in_gbps(&self) -> ::std::option::Option<f64> {
        self.baseline_bandwidth_in_gbps
    }
    /// <p>The peak (burst) network performance of the network card, in Gbps.</p>
    pub fn peak_bandwidth_in_gbps(&self) -> ::std::option::Option<f64> {
        self.peak_bandwidth_in_gbps
    }
    /// <p>The default number of the ENA queues for each interface.</p>
    pub fn default_ena_queue_count_per_interface(&self) -> ::std::option::Option<i32> {
        self.default_ena_queue_count_per_interface
    }
    /// <p>The maximum number of the ENA queues.</p>
    pub fn maximum_ena_queue_count(&self) -> ::std::option::Option<i32> {
        self.maximum_ena_queue_count
    }
    /// <p>The maximum number of the ENA queues for each interface.</p>
    pub fn maximum_ena_queue_count_per_interface(&self) -> ::std::option::Option<i32> {
        self.maximum_ena_queue_count_per_interface
    }
}
impl NetworkCardInfo {
    /// Creates a new builder-style object to manufacture [`NetworkCardInfo`](crate::types::NetworkCardInfo).
    pub fn builder() -> crate::types::builders::NetworkCardInfoBuilder {
        crate::types::builders::NetworkCardInfoBuilder::default()
    }
}

/// A builder for [`NetworkCardInfo`](crate::types::NetworkCardInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkCardInfoBuilder {
    pub(crate) network_card_index: ::std::option::Option<i32>,
    pub(crate) network_performance: ::std::option::Option<::std::string::String>,
    pub(crate) maximum_network_interfaces: ::std::option::Option<i32>,
    pub(crate) baseline_bandwidth_in_gbps: ::std::option::Option<f64>,
    pub(crate) peak_bandwidth_in_gbps: ::std::option::Option<f64>,
    pub(crate) default_ena_queue_count_per_interface: ::std::option::Option<i32>,
    pub(crate) maximum_ena_queue_count: ::std::option::Option<i32>,
    pub(crate) maximum_ena_queue_count_per_interface: ::std::option::Option<i32>,
}
impl NetworkCardInfoBuilder {
    /// <p>The index of the network card.</p>
    pub fn network_card_index(mut self, input: i32) -> Self {
        self.network_card_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index of the network card.</p>
    pub fn set_network_card_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.network_card_index = input;
        self
    }
    /// <p>The index of the network card.</p>
    pub fn get_network_card_index(&self) -> &::std::option::Option<i32> {
        &self.network_card_index
    }
    /// <p>The network performance of the network card.</p>
    pub fn network_performance(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_performance = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network performance of the network card.</p>
    pub fn set_network_performance(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_performance = input;
        self
    }
    /// <p>The network performance of the network card.</p>
    pub fn get_network_performance(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_performance
    }
    /// <p>The maximum number of network interfaces for the network card.</p>
    pub fn maximum_network_interfaces(mut self, input: i32) -> Self {
        self.maximum_network_interfaces = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of network interfaces for the network card.</p>
    pub fn set_maximum_network_interfaces(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_network_interfaces = input;
        self
    }
    /// <p>The maximum number of network interfaces for the network card.</p>
    pub fn get_maximum_network_interfaces(&self) -> &::std::option::Option<i32> {
        &self.maximum_network_interfaces
    }
    /// <p>The baseline network performance of the network card, in Gbps.</p>
    pub fn baseline_bandwidth_in_gbps(mut self, input: f64) -> Self {
        self.baseline_bandwidth_in_gbps = ::std::option::Option::Some(input);
        self
    }
    /// <p>The baseline network performance of the network card, in Gbps.</p>
    pub fn set_baseline_bandwidth_in_gbps(mut self, input: ::std::option::Option<f64>) -> Self {
        self.baseline_bandwidth_in_gbps = input;
        self
    }
    /// <p>The baseline network performance of the network card, in Gbps.</p>
    pub fn get_baseline_bandwidth_in_gbps(&self) -> &::std::option::Option<f64> {
        &self.baseline_bandwidth_in_gbps
    }
    /// <p>The peak (burst) network performance of the network card, in Gbps.</p>
    pub fn peak_bandwidth_in_gbps(mut self, input: f64) -> Self {
        self.peak_bandwidth_in_gbps = ::std::option::Option::Some(input);
        self
    }
    /// <p>The peak (burst) network performance of the network card, in Gbps.</p>
    pub fn set_peak_bandwidth_in_gbps(mut self, input: ::std::option::Option<f64>) -> Self {
        self.peak_bandwidth_in_gbps = input;
        self
    }
    /// <p>The peak (burst) network performance of the network card, in Gbps.</p>
    pub fn get_peak_bandwidth_in_gbps(&self) -> &::std::option::Option<f64> {
        &self.peak_bandwidth_in_gbps
    }
    /// <p>The default number of the ENA queues for each interface.</p>
    pub fn default_ena_queue_count_per_interface(mut self, input: i32) -> Self {
        self.default_ena_queue_count_per_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default number of the ENA queues for each interface.</p>
    pub fn set_default_ena_queue_count_per_interface(mut self, input: ::std::option::Option<i32>) -> Self {
        self.default_ena_queue_count_per_interface = input;
        self
    }
    /// <p>The default number of the ENA queues for each interface.</p>
    pub fn get_default_ena_queue_count_per_interface(&self) -> &::std::option::Option<i32> {
        &self.default_ena_queue_count_per_interface
    }
    /// <p>The maximum number of the ENA queues.</p>
    pub fn maximum_ena_queue_count(mut self, input: i32) -> Self {
        self.maximum_ena_queue_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of the ENA queues.</p>
    pub fn set_maximum_ena_queue_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_ena_queue_count = input;
        self
    }
    /// <p>The maximum number of the ENA queues.</p>
    pub fn get_maximum_ena_queue_count(&self) -> &::std::option::Option<i32> {
        &self.maximum_ena_queue_count
    }
    /// <p>The maximum number of the ENA queues for each interface.</p>
    pub fn maximum_ena_queue_count_per_interface(mut self, input: i32) -> Self {
        self.maximum_ena_queue_count_per_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of the ENA queues for each interface.</p>
    pub fn set_maximum_ena_queue_count_per_interface(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_ena_queue_count_per_interface = input;
        self
    }
    /// <p>The maximum number of the ENA queues for each interface.</p>
    pub fn get_maximum_ena_queue_count_per_interface(&self) -> &::std::option::Option<i32> {
        &self.maximum_ena_queue_count_per_interface
    }
    /// Consumes the builder and constructs a [`NetworkCardInfo`](crate::types::NetworkCardInfo).
    pub fn build(self) -> crate::types::NetworkCardInfo {
        crate::types::NetworkCardInfo {
            network_card_index: self.network_card_index,
            network_performance: self.network_performance,
            maximum_network_interfaces: self.maximum_network_interfaces,
            baseline_bandwidth_in_gbps: self.baseline_bandwidth_in_gbps,
            peak_bandwidth_in_gbps: self.peak_bandwidth_in_gbps,
            default_ena_queue_count_per_interface: self.default_ena_queue_count_per_interface,
            maximum_ena_queue_count: self.maximum_ena_queue_count,
            maximum_ena_queue_count_per_interface: self.maximum_ena_queue_count_per_interface,
        }
    }
}
