// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcBlockPublicAccessOptions {
    /// <p>An Amazon Web Services account ID.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Web Services Region.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
    /// <p>The current state of VPC BPA.</p>
    pub state: ::std::option::Option<crate::types::VpcBlockPublicAccessState>,
    /// <p>The current mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub internet_gateway_block_mode: ::std::option::Option<crate::types::InternetGatewayBlockMode>,
    /// <p>The reason for the current state.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The last time the VPC BPA mode was updated.</p>
    pub last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The entity that manages the state of VPC BPA. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The state is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The state is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub managed_by: ::std::option::Option<crate::types::ManagedBy>,
    /// <p>Determines if exclusions are allowed. If you have <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html#security-vpc-bpa-exclusions-orgs">enabled VPC BPA at the Organization level</a>, exclusions may be <code>not-allowed</code>. Otherwise, they are <code>allowed</code>.</p>
    pub exclusions_allowed: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionsAllowed>,
}
impl VpcBlockPublicAccessOptions {
    /// <p>An Amazon Web Services account ID.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>An Amazon Web Services Region.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The current state of VPC BPA.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::VpcBlockPublicAccessState> {
        self.state.as_ref()
    }
    /// <p>The current mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn internet_gateway_block_mode(&self) -> ::std::option::Option<&crate::types::InternetGatewayBlockMode> {
        self.internet_gateway_block_mode.as_ref()
    }
    /// <p>The reason for the current state.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The last time the VPC BPA mode was updated.</p>
    pub fn last_update_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_timestamp.as_ref()
    }
    /// <p>The entity that manages the state of VPC BPA. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The state is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The state is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(&self) -> ::std::option::Option<&crate::types::ManagedBy> {
        self.managed_by.as_ref()
    }
    /// <p>Determines if exclusions are allowed. If you have <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html#security-vpc-bpa-exclusions-orgs">enabled VPC BPA at the Organization level</a>, exclusions may be <code>not-allowed</code>. Otherwise, they are <code>allowed</code>.</p>
    pub fn exclusions_allowed(&self) -> ::std::option::Option<&crate::types::VpcBlockPublicAccessExclusionsAllowed> {
        self.exclusions_allowed.as_ref()
    }
}
impl VpcBlockPublicAccessOptions {
    /// Creates a new builder-style object to manufacture [`VpcBlockPublicAccessOptions`](crate::types::VpcBlockPublicAccessOptions).
    pub fn builder() -> crate::types::builders::VpcBlockPublicAccessOptionsBuilder {
        crate::types::builders::VpcBlockPublicAccessOptionsBuilder::default()
    }
}

/// A builder for [`VpcBlockPublicAccessOptions`](crate::types::VpcBlockPublicAccessOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcBlockPublicAccessOptionsBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::VpcBlockPublicAccessState>,
    pub(crate) internet_gateway_block_mode: ::std::option::Option<crate::types::InternetGatewayBlockMode>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) managed_by: ::std::option::Option<crate::types::ManagedBy>,
    pub(crate) exclusions_allowed: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionsAllowed>,
}
impl VpcBlockPublicAccessOptionsBuilder {
    /// <p>An Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>An Amazon Web Services account ID.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>An Amazon Web Services Region.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services Region.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>An Amazon Web Services Region.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>The current state of VPC BPA.</p>
    pub fn state(mut self, input: crate::types::VpcBlockPublicAccessState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of VPC BPA.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VpcBlockPublicAccessState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of VPC BPA.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VpcBlockPublicAccessState> {
        &self.state
    }
    /// <p>The current mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn internet_gateway_block_mode(mut self, input: crate::types::InternetGatewayBlockMode) -> Self {
        self.internet_gateway_block_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn set_internet_gateway_block_mode(mut self, input: ::std::option::Option<crate::types::InternetGatewayBlockMode>) -> Self {
        self.internet_gateway_block_mode = input;
        self
    }
    /// <p>The current mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn get_internet_gateway_block_mode(&self) -> &::std::option::Option<crate::types::InternetGatewayBlockMode> {
        &self.internet_gateway_block_mode
    }
    /// <p>The reason for the current state.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current state.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the current state.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The last time the VPC BPA mode was updated.</p>
    pub fn last_update_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the VPC BPA mode was updated.</p>
    pub fn set_last_update_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_timestamp = input;
        self
    }
    /// <p>The last time the VPC BPA mode was updated.</p>
    pub fn get_last_update_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_timestamp
    }
    /// <p>The entity that manages the state of VPC BPA. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The state is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The state is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(mut self, input: crate::types::ManagedBy) -> Self {
        self.managed_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that manages the state of VPC BPA. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The state is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The state is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn set_managed_by(mut self, input: ::std::option::Option<crate::types::ManagedBy>) -> Self {
        self.managed_by = input;
        self
    }
    /// <p>The entity that manages the state of VPC BPA. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The state is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The state is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn get_managed_by(&self) -> &::std::option::Option<crate::types::ManagedBy> {
        &self.managed_by
    }
    /// <p>Determines if exclusions are allowed. If you have <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html#security-vpc-bpa-exclusions-orgs">enabled VPC BPA at the Organization level</a>, exclusions may be <code>not-allowed</code>. Otherwise, they are <code>allowed</code>.</p>
    pub fn exclusions_allowed(mut self, input: crate::types::VpcBlockPublicAccessExclusionsAllowed) -> Self {
        self.exclusions_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if exclusions are allowed. If you have <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html#security-vpc-bpa-exclusions-orgs">enabled VPC BPA at the Organization level</a>, exclusions may be <code>not-allowed</code>. Otherwise, they are <code>allowed</code>.</p>
    pub fn set_exclusions_allowed(mut self, input: ::std::option::Option<crate::types::VpcBlockPublicAccessExclusionsAllowed>) -> Self {
        self.exclusions_allowed = input;
        self
    }
    /// <p>Determines if exclusions are allowed. If you have <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html#security-vpc-bpa-exclusions-orgs">enabled VPC BPA at the Organization level</a>, exclusions may be <code>not-allowed</code>. Otherwise, they are <code>allowed</code>.</p>
    pub fn get_exclusions_allowed(&self) -> &::std::option::Option<crate::types::VpcBlockPublicAccessExclusionsAllowed> {
        &self.exclusions_allowed
    }
    /// Consumes the builder and constructs a [`VpcBlockPublicAccessOptions`](crate::types::VpcBlockPublicAccessOptions).
    pub fn build(self) -> crate::types::VpcBlockPublicAccessOptions {
        crate::types::VpcBlockPublicAccessOptions {
            aws_account_id: self.aws_account_id,
            aws_region: self.aws_region,
            state: self.state,
            internet_gateway_block_mode: self.internet_gateway_block_mode,
            reason: self.reason,
            last_update_timestamp: self.last_update_timestamp,
            managed_by: self.managed_by,
            exclusions_allowed: self.exclusions_allowed,
        }
    }
}
