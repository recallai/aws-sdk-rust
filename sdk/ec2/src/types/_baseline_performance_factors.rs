// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The baseline performance to consider, using an instance family as a baseline reference. The instance family establishes the lowest acceptable level of performance. Amazon EC2 uses this baseline to guide instance type selection, but there is no guarantee that the selected instance types will always exceed the baseline for every application.</p>
/// <p>Currently, this parameter only supports CPU performance as a baseline performance factor. For example, specifying <code>c6i</code> would use the CPU performance of the <code>c6i</code> family as the baseline reference.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BaselinePerformanceFactors {
    /// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
    pub cpu: ::std::option::Option<crate::types::CpuPerformanceFactor>,
}
impl BaselinePerformanceFactors {
    /// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
    pub fn cpu(&self) -> ::std::option::Option<&crate::types::CpuPerformanceFactor> {
        self.cpu.as_ref()
    }
}
impl BaselinePerformanceFactors {
    /// Creates a new builder-style object to manufacture [`BaselinePerformanceFactors`](crate::types::BaselinePerformanceFactors).
    pub fn builder() -> crate::types::builders::BaselinePerformanceFactorsBuilder {
        crate::types::builders::BaselinePerformanceFactorsBuilder::default()
    }
}

/// A builder for [`BaselinePerformanceFactors`](crate::types::BaselinePerformanceFactors).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BaselinePerformanceFactorsBuilder {
    pub(crate) cpu: ::std::option::Option<crate::types::CpuPerformanceFactor>,
}
impl BaselinePerformanceFactorsBuilder {
    /// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
    pub fn cpu(mut self, input: crate::types::CpuPerformanceFactor) -> Self {
        self.cpu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
    pub fn set_cpu(mut self, input: ::std::option::Option<crate::types::CpuPerformanceFactor>) -> Self {
        self.cpu = input;
        self
    }
    /// <p>The CPU performance to consider, using an instance family as the baseline reference.</p>
    pub fn get_cpu(&self) -> &::std::option::Option<crate::types::CpuPerformanceFactor> {
        &self.cpu
    }
    /// Consumes the builder and constructs a [`BaselinePerformanceFactors`](crate::types::BaselinePerformanceFactors).
    pub fn build(self) -> crate::types::BaselinePerformanceFactors {
        crate::types::BaselinePerformanceFactors { cpu: self.cpu }
    }
}
