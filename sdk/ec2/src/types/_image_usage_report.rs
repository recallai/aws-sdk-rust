// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration and status of an image usage report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageUsageReport {
    /// <p>The ID of the image that was specified when the report was created.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the report.</p>
    pub report_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource types that were specified when the report was created.</p>
    pub resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceType>>,
    /// <p>The IDs of the Amazon Web Services accounts that were specified when the report was created.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The current state of the report. Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>available</code> - The report is available to view.</p></li>
    /// <li>
    /// <p><code>pending</code> - The report is being created and not available to view.</p></li>
    /// <li>
    /// <p><code>error</code> - The report could not be created.</p></li>
    /// </ul>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>Provides additional details when the report is in an <code>error</code> state.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the report was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when Amazon EC2 will delete the report (30 days after the report was created).</p>
    pub expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Any tags assigned to the report.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImageUsageReport {
    /// <p>The ID of the image that was specified when the report was created.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The ID of the report.</p>
    pub fn report_id(&self) -> ::std::option::Option<&str> {
        self.report_id.as_deref()
    }
    /// <p>The resource types that were specified when the report was created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[crate::types::ImageUsageResourceType] {
        self.resource_types.as_deref().unwrap_or_default()
    }
    /// <p>The IDs of the Amazon Web Services accounts that were specified when the report was created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>The current state of the report. Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>available</code> - The report is available to view.</p></li>
    /// <li>
    /// <p><code>pending</code> - The report is being created and not available to view.</p></li>
    /// <li>
    /// <p><code>error</code> - The report could not be created.</p></li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Provides additional details when the report is in an <code>error</code> state.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The date and time when the report was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when Amazon EC2 will delete the report (30 days after the report was created).</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>Any tags assigned to the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ImageUsageReport {
    /// Creates a new builder-style object to manufacture [`ImageUsageReport`](crate::types::ImageUsageReport).
    pub fn builder() -> crate::types::builders::ImageUsageReportBuilder {
        crate::types::builders::ImageUsageReportBuilder::default()
    }
}

/// A builder for [`ImageUsageReport`](crate::types::ImageUsageReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageUsageReportBuilder {
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) report_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceType>>,
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImageUsageReportBuilder {
    /// <p>The ID of the image that was specified when the report was created.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the image that was specified when the report was created.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The ID of the image that was specified when the report was created.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The ID of the report.</p>
    pub fn report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the report.</p>
    pub fn set_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_id = input;
        self
    }
    /// <p>The ID of the report.</p>
    pub fn get_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_id
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The resource types that were specified when the report was created.</p>
    pub fn resource_types(mut self, input: crate::types::ImageUsageResourceType) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource types that were specified when the report was created.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceType>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>The resource types that were specified when the report was created.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageUsageResourceType>> {
        &self.resource_types
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The IDs of the Amazon Web Services accounts that were specified when the report was created.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the Amazon Web Services accounts that were specified when the report was created.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>The IDs of the Amazon Web Services accounts that were specified when the report was created.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// <p>The current state of the report. Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>available</code> - The report is available to view.</p></li>
    /// <li>
    /// <p><code>pending</code> - The report is being created and not available to view.</p></li>
    /// <li>
    /// <p><code>error</code> - The report could not be created.</p></li>
    /// </ul>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the report. Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>available</code> - The report is available to view.</p></li>
    /// <li>
    /// <p><code>pending</code> - The report is being created and not available to view.</p></li>
    /// <li>
    /// <p><code>error</code> - The report could not be created.</p></li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the report. Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>available</code> - The report is available to view.</p></li>
    /// <li>
    /// <p><code>pending</code> - The report is being created and not available to view.</p></li>
    /// <li>
    /// <p><code>error</code> - The report could not be created.</p></li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>Provides additional details when the report is in an <code>error</code> state.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides additional details when the report is in an <code>error</code> state.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>Provides additional details when the report is in an <code>error</code> state.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>The date and time when the report was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the report was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time when the report was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time when Amazon EC2 will delete the report (30 days after the report was created).</p>
    pub fn expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when Amazon EC2 will delete the report (30 days after the report was created).</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The date and time when Amazon EC2 will delete the report (30 days after the report was created).</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_time
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the report.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the report.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the report.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImageUsageReport`](crate::types::ImageUsageReport).
    pub fn build(self) -> crate::types::ImageUsageReport {
        crate::types::ImageUsageReport {
            image_id: self.image_id,
            report_id: self.report_id,
            resource_types: self.resource_types,
            account_ids: self.account_ids,
            state: self.state,
            state_reason: self.state_reason,
            creation_time: self.creation_time,
            expiration_time: self.expiration_time,
            tags: self.tags,
        }
    }
}
