// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The public DNS names of the endpoint, including IPv4-only and dualstack DNS names.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceConnectEndpointPublicDnsNames {
    /// <p>The IPv4-only DNS name of the EC2 Instance Connect Endpoint.</p>
    pub ipv4: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>,
    /// <p>The dualstack DNS name of the EC2 Instance Connect Endpoint. A dualstack DNS name supports connections from both IPv4 and IPv6 clients.</p>
    pub dualstack: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>,
}
impl InstanceConnectEndpointPublicDnsNames {
    /// <p>The IPv4-only DNS name of the EC2 Instance Connect Endpoint.</p>
    pub fn ipv4(&self) -> ::std::option::Option<&crate::types::InstanceConnectEndpointDnsNames> {
        self.ipv4.as_ref()
    }
    /// <p>The dualstack DNS name of the EC2 Instance Connect Endpoint. A dualstack DNS name supports connections from both IPv4 and IPv6 clients.</p>
    pub fn dualstack(&self) -> ::std::option::Option<&crate::types::InstanceConnectEndpointDnsNames> {
        self.dualstack.as_ref()
    }
}
impl InstanceConnectEndpointPublicDnsNames {
    /// Creates a new builder-style object to manufacture [`InstanceConnectEndpointPublicDnsNames`](crate::types::InstanceConnectEndpointPublicDnsNames).
    pub fn builder() -> crate::types::builders::InstanceConnectEndpointPublicDnsNamesBuilder {
        crate::types::builders::InstanceConnectEndpointPublicDnsNamesBuilder::default()
    }
}

/// A builder for [`InstanceConnectEndpointPublicDnsNames`](crate::types::InstanceConnectEndpointPublicDnsNames).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceConnectEndpointPublicDnsNamesBuilder {
    pub(crate) ipv4: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>,
    pub(crate) dualstack: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>,
}
impl InstanceConnectEndpointPublicDnsNamesBuilder {
    /// <p>The IPv4-only DNS name of the EC2 Instance Connect Endpoint.</p>
    pub fn ipv4(mut self, input: crate::types::InstanceConnectEndpointDnsNames) -> Self {
        self.ipv4 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IPv4-only DNS name of the EC2 Instance Connect Endpoint.</p>
    pub fn set_ipv4(mut self, input: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>) -> Self {
        self.ipv4 = input;
        self
    }
    /// <p>The IPv4-only DNS name of the EC2 Instance Connect Endpoint.</p>
    pub fn get_ipv4(&self) -> &::std::option::Option<crate::types::InstanceConnectEndpointDnsNames> {
        &self.ipv4
    }
    /// <p>The dualstack DNS name of the EC2 Instance Connect Endpoint. A dualstack DNS name supports connections from both IPv4 and IPv6 clients.</p>
    pub fn dualstack(mut self, input: crate::types::InstanceConnectEndpointDnsNames) -> Self {
        self.dualstack = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dualstack DNS name of the EC2 Instance Connect Endpoint. A dualstack DNS name supports connections from both IPv4 and IPv6 clients.</p>
    pub fn set_dualstack(mut self, input: ::std::option::Option<crate::types::InstanceConnectEndpointDnsNames>) -> Self {
        self.dualstack = input;
        self
    }
    /// <p>The dualstack DNS name of the EC2 Instance Connect Endpoint. A dualstack DNS name supports connections from both IPv4 and IPv6 clients.</p>
    pub fn get_dualstack(&self) -> &::std::option::Option<crate::types::InstanceConnectEndpointDnsNames> {
        &self.dualstack
    }
    /// Consumes the builder and constructs a [`InstanceConnectEndpointPublicDnsNames`](crate::types::InstanceConnectEndpointPublicDnsNames).
    pub fn build(self) -> crate::types::InstanceConnectEndpointPublicDnsNames {
        crate::types::InstanceConnectEndpointPublicDnsNames {
            ipv4: self.ipv4,
            dualstack: self.dualstack,
        }
    }
}
