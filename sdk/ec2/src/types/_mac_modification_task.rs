// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a System Integrity Protection (SIP) modification task or volume ownership delegation task for an Amazon EC2 Mac instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MacModificationTask {
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of task.</p>
    pub mac_modification_task_id: ::std::option::Option<::std::string::String>,
    /// <p>\[SIP modification tasks only\] Information about the SIP configuration.</p>
    pub mac_system_integrity_protection_config: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfiguration>,
    /// <p>The date and time the task was created, in the UTC timezone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags assigned to the task.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The state of the task.</p>
    pub task_state: ::std::option::Option<crate::types::MacModificationTaskState>,
    /// <p>The type of task.</p>
    pub task_type: ::std::option::Option<crate::types::MacModificationTaskType>,
}
impl MacModificationTask {
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The ID of task.</p>
    pub fn mac_modification_task_id(&self) -> ::std::option::Option<&str> {
        self.mac_modification_task_id.as_deref()
    }
    /// <p>\[SIP modification tasks only\] Information about the SIP configuration.</p>
    pub fn mac_system_integrity_protection_config(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionConfiguration> {
        self.mac_system_integrity_protection_config.as_ref()
    }
    /// <p>The date and time the task was created, in the UTC timezone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The tags assigned to the task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The state of the task.</p>
    pub fn task_state(&self) -> ::std::option::Option<&crate::types::MacModificationTaskState> {
        self.task_state.as_ref()
    }
    /// <p>The type of task.</p>
    pub fn task_type(&self) -> ::std::option::Option<&crate::types::MacModificationTaskType> {
        self.task_type.as_ref()
    }
}
impl MacModificationTask {
    /// Creates a new builder-style object to manufacture [`MacModificationTask`](crate::types::MacModificationTask).
    pub fn builder() -> crate::types::builders::MacModificationTaskBuilder {
        crate::types::builders::MacModificationTaskBuilder::default()
    }
}

/// A builder for [`MacModificationTask`](crate::types::MacModificationTask).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MacModificationTaskBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) mac_modification_task_id: ::std::option::Option<::std::string::String>,
    pub(crate) mac_system_integrity_protection_config: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfiguration>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) task_state: ::std::option::Option<crate::types::MacModificationTaskState>,
    pub(crate) task_type: ::std::option::Option<crate::types::MacModificationTaskType>,
}
impl MacModificationTaskBuilder {
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The ID of task.</p>
    pub fn mac_modification_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac_modification_task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of task.</p>
    pub fn set_mac_modification_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac_modification_task_id = input;
        self
    }
    /// <p>The ID of task.</p>
    pub fn get_mac_modification_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac_modification_task_id
    }
    /// <p>\[SIP modification tasks only\] Information about the SIP configuration.</p>
    pub fn mac_system_integrity_protection_config(mut self, input: crate::types::MacSystemIntegrityProtectionConfiguration) -> Self {
        self.mac_system_integrity_protection_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>\[SIP modification tasks only\] Information about the SIP configuration.</p>
    pub fn set_mac_system_integrity_protection_config(
        mut self,
        input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfiguration>,
    ) -> Self {
        self.mac_system_integrity_protection_config = input;
        self
    }
    /// <p>\[SIP modification tasks only\] Information about the SIP configuration.</p>
    pub fn get_mac_system_integrity_protection_config(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionConfiguration> {
        &self.mac_system_integrity_protection_config
    }
    /// <p>The date and time the task was created, in the UTC timezone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the task was created, in the UTC timezone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time the task was created, in the UTC timezone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the task.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the task.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the task.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The state of the task.</p>
    pub fn task_state(mut self, input: crate::types::MacModificationTaskState) -> Self {
        self.task_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the task.</p>
    pub fn set_task_state(mut self, input: ::std::option::Option<crate::types::MacModificationTaskState>) -> Self {
        self.task_state = input;
        self
    }
    /// <p>The state of the task.</p>
    pub fn get_task_state(&self) -> &::std::option::Option<crate::types::MacModificationTaskState> {
        &self.task_state
    }
    /// <p>The type of task.</p>
    pub fn task_type(mut self, input: crate::types::MacModificationTaskType) -> Self {
        self.task_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of task.</p>
    pub fn set_task_type(mut self, input: ::std::option::Option<crate::types::MacModificationTaskType>) -> Self {
        self.task_type = input;
        self
    }
    /// <p>The type of task.</p>
    pub fn get_task_type(&self) -> &::std::option::Option<crate::types::MacModificationTaskType> {
        &self.task_type
    }
    /// Consumes the builder and constructs a [`MacModificationTask`](crate::types::MacModificationTask).
    pub fn build(self) -> crate::types::MacModificationTask {
        crate::types::MacModificationTask {
            instance_id: self.instance_id,
            mac_modification_task_id: self.mac_modification_task_id,
            mac_system_integrity_protection_config: self.mac_system_integrity_protection_config,
            start_time: self.start_time,
            tags: self.tags,
            task_state: self.task_state,
            task_type: self.task_type,
        }
    }
}
