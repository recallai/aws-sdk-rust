// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_route_server_peer(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::RouteServerPeer, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RouteServerPeer::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeServerPeerId") /* RouteServerPeerId com.amazonaws.ec2#RouteServerPeer$RouteServerPeerId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_server_peer_id(var_1);
            }
            ,
            s if s.matches("routeServerEndpointId") /* RouteServerEndpointId com.amazonaws.ec2#RouteServerPeer$RouteServerEndpointId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_server_endpoint_id(var_2);
            }
            ,
            s if s.matches("routeServerId") /* RouteServerId com.amazonaws.ec2#RouteServerPeer$RouteServerId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_server_id(var_3);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#RouteServerPeer$VpcId */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_4);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#RouteServerPeer$SubnetId */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_5);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#RouteServerPeer$State */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::RouteServerPeerState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::RouteServerPeerState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_6);
            }
            ,
            s if s.matches("failureReason") /* FailureReason com.amazonaws.ec2#RouteServerPeer$FailureReason */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_failure_reason(var_7);
            }
            ,
            s if s.matches("endpointEniId") /* EndpointEniId com.amazonaws.ec2#RouteServerPeer$EndpointEniId */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_eni_id(var_8);
            }
            ,
            s if s.matches("endpointEniAddress") /* EndpointEniAddress com.amazonaws.ec2#RouteServerPeer$EndpointEniAddress */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_eni_address(var_9);
            }
            ,
            s if s.matches("peerAddress") /* PeerAddress com.amazonaws.ec2#RouteServerPeer$PeerAddress */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peer_address(var_10);
            }
            ,
            s if s.matches("bgpOptions") /* BgpOptions com.amazonaws.ec2#RouteServerPeer$BgpOptions */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_route_server_bgp_options::de_route_server_bgp_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bgp_options(var_11);
            }
            ,
            s if s.matches("bgpStatus") /* BgpStatus com.amazonaws.ec2#RouteServerPeer$BgpStatus */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_route_server_bgp_status::de_route_server_bgp_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bgp_status(var_12);
            }
            ,
            s if s.matches("bfdStatus") /* BfdStatus com.amazonaws.ec2#RouteServerPeer$BfdStatus */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_route_server_bfd_status::de_route_server_bfd_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bfd_status(var_13);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#RouteServerPeer$Tags */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_14);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
