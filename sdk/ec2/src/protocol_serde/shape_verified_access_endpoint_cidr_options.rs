// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_verified_access_endpoint_cidr_options(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::VerifiedAccessEndpointCidrOptions, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VerifiedAccessEndpointCidrOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#VerifiedAccessEndpointCidrOptions$Cidr */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_1);
            }
            ,
            s if s.matches("portRangeSet") /* PortRanges com.amazonaws.ec2#VerifiedAccessEndpointCidrOptions$PortRanges */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_verified_access_endpoint_port_range_list::de_verified_access_endpoint_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_port_ranges(var_2);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#VerifiedAccessEndpointCidrOptions$Protocol */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::VerifiedAccessEndpointProtocol, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::VerifiedAccessEndpointProtocol::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_3);
            }
            ,
            s if s.matches("subnetIdSet") /* SubnetIds com.amazonaws.ec2#VerifiedAccessEndpointCidrOptions$SubnetIds */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_verified_access_endpoint_subnet_id_list::de_verified_access_endpoint_subnet_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ids(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
