// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_route_server_route(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::RouteServerRoute, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RouteServerRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeServerEndpointId") /* RouteServerEndpointId com.amazonaws.ec2#RouteServerRoute$RouteServerEndpointId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_server_endpoint_id(var_1);
            }
            ,
            s if s.matches("routeServerPeerId") /* RouteServerPeerId com.amazonaws.ec2#RouteServerRoute$RouteServerPeerId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_server_peer_id(var_2);
            }
            ,
            s if s.matches("routeInstallationDetailSet") /* RouteInstallationDetails com.amazonaws.ec2#RouteServerRoute$RouteInstallationDetails */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_route_server_route_installation_details::de_route_server_route_installation_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_installation_details(var_3);
            }
            ,
            s if s.matches("routeStatus") /* RouteStatus com.amazonaws.ec2#RouteServerRoute$RouteStatus */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::RouteServerRouteStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::RouteServerRouteStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_route_status(var_4);
            }
            ,
            s if s.matches("prefix") /* Prefix com.amazonaws.ec2#RouteServerRoute$Prefix */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_5);
            }
            ,
            s if s.matches("asPathSet") /* AsPaths com.amazonaws.ec2#RouteServerRoute$AsPaths */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_as_path::de_as_path(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_as_paths(var_6);
            }
            ,
            s if s.matches("med") /* Med com.amazonaws.ec2#RouteServerRoute$Med */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_med(var_7);
            }
            ,
            s if s.matches("nextHopIp") /* NextHopIp com.amazonaws.ec2#RouteServerRoute$NextHopIp */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_hop_ip(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
