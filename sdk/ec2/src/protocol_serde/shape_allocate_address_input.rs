// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_allocate_address_input_input_input(
    input: &crate::operation::allocate_address::AllocateAddressInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Domain");
    if let Some(var_2) = &input.domain {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Address");
    if let Some(var_4) = &input.address {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PublicIpv4Pool");
    if let Some(var_6) = &input.public_ipv4_pool {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("NetworkBorderGroup");
    if let Some(var_8) = &input.network_border_group {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_10) = &input.customer_owned_ipv4_pool {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("TagSpecification");
    if let Some(var_12) = &input.tag_specifications {
        if !var_12.is_empty() {
            let mut list_14 = scope_11.start_list(true, Some("item"));
            for item_13 in var_12 {
                #[allow(unused_mut)]
                let mut entry_15 = list_14.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_15, item_13)?;
            }
            list_14.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("IpamPoolId");
    if let Some(var_17) = &input.ipam_pool_id {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("DryRun");
    if let Some(var_19) = &input.dry_run {
        scope_18.boolean(*var_19);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
