// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_snapshots_input_input_input(
    input: &crate::operation::describe_snapshots::DescribeSnapshotsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("MaxResults");
    if let Some(var_2) = &input.max_results {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("NextToken");
    if let Some(var_4) = &input.next_token {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Owner");
    if let Some(var_6) = &input.owner_ids {
        if !var_6.is_empty() {
            let mut list_8 = scope_5.start_list(true, Some("Owner"));
            for item_7 in var_6 {
                #[allow(unused_mut)]
                let mut entry_9 = list_8.entry();
                entry_9.string(item_7);
            }
            list_8.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("RestorableBy");
    if let Some(var_11) = &input.restorable_by_user_ids {
        if !var_11.is_empty() {
            let mut list_13 = scope_10.start_list(true, None);
            for item_12 in var_11 {
                #[allow(unused_mut)]
                let mut entry_14 = list_13.entry();
                entry_14.string(item_12);
            }
            list_13.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("SnapshotId");
    if let Some(var_16) = &input.snapshot_ids {
        if !var_16.is_empty() {
            let mut list_18 = scope_15.start_list(true, Some("SnapshotId"));
            for item_17 in var_16 {
                #[allow(unused_mut)]
                let mut entry_19 = list_18.entry();
                entry_19.string(item_17);
            }
            list_18.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("DryRun");
    if let Some(var_21) = &input.dry_run {
        scope_20.boolean(*var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("Filter");
    if let Some(var_23) = &input.filters {
        if !var_23.is_empty() {
            let mut list_25 = scope_22.start_list(true, Some("Filter"));
            for item_24 in var_23 {
                #[allow(unused_mut)]
                let mut entry_26 = list_25.entry();
                crate::protocol_serde::shape_filter::ser_filter(entry_26, item_24)?;
            }
            list_25.finish();
        }
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
