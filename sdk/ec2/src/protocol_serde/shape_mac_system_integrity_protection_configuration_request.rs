// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_mac_system_integrity_protection_configuration_request(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::MacSystemIntegrityProtectionConfigurationRequest,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AppleInternal");
    if let Some(var_2) = &input.apple_internal {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("BaseSystem");
    if let Some(var_4) = &input.base_system {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DebuggingRestrictions");
    if let Some(var_6) = &input.debugging_restrictions {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DTraceRestrictions");
    if let Some(var_8) = &input.d_trace_restrictions {
        scope_7.string(var_8.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("FilesystemProtections");
    if let Some(var_10) = &input.filesystem_protections {
        scope_9.string(var_10.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("KextSigning");
    if let Some(var_12) = &input.kext_signing {
        scope_11.string(var_12.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("NvramProtections");
    if let Some(var_14) = &input.nvram_protections {
        scope_13.string(var_14.as_str());
    }
    Ok(())
}
