// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_active_vpn_tunnel_status(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::ActiveVpnTunnelStatus, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ActiveVpnTunnelStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("phase1EncryptionAlgorithm") /* Phase1EncryptionAlgorithm com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase1EncryptionAlgorithm */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_phase1_encryption_algorithm(var_1);
            }
            ,
            s if s.matches("phase2EncryptionAlgorithm") /* Phase2EncryptionAlgorithm com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase2EncryptionAlgorithm */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_phase2_encryption_algorithm(var_2);
            }
            ,
            s if s.matches("phase1IntegrityAlgorithm") /* Phase1IntegrityAlgorithm com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase1IntegrityAlgorithm */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_phase1_integrity_algorithm(var_3);
            }
            ,
            s if s.matches("phase2IntegrityAlgorithm") /* Phase2IntegrityAlgorithm com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase2IntegrityAlgorithm */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_phase2_integrity_algorithm(var_4);
            }
            ,
            s if s.matches("phase1DHGroup") /* Phase1DHGroup com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase1DHGroup */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_phase1_dh_group(var_5);
            }
            ,
            s if s.matches("phase2DHGroup") /* Phase2DHGroup com.amazonaws.ec2#ActiveVpnTunnelStatus$Phase2DHGroup */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_phase2_dh_group(var_6);
            }
            ,
            s if s.matches("ikeVersion") /* IkeVersion com.amazonaws.ec2#ActiveVpnTunnelStatus$IkeVersion */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ike_version(var_7);
            }
            ,
            s if s.matches("provisioningStatus") /* ProvisioningStatus com.amazonaws.ec2#ActiveVpnTunnelStatus$ProvisioningStatus */ =>  {
                let var_8 =
                    Some(
                        Result::<crate::types::VpnTunnelProvisioningStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::VpnTunnelProvisioningStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_provisioning_status(var_8);
            }
            ,
            s if s.matches("provisioningStatusReason") /* ProvisioningStatusReason com.amazonaws.ec2#ActiveVpnTunnelStatus$ProvisioningStatusReason */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_provisioning_status_reason(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
