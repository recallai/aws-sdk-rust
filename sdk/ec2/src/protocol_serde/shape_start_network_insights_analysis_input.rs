// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_network_insights_analysis_input_input_input(
    input: &crate::operation::start_network_insights_analysis::StartNetworkInsightsAnalysisInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2) = &input.network_insights_path_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AdditionalAccount");
    if let Some(var_4) = &input.additional_accounts {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                entry_7.string(item_5);
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("FilterInArn");
    if let Some(var_9) = &input.filter_in_arns {
        if !var_9.is_empty() {
            let mut list_11 = scope_8.start_list(true, Some("item"));
            for item_10 in var_9 {
                #[allow(unused_mut)]
                let mut entry_12 = list_11.entry();
                entry_12.string(item_10);
            }
            list_11.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("FilterOutArn");
    if let Some(var_14) = &input.filter_out_arns {
        if !var_14.is_empty() {
            let mut list_16 = scope_13.start_list(true, Some("item"));
            for item_15 in var_14 {
                #[allow(unused_mut)]
                let mut entry_17 = list_16.entry();
                entry_17.string(item_15);
            }
            list_16.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("DryRun");
    if let Some(var_19) = &input.dry_run {
        scope_18.boolean(*var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("TagSpecification");
    if let Some(var_21) = &input.tag_specifications {
        if !var_21.is_empty() {
            let mut list_23 = scope_20.start_list(true, Some("item"));
            for item_22 in var_21 {
                #[allow(unused_mut)]
                let mut entry_24 = list_23.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_24, item_22)?;
            }
            list_23.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("ClientToken");
    if let Some(var_26) = &input.client_token {
        scope_25.string(var_26);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
