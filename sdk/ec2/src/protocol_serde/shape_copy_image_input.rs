// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_copy_image_input_input_input(
    input: &crate::operation::copy_image::CopyImageInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ClientToken");
    if let Some(var_2) = &input.client_token {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Description");
    if let Some(var_4) = &input.description {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Encrypted");
    if let Some(var_6) = &input.encrypted {
        scope_5.boolean(*var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("KmsKeyId");
    if let Some(var_8) = &input.kms_key_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Name");
    if let Some(var_10) = &input.name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("SourceImageId");
    if let Some(var_12) = &input.source_image_id {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("SourceRegion");
    if let Some(var_14) = &input.source_region {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DestinationOutpostArn");
    if let Some(var_16) = &input.destination_outpost_arn {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("CopyImageTags");
    if let Some(var_18) = &input.copy_image_tags {
        scope_17.boolean(*var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("TagSpecification");
    if let Some(var_20) = &input.tag_specifications {
        if !var_20.is_empty() {
            let mut list_22 = scope_19.start_list(true, Some("item"));
            for item_21 in var_20 {
                #[allow(unused_mut)]
                let mut entry_23 = list_22.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_23, item_21)?;
            }
            list_22.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("SnapshotCopyCompletionDurationMinutes");
    if let Some(var_25) = &input.snapshot_copy_completion_duration_minutes {
        scope_24.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DestinationAvailabilityZone");
    if let Some(var_27) = &input.destination_availability_zone {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("DestinationAvailabilityZoneId");
    if let Some(var_29) = &input.destination_availability_zone_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
