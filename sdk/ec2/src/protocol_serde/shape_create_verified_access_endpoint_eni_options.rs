// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_create_verified_access_endpoint_eni_options(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::CreateVerifiedAccessEndpointEniOptions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2) = &input.network_interface_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Protocol");
    if let Some(var_4) = &input.protocol {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Port");
    if let Some(var_6) = &input.port {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("PortRange");
    if let Some(var_8) = &input.port_ranges {
        if !var_8.is_empty() {
            let mut list_10 = scope_7.start_list(true, Some("item"));
            for item_9 in var_8 {
                #[allow(unused_mut)]
                let mut entry_11 = list_10.entry();
                crate::protocol_serde::shape_create_verified_access_endpoint_port_range::ser_create_verified_access_endpoint_port_range(
                    entry_11, item_9,
                )?;
            }
            list_10.finish();
        }
    }
    Ok(())
}
