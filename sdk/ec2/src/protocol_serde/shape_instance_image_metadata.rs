// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_instance_image_metadata(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::InstanceImageMetadata, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceImageMetadata::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceImageMetadata$InstanceId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceImageMetadata$InstanceType */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::InstanceType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2);
            }
            ,
            s if s.matches("launchTime") /* LaunchTime com.amazonaws.ec2#InstanceImageMetadata$LaunchTime */ =>  {
                let var_3 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_launch_time(var_3);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#InstanceImageMetadata$AvailabilityZone */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_4);
            }
            ,
            s if s.matches("zoneId") /* ZoneId com.amazonaws.ec2#InstanceImageMetadata$ZoneId */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_zone_id(var_5);
            }
            ,
            s if s.matches("instanceState") /* State com.amazonaws.ec2#InstanceImageMetadata$State */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_instance_state::de_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state(var_6);
            }
            ,
            s if s.matches("instanceOwnerId") /* OwnerId com.amazonaws.ec2#InstanceImageMetadata$OwnerId */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_7);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#InstanceImageMetadata$Tags */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_8);
            }
            ,
            s if s.matches("imageMetadata") /* ImageMetadata com.amazonaws.ec2#InstanceImageMetadata$ImageMetadata */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_image_metadata::de_image_metadata(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_image_metadata(var_9);
            }
            ,
            s if s.matches("operator") /* Operator com.amazonaws.ec2#InstanceImageMetadata$Operator */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_operator_response::de_operator_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_operator(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
