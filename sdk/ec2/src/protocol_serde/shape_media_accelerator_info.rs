// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_media_accelerator_info(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::MediaAcceleratorInfo, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MediaAcceleratorInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accelerators") /* Accelerators com.amazonaws.ec2#MediaAcceleratorInfo$Accelerators */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_media_device_info_list::de_media_device_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerators(var_1);
            }
            ,
            s if s.matches("totalMediaMemoryInMiB") /* TotalMediaMemoryInMiB com.amazonaws.ec2#MediaAcceleratorInfo$TotalMediaMemoryInMiB */ =>  {
                let var_2 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#TotalMediaMemory`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_media_memory_in_mib(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
