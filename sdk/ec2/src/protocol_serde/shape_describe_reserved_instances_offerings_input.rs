// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_reserved_instances_offerings_input_input_input(
    input: &crate::operation::describe_reserved_instances_offerings::DescribeReservedInstancesOfferingsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZone");
    if let Some(var_2) = &input.availability_zone {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("IncludeMarketplace");
    if let Some(var_4) = &input.include_marketplace {
        scope_3.boolean(*var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("InstanceType");
    if let Some(var_6) = &input.instance_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("MaxDuration");
    if let Some(var_8) = &input.max_duration {
        scope_7.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MaxInstanceCount");
    if let Some(var_10) = &input.max_instance_count {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MinDuration");
    if let Some(var_12) = &input.min_duration {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("OfferingClass");
    if let Some(var_14) = &input.offering_class {
        scope_13.string(var_14.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("ProductDescription");
    if let Some(var_16) = &input.product_description {
        scope_15.string(var_16.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_18) = &input.reserved_instances_offering_ids {
        if !var_18.is_empty() {
            let mut list_20 = scope_17.start_list(true, None);
            for item_19 in var_18 {
                #[allow(unused_mut)]
                let mut entry_21 = list_20.entry();
                entry_21.string(item_19);
            }
            list_20.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("AvailabilityZoneId");
    if let Some(var_23) = &input.availability_zone_id {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("DryRun");
    if let Some(var_25) = &input.dry_run {
        scope_24.boolean(*var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("Filter");
    if let Some(var_27) = &input.filters {
        if !var_27.is_empty() {
            let mut list_29 = scope_26.start_list(true, Some("Filter"));
            for item_28 in var_27 {
                #[allow(unused_mut)]
                let mut entry_30 = list_29.entry();
                crate::protocol_serde::shape_filter::ser_filter(entry_30, item_28)?;
            }
            list_29.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("InstanceTenancy");
    if let Some(var_32) = &input.instance_tenancy {
        scope_31.string(var_32.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("OfferingType");
    if let Some(var_34) = &input.offering_type {
        scope_33.string(var_34.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("NextToken");
    if let Some(var_36) = &input.next_token {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("MaxResults");
    if let Some(var_38) = &input.max_results {
        scope_37.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
