// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_spot_instances_input_input_input(
    input: &crate::operation::request_spot_instances::RequestSpotInstancesInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("LaunchSpecification");
    if let Some(var_2) = &input.launch_specification {
        crate::protocol_serde::shape_request_spot_launch_specification::ser_request_spot_launch_specification(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TagSpecification");
    if let Some(var_4) = &input.tag_specifications {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_7, item_5)?;
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_9) = &input.instance_interruption_behavior {
        scope_8.string(var_9.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("DryRun");
    if let Some(var_11) = &input.dry_run {
        scope_10.boolean(*var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("SpotPrice");
    if let Some(var_13) = &input.spot_price {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ClientToken");
    if let Some(var_15) = &input.client_token {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceCount");
    if let Some(var_17) = &input.instance_count {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Type");
    if let Some(var_19) = &input.r#type {
        scope_18.string(var_19.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ValidFrom");
    if let Some(var_21) = &input.valid_from {
        scope_20.date_time(var_21, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("ValidUntil");
    if let Some(var_23) = &input.valid_until {
        scope_22.date_time(var_23, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("LaunchGroup");
    if let Some(var_25) = &input.launch_group {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_27) = &input.availability_zone_group {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("BlockDurationMinutes");
    if let Some(var_29) = &input.block_duration_minutes {
        scope_28.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
