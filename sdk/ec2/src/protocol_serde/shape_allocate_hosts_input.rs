// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_allocate_hosts_input_input_input(
    input: &crate::operation::allocate_hosts::AllocateHostsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceFamily");
    if let Some(var_2) = &input.instance_family {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TagSpecification");
    if let Some(var_4) = &input.tag_specifications {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_7, item_5)?;
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("HostRecovery");
    if let Some(var_9) = &input.host_recovery {
        scope_8.string(var_9.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("OutpostArn");
    if let Some(var_11) = &input.outpost_arn {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("HostMaintenance");
    if let Some(var_13) = &input.host_maintenance {
        scope_12.string(var_13.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("AssetId");
    if let Some(var_15) = &input.asset_ids {
        if !var_15.is_empty() {
            let mut list_17 = scope_14.start_list(true, None);
            for item_16 in var_15 {
                #[allow(unused_mut)]
                let mut entry_18 = list_17.entry();
                entry_18.string(item_16);
            }
            list_17.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("AvailabilityZoneId");
    if let Some(var_20) = &input.availability_zone_id {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("AutoPlacement");
    if let Some(var_22) = &input.auto_placement {
        scope_21.string(var_22.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("ClientToken");
    if let Some(var_24) = &input.client_token {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("InstanceType");
    if let Some(var_26) = &input.instance_type {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Quantity");
    if let Some(var_28) = &input.quantity {
        scope_27.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("AvailabilityZone");
    if let Some(var_30) = &input.availability_zone {
        scope_29.string(var_30);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
