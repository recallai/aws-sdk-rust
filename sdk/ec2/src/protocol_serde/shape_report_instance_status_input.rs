// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_report_instance_status_input_input_input(
    input: &crate::operation::report_instance_status::ReportInstanceStatusInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("InstanceId");
    if let Some(var_4) = &input.instances {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("InstanceId"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                entry_7.string(item_5);
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("Status");
    if let Some(var_9) = &input.status {
        scope_8.string(var_9.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("StartTime");
    if let Some(var_11) = &input.start_time {
        scope_10.date_time(var_11, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EndTime");
    if let Some(var_13) = &input.end_time {
        scope_12.date_time(var_13, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ReasonCode");
    if let Some(var_15) = &input.reason_codes {
        if !var_15.is_empty() {
            let mut list_17 = scope_14.start_list(true, Some("item"));
            for item_16 in var_15 {
                #[allow(unused_mut)]
                let mut entry_18 = list_17.entry();
                entry_18.string(item_16.as_str());
            }
            list_17.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Description");
    if let Some(var_20) = &input.description {
        scope_19.string(var_20);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
