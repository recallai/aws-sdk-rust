// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_verified_access_instance_user_trust_provider_client_configuration(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("type") /* Type com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$Type */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::UserTrustProviderType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::UserTrustProviderType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1);
            }
            ,
            s if s.matches("scopes") /* Scopes com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$Scopes */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_scopes(var_2);
            }
            ,
            s if s.matches("issuer") /* Issuer com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$Issuer */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_issuer(var_3);
            }
            ,
            s if s.matches("authorizationEndpoint") /* AuthorizationEndpoint com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$AuthorizationEndpoint */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_authorization_endpoint(var_4);
            }
            ,
            s if s.matches("publicSigningKeyEndpoint") /* PublicSigningKeyEndpoint com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$PublicSigningKeyEndpoint */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_signing_key_endpoint(var_5);
            }
            ,
            s if s.matches("tokenEndpoint") /* TokenEndpoint com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$TokenEndpoint */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_token_endpoint(var_6);
            }
            ,
            s if s.matches("userInfoEndpoint") /* UserInfoEndpoint com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$UserInfoEndpoint */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_info_endpoint(var_7);
            }
            ,
            s if s.matches("clientId") /* ClientId com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$ClientId */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_id(var_8);
            }
            ,
            s if s.matches("clientSecret") /* ClientSecret com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$ClientSecret */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_secret(var_9);
            }
            ,
            s if s.matches("pkceEnabled") /* PkceEnabled com.amazonaws.ec2#VerifiedAccessInstanceUserTrustProviderClientConfiguration$PkceEnabled */ =>  {
                let var_10 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_pkce_enabled(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
