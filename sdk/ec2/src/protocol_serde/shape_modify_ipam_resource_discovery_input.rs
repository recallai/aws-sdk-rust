// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_ipam_resource_discovery_input_input_input(
    input: &crate::operation::modify_ipam_resource_discovery::ModifyIpamResourceDiscoveryInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceDiscovery", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("IpamResourceDiscoveryId");
    if let Some(var_4) = &input.ipam_resource_discovery_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Description");
    if let Some(var_6) = &input.description {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("AddOperatingRegion");
    if let Some(var_8) = &input.add_operating_regions {
        if !var_8.is_empty() {
            let mut list_10 = scope_7.start_list(true, None);
            for item_9 in var_8 {
                #[allow(unused_mut)]
                let mut entry_11 = list_10.entry();
                crate::protocol_serde::shape_add_ipam_operating_region::ser_add_ipam_operating_region(entry_11, item_9)?;
            }
            list_10.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_13) = &input.remove_operating_regions {
        if !var_13.is_empty() {
            let mut list_15 = scope_12.start_list(true, None);
            for item_14 in var_13 {
                #[allow(unused_mut)]
                let mut entry_16 = list_15.entry();
                crate::protocol_serde::shape_remove_ipam_operating_region::ser_remove_ipam_operating_region(entry_16, item_14)?;
            }
            list_15.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("AddOrganizationalUnitExclusion");
    if let Some(var_18) = &input.add_organizational_unit_exclusions {
        if !var_18.is_empty() {
            let mut list_20 = scope_17.start_list(true, None);
            for item_19 in var_18 {
                #[allow(unused_mut)]
                let mut entry_21 = list_20.entry();
                crate::protocol_serde::shape_add_ipam_organizational_unit_exclusion::ser_add_ipam_organizational_unit_exclusion(entry_21, item_19)?;
            }
            list_20.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("RemoveOrganizationalUnitExclusion");
    if let Some(var_23) = &input.remove_organizational_unit_exclusions {
        if !var_23.is_empty() {
            let mut list_25 = scope_22.start_list(true, None);
            for item_24 in var_23 {
                #[allow(unused_mut)]
                let mut entry_26 = list_25.entry();
                crate::protocol_serde::shape_remove_ipam_organizational_unit_exclusion::ser_remove_ipam_organizational_unit_exclusion(
                    entry_26, item_24,
                )?;
            }
            list_25.finish();
        }
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
