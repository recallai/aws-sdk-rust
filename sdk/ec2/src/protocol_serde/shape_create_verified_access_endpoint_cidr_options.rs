// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_create_verified_access_endpoint_cidr_options(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::CreateVerifiedAccessEndpointCidrOptions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Protocol");
    if let Some(var_2) = &input.protocol {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("SubnetId");
    if let Some(var_4) = &input.subnet_ids {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                entry_7.string(item_5);
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("Cidr");
    if let Some(var_9) = &input.cidr {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("PortRange");
    if let Some(var_11) = &input.port_ranges {
        if !var_11.is_empty() {
            let mut list_13 = scope_10.start_list(true, Some("item"));
            for item_12 in var_11 {
                #[allow(unused_mut)]
                let mut entry_14 = list_13.entry();
                crate::protocol_serde::shape_create_verified_access_endpoint_port_range::ser_create_verified_access_endpoint_port_range(
                    entry_14, item_12,
                )?;
            }
            list_13.finish();
        }
    }
    Ok(())
}
