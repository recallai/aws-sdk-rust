// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_network_interface_attribute_input_input_input(
    input: &crate::operation::modify_network_interface_attribute::ModifyNetworkInterfaceAttributeInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("EnaSrdSpecification");
    if let Some(var_2) = &input.ena_srd_specification {
        crate::protocol_serde::shape_ena_srd_specification::ser_ena_srd_specification(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EnablePrimaryIpv6");
    if let Some(var_4) = &input.enable_primary_ipv6 {
        scope_3.boolean(*var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ConnectionTrackingSpecification");
    if let Some(var_6) = &input.connection_tracking_specification {
        crate::protocol_serde::shape_connection_tracking_specification_request::ser_connection_tracking_specification_request(scope_5, var_6)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_8) = &input.associate_public_ip_address {
        scope_7.boolean(*var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AssociatedSubnetId");
    if let Some(var_10) = &input.associated_subnet_ids {
        if !var_10.is_empty() {
            let mut list_12 = scope_9.start_list(true, Some("AssociatedSubnetId"));
            for item_11 in var_10 {
                #[allow(unused_mut)]
                let mut entry_13 = list_12.entry();
                entry_13.string(item_11);
            }
            list_12.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("DryRun");
    if let Some(var_15) = &input.dry_run {
        scope_14.boolean(*var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("NetworkInterfaceId");
    if let Some(var_17) = &input.network_interface_id {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Description");
    if let Some(var_19) = &input.description {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_18, var_19)?;
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("SourceDestCheck");
    if let Some(var_21) = &input.source_dest_check {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(scope_20, var_21)?;
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("SecurityGroupId");
    if let Some(var_23) = &input.groups {
        if !var_23.is_empty() {
            let mut list_25 = scope_22.start_list(true, Some("SecurityGroupId"));
            for item_24 in var_23 {
                #[allow(unused_mut)]
                let mut entry_26 = list_25.entry();
                entry_26.string(item_24);
            }
            list_25.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Attachment");
    if let Some(var_28) = &input.attachment {
        crate::protocol_serde::shape_network_interface_attachment_changes::ser_network_interface_attachment_changes(scope_27, var_28)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
