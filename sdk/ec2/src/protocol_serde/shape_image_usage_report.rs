// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_image_usage_report(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::ImageUsageReport, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ImageUsageReport::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ImageUsageReport$ImageId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_1);
            }
            ,
            s if s.matches("reportId") /* ReportId com.amazonaws.ec2#ImageUsageReport$ReportId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_report_id(var_2);
            }
            ,
            s if s.matches("resourceTypeSet") /* ResourceTypes com.amazonaws.ec2#ImageUsageReport$ResourceTypes */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_image_usage_resource_type_list::de_image_usage_resource_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_types(var_3);
            }
            ,
            s if s.matches("accountIdSet") /* AccountIds com.amazonaws.ec2#ImageUsageReport$AccountIds */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_user_id_list::de_user_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_account_ids(var_4);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ImageUsageReport$State */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_5);
            }
            ,
            s if s.matches("stateReason") /* StateReason com.amazonaws.ec2#ImageUsageReport$StateReason */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_reason(var_6);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#ImageUsageReport$CreationTime */ =>  {
                let var_7 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_7);
            }
            ,
            s if s.matches("expirationTime") /* ExpirationTime com.amazonaws.ec2#ImageUsageReport$ExpirationTime */ =>  {
                let var_8 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_expiration_time(var_8);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ImageUsageReport$Tags */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
