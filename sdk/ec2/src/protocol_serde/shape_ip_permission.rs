// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_ip_permission(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::IpPermission,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("IpProtocol");
    if let Some(var_2) = &input.ip_protocol {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("FromPort");
    if let Some(var_4) = &input.from_port {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ToPort");
    if let Some(var_6) = &input.to_port {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Groups");
    if let Some(var_8) = &input.user_id_group_pairs {
        if !var_8.is_empty() {
            let mut list_10 = scope_7.start_list(true, Some("item"));
            for item_9 in var_8 {
                #[allow(unused_mut)]
                let mut entry_11 = list_10.entry();
                crate::protocol_serde::shape_user_id_group_pair::ser_user_id_group_pair(entry_11, item_9)?;
            }
            list_10.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("IpRanges");
    if let Some(var_13) = &input.ip_ranges {
        if !var_13.is_empty() {
            let mut list_15 = scope_12.start_list(true, Some("item"));
            for item_14 in var_13 {
                #[allow(unused_mut)]
                let mut entry_16 = list_15.entry();
                crate::protocol_serde::shape_ip_range::ser_ip_range(entry_16, item_14)?;
            }
            list_15.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("Ipv6Ranges");
    if let Some(var_18) = &input.ipv6_ranges {
        if !var_18.is_empty() {
            let mut list_20 = scope_17.start_list(true, Some("item"));
            for item_19 in var_18 {
                #[allow(unused_mut)]
                let mut entry_21 = list_20.entry();
                crate::protocol_serde::shape_ipv6_range::ser_ipv6_range(entry_21, item_19)?;
            }
            list_20.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("PrefixListIds");
    if let Some(var_23) = &input.prefix_list_ids {
        if !var_23.is_empty() {
            let mut list_25 = scope_22.start_list(true, Some("item"));
            for item_24 in var_23 {
                #[allow(unused_mut)]
                let mut entry_26 = list_25.entry();
                crate::protocol_serde::shape_prefix_list_id::ser_prefix_list_id(entry_26, item_24)?;
            }
            list_25.finish();
        }
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_ip_permission(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::IpPermission, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipProtocol") /* IpProtocol com.amazonaws.ec2#IpPermission$IpProtocol */ =>  {
                let var_27 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_protocol(var_27);
            }
            ,
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#IpPermission$FromPort */ =>  {
                let var_28 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_28);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#IpPermission$ToPort */ =>  {
                let var_29 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_29);
            }
            ,
            s if s.matches("groups") /* UserIdGroupPairs com.amazonaws.ec2#IpPermission$UserIdGroupPairs */ =>  {
                let var_30 =
                    Some(
                        crate::protocol_serde::shape_user_id_group_pair_list::de_user_id_group_pair_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_id_group_pairs(var_30);
            }
            ,
            s if s.matches("ipRanges") /* IpRanges com.amazonaws.ec2#IpPermission$IpRanges */ =>  {
                let var_31 =
                    Some(
                        crate::protocol_serde::shape_ip_range_list::de_ip_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_ranges(var_31);
            }
            ,
            s if s.matches("ipv6Ranges") /* Ipv6Ranges com.amazonaws.ec2#IpPermission$Ipv6Ranges */ =>  {
                let var_32 =
                    Some(
                        crate::protocol_serde::shape_ipv6_range_list::de_ipv6_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_ranges(var_32);
            }
            ,
            s if s.matches("prefixListIds") /* PrefixListIds com.amazonaws.ec2#IpPermission$PrefixListIds */ =>  {
                let var_33 =
                    Some(
                        crate::protocol_serde::shape_prefix_list_id_list::de_prefix_list_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list_ids(var_33);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
