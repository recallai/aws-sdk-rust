// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_local_gateway_virtual_interface_input_input_input(
    input: &crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayVirtualInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2) = &input.local_gateway_virtual_interface_group_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OutpostLagId");
    if let Some(var_4) = &input.outpost_lag_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Vlan");
    if let Some(var_6) = &input.vlan {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("LocalAddress");
    if let Some(var_8) = &input.local_address {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("PeerAddress");
    if let Some(var_10) = &input.peer_address {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PeerBgpAsn");
    if let Some(var_12) = &input.peer_bgp_asn {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TagSpecification");
    if let Some(var_14) = &input.tag_specifications {
        if !var_14.is_empty() {
            let mut list_16 = scope_13.start_list(true, Some("item"));
            for item_15 in var_14 {
                #[allow(unused_mut)]
                let mut entry_17 = list_16.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_17, item_15)?;
            }
            list_16.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("DryRun");
    if let Some(var_19) = &input.dry_run {
        scope_18.boolean(*var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("PeerBgpAsnExtended");
    if let Some(var_21) = &input.peer_bgp_asn_extended {
        scope_20.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
