// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_image_usage_report_input_input_input(
    input: &crate::operation::create_image_usage_report::CreateImageUsageReportInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateImageUsageReport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ImageId");
    if let Some(var_2) = &input.image_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("DryRun");
    if let Some(var_4) = &input.dry_run {
        scope_3.boolean(*var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_types {
        if !var_6.is_empty() {
            let mut list_8 = scope_5.start_list(true, None);
            for item_7 in var_6 {
                #[allow(unused_mut)]
                let mut entry_9 = list_8.entry();
                crate::protocol_serde::shape_image_usage_resource_type_request::ser_image_usage_resource_type_request(entry_9, item_7)?;
            }
            list_8.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("AccountId");
    if let Some(var_11) = &input.account_ids {
        if !var_11.is_empty() {
            let mut list_13 = scope_10.start_list(true, Some("UserId"));
            for item_12 in var_11 {
                #[allow(unused_mut)]
                let mut entry_14 = list_13.entry();
                entry_14.string(item_12);
            }
            list_13.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("ClientToken");
    if let Some(var_16) = &input.client_token {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TagSpecification");
    if let Some(var_18) = &input.tag_specifications {
        if !var_18.is_empty() {
            let mut list_20 = scope_17.start_list(true, Some("item"));
            for item_19 in var_18 {
                #[allow(unused_mut)]
                let mut entry_21 = list_20.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_21, item_19)?;
            }
            list_20.finish();
        }
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
