// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_mac_modification_task(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::MacModificationTask, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MacModificationTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#MacModificationTask$InstanceId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1);
            }
            ,
            s if s.matches("macModificationTaskId") /* MacModificationTaskId com.amazonaws.ec2#MacModificationTask$MacModificationTaskId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_mac_modification_task_id(var_2);
            }
            ,
            s if s.matches("macSystemIntegrityProtectionConfig") /* MacSystemIntegrityProtectionConfig com.amazonaws.ec2#MacModificationTask$MacSystemIntegrityProtectionConfig */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_mac_system_integrity_protection_configuration::de_mac_system_integrity_protection_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_mac_system_integrity_protection_config(var_3);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#MacModificationTask$StartTime */ =>  {
                let var_4 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_4);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#MacModificationTask$Tags */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_5);
            }
            ,
            s if s.matches("taskState") /* TaskState com.amazonaws.ec2#MacModificationTask$TaskState */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::MacModificationTaskState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::MacModificationTaskState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_task_state(var_6);
            }
            ,
            s if s.matches("taskType") /* TaskType com.amazonaws.ec2#MacModificationTask$TaskType */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::MacModificationTaskType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::MacModificationTaskType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_task_type(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
