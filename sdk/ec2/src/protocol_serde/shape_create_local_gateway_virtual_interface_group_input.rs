// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_local_gateway_virtual_interface_group_input_input_input(
    input: &crate::operation::create_local_gateway_virtual_interface_group::CreateLocalGatewayVirtualInterfaceGroupInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayVirtualInterfaceGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("LocalGatewayId");
    if let Some(var_2) = &input.local_gateway_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("LocalBgpAsn");
    if let Some(var_4) = &input.local_bgp_asn {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("LocalBgpAsnExtended");
    if let Some(var_6) = &input.local_bgp_asn_extended {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("TagSpecification");
    if let Some(var_8) = &input.tag_specifications {
        if !var_8.is_empty() {
            let mut list_10 = scope_7.start_list(true, Some("item"));
            for item_9 in var_8 {
                #[allow(unused_mut)]
                let mut entry_11 = list_10.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_11, item_9)?;
            }
            list_10.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("DryRun");
    if let Some(var_13) = &input.dry_run {
        scope_12.boolean(*var_13);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
