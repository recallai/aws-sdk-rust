// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_authorize_security_group_egress_input_input_input(
    input: &crate::operation::authorize_security_group_egress::AuthorizeSecurityGroupEgressInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TagSpecification");
    if let Some(var_2) = &input.tag_specifications {
        if !var_2.is_empty() {
            let mut list_4 = scope_1.start_list(true, Some("item"));
            for item_3 in var_2 {
                #[allow(unused_mut)]
                let mut entry_5 = list_4.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_5, item_3)?;
            }
            list_4.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("DryRun");
    if let Some(var_7) = &input.dry_run {
        scope_6.boolean(*var_7);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("GroupId");
    if let Some(var_9) = &input.group_id {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_11) = &input.source_security_group_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_13) = &input.source_security_group_owner_id {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("IpProtocol");
    if let Some(var_15) = &input.ip_protocol {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("FromPort");
    if let Some(var_17) = &input.from_port {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ToPort");
    if let Some(var_19) = &input.to_port {
        scope_18.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("CidrIp");
    if let Some(var_21) = &input.cidr_ip {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("IpPermissions");
    if let Some(var_23) = &input.ip_permissions {
        if !var_23.is_empty() {
            let mut list_25 = scope_22.start_list(true, Some("item"));
            for item_24 in var_23 {
                #[allow(unused_mut)]
                let mut entry_26 = list_25.entry();
                crate::protocol_serde::shape_ip_permission::ser_ip_permission(entry_26, item_24)?;
            }
            list_25.finish();
        }
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
