// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_image_input_input_input(
    input: &crate::operation::register_image::RegisterImageInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ImageLocation");
    if let Some(var_2) = &input.image_location {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("BillingProduct");
    if let Some(var_4) = &input.billing_products {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                entry_7.string(item_5);
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("BootMode");
    if let Some(var_9) = &input.boot_mode {
        scope_8.string(var_9.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("TpmSupport");
    if let Some(var_11) = &input.tpm_support {
        scope_10.string(var_11.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("UefiData");
    if let Some(var_13) = &input.uefi_data {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ImdsSupport");
    if let Some(var_15) = &input.imds_support {
        scope_14.string(var_15.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("TagSpecification");
    if let Some(var_17) = &input.tag_specifications {
        if !var_17.is_empty() {
            let mut list_19 = scope_16.start_list(true, Some("item"));
            for item_18 in var_17 {
                #[allow(unused_mut)]
                let mut entry_20 = list_19.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_20, item_18)?;
            }
            list_19.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DryRun");
    if let Some(var_22) = &input.dry_run {
        scope_21.boolean(*var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Name");
    if let Some(var_24) = &input.name {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("Description");
    if let Some(var_26) = &input.description {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Architecture");
    if let Some(var_28) = &input.architecture {
        scope_27.string(var_28.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("KernelId");
    if let Some(var_30) = &input.kernel_id {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("RamdiskId");
    if let Some(var_32) = &input.ramdisk_id {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("RootDeviceName");
    if let Some(var_34) = &input.root_device_name {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("BlockDeviceMapping");
    if let Some(var_36) = &input.block_device_mappings {
        if !var_36.is_empty() {
            let mut list_38 = scope_35.start_list(true, Some("BlockDeviceMapping"));
            for item_37 in var_36 {
                #[allow(unused_mut)]
                let mut entry_39 = list_38.entry();
                crate::protocol_serde::shape_block_device_mapping::ser_block_device_mapping(entry_39, item_37)?;
            }
            list_38.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("VirtualizationType");
    if let Some(var_41) = &input.virtualization_type {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("SriovNetSupport");
    if let Some(var_43) = &input.sriov_net_support {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("EnaSupport");
    if let Some(var_45) = &input.ena_support {
        scope_44.boolean(*var_45);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
