// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_assign_ipv6_addresses_input_input_input(
    input: &crate::operation::assign_ipv6_addresses::AssignIpv6AddressesInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_2) = &input.ipv6_prefix_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Ipv6Prefix");
    if let Some(var_4) = &input.ipv6_prefixes {
        if !var_4.is_empty() {
            let mut list_6 = scope_3.start_list(true, Some("item"));
            for item_5 in var_4 {
                #[allow(unused_mut)]
                let mut entry_7 = list_6.entry();
                entry_7.string(item_5);
            }
            list_6.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("NetworkInterfaceId");
    if let Some(var_9) = &input.network_interface_id {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Ipv6Addresses");
    if let Some(var_11) = &input.ipv6_addresses {
        if !var_11.is_empty() {
            let mut list_13 = scope_10.start_list(true, Some("item"));
            for item_12 in var_11 {
                #[allow(unused_mut)]
                let mut entry_14 = list_13.entry();
                entry_14.string(item_12);
            }
            list_13.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Ipv6AddressCount");
    if let Some(var_16) = &input.ipv6_address_count {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
