// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_verified_access_instance_open_vpn_client_configuration(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("config") /* Config com.amazonaws.ec2#VerifiedAccessInstanceOpenVpnClientConfiguration$Config */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_config(var_1);
            }
            ,
            s if s.matches("routeSet") /* Routes com.amazonaws.ec2#VerifiedAccessInstanceOpenVpnClientConfiguration$Routes */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_verified_access_instance_open_vpn_client_configuration_route_list::de_verified_access_instance_open_vpn_client_configuration_route_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
