// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_route_server_peer::_delete_route_server_peer_output::DeleteRouteServerPeerOutputBuilder;

pub use crate::operation::delete_route_server_peer::_delete_route_server_peer_input::DeleteRouteServerPeerInputBuilder;

impl crate::operation::delete_route_server_peer::builders::DeleteRouteServerPeerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_route_server_peer::DeleteRouteServerPeerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_route_server_peer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteRouteServerPeer`.
///
/// <p>Deletes the specified BGP peer from a route server.</p>
/// <p>A route server peer is a session between a route server endpoint and the device deployed in Amazon Web Services (such as a firewall appliance or other network security function running on an EC2 instance). The device must meet these requirements:</p>
/// <ul>
/// <li>
/// <p>Have an elastic network interface in the VPC</p></li>
/// <li>
/// <p>Support BGP (Border Gateway Protocol)</p></li>
/// <li>
/// <p>Can initiate BGP sessions</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteRouteServerPeerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_route_server_peer::builders::DeleteRouteServerPeerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerOutput,
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerError,
    > for DeleteRouteServerPeerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_route_server_peer::DeleteRouteServerPeerOutput,
            crate::operation::delete_route_server_peer::DeleteRouteServerPeerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteRouteServerPeerFluentBuilder {
    /// Creates a new `DeleteRouteServerPeerFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteRouteServerPeer as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_route_server_peer::builders::DeleteRouteServerPeerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_route_server_peer::DeleteRouteServerPeerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_route_server_peer::DeleteRouteServerPeer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_route_server_peer::DeleteRouteServerPeer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerOutput,
        crate::operation::delete_route_server_peer::DeleteRouteServerPeerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the route server peer to delete.</p>
    pub fn route_server_peer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.route_server_peer_id(input.into());
        self
    }
    /// <p>The ID of the route server peer to delete.</p>
    pub fn set_route_server_peer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_route_server_peer_id(input);
        self
    }
    /// <p>The ID of the route server peer to delete.</p>
    pub fn get_route_server_peer_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_route_server_peer_id()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
