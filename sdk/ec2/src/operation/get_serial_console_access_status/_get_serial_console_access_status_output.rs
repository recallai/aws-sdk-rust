// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSerialConsoleAccessStatusOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub serial_console_access_enabled: ::std::option::Option<bool>,
    /// <p>The entity that manages access to the serial console. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - Access is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - Access is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub managed_by: ::std::option::Option<crate::types::ManagedBy>,
    _request_id: Option<String>,
}
impl GetSerialConsoleAccessStatusOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn serial_console_access_enabled(&self) -> ::std::option::Option<bool> {
        self.serial_console_access_enabled
    }
    /// <p>The entity that manages access to the serial console. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - Access is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - Access is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(&self) -> ::std::option::Option<&crate::types::ManagedBy> {
        self.managed_by.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetSerialConsoleAccessStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSerialConsoleAccessStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSerialConsoleAccessStatusOutput`](crate::operation::get_serial_console_access_status::GetSerialConsoleAccessStatusOutput).
    pub fn builder() -> crate::operation::get_serial_console_access_status::builders::GetSerialConsoleAccessStatusOutputBuilder {
        crate::operation::get_serial_console_access_status::builders::GetSerialConsoleAccessStatusOutputBuilder::default()
    }
}

/// A builder for [`GetSerialConsoleAccessStatusOutput`](crate::operation::get_serial_console_access_status::GetSerialConsoleAccessStatusOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetSerialConsoleAccessStatusOutputBuilder {
    pub(crate) serial_console_access_enabled: ::std::option::Option<bool>,
    pub(crate) managed_by: ::std::option::Option<crate::types::ManagedBy>,
    _request_id: Option<String>,
}
impl GetSerialConsoleAccessStatusOutputBuilder {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn serial_console_access_enabled(mut self, input: bool) -> Self {
        self.serial_console_access_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn set_serial_console_access_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.serial_console_access_enabled = input;
        self
    }
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn get_serial_console_access_enabled(&self) -> &::std::option::Option<bool> {
        &self.serial_console_access_enabled
    }
    /// <p>The entity that manages access to the serial console. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - Access is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - Access is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(mut self, input: crate::types::ManagedBy) -> Self {
        self.managed_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that manages access to the serial console. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - Access is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - Access is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn set_managed_by(mut self, input: ::std::option::Option<crate::types::ManagedBy>) -> Self {
        self.managed_by = input;
        self
    }
    /// <p>The entity that manages access to the serial console. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - Access is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - Access is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn get_managed_by(&self) -> &::std::option::Option<crate::types::ManagedBy> {
        &self.managed_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSerialConsoleAccessStatusOutput`](crate::operation::get_serial_console_access_status::GetSerialConsoleAccessStatusOutput).
    pub fn build(self) -> crate::operation::get_serial_console_access_status::GetSerialConsoleAccessStatusOutput {
        crate::operation::get_serial_console_access_status::GetSerialConsoleAccessStatusOutput {
            serial_console_access_enabled: self.serial_console_access_enabled,
            managed_by: self.managed_by,
            _request_id: self._request_id,
        }
    }
}
