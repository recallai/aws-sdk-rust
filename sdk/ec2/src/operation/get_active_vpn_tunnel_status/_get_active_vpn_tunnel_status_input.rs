// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetActiveVpnTunnelStatusInput {
    /// <p>The ID of the VPN connection for which to retrieve the active tunnel status.</p>
    pub vpn_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The external IP address of the VPN tunnel for which to retrieve the active status.</p>
    pub vpn_tunnel_outside_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl GetActiveVpnTunnelStatusInput {
    /// <p>The ID of the VPN connection for which to retrieve the active tunnel status.</p>
    pub fn vpn_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpn_connection_id.as_deref()
    }
    /// <p>The external IP address of the VPN tunnel for which to retrieve the active status.</p>
    pub fn vpn_tunnel_outside_ip_address(&self) -> ::std::option::Option<&str> {
        self.vpn_tunnel_outside_ip_address.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl GetActiveVpnTunnelStatusInput {
    /// Creates a new builder-style object to manufacture [`GetActiveVpnTunnelStatusInput`](crate::operation::get_active_vpn_tunnel_status::GetActiveVpnTunnelStatusInput).
    pub fn builder() -> crate::operation::get_active_vpn_tunnel_status::builders::GetActiveVpnTunnelStatusInputBuilder {
        crate::operation::get_active_vpn_tunnel_status::builders::GetActiveVpnTunnelStatusInputBuilder::default()
    }
}

/// A builder for [`GetActiveVpnTunnelStatusInput`](crate::operation::get_active_vpn_tunnel_status::GetActiveVpnTunnelStatusInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetActiveVpnTunnelStatusInputBuilder {
    pub(crate) vpn_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpn_tunnel_outside_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl GetActiveVpnTunnelStatusInputBuilder {
    /// <p>The ID of the VPN connection for which to retrieve the active tunnel status.</p>
    /// This field is required.
    pub fn vpn_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpn_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPN connection for which to retrieve the active tunnel status.</p>
    pub fn set_vpn_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpn_connection_id = input;
        self
    }
    /// <p>The ID of the VPN connection for which to retrieve the active tunnel status.</p>
    pub fn get_vpn_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpn_connection_id
    }
    /// <p>The external IP address of the VPN tunnel for which to retrieve the active status.</p>
    /// This field is required.
    pub fn vpn_tunnel_outside_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpn_tunnel_outside_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external IP address of the VPN tunnel for which to retrieve the active status.</p>
    pub fn set_vpn_tunnel_outside_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpn_tunnel_outside_ip_address = input;
        self
    }
    /// <p>The external IP address of the VPN tunnel for which to retrieve the active status.</p>
    pub fn get_vpn_tunnel_outside_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpn_tunnel_outside_ip_address
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`GetActiveVpnTunnelStatusInput`](crate::operation::get_active_vpn_tunnel_status::GetActiveVpnTunnelStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_active_vpn_tunnel_status::GetActiveVpnTunnelStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_active_vpn_tunnel_status::GetActiveVpnTunnelStatusInput {
            vpn_connection_id: self.vpn_connection_id,
            vpn_tunnel_outside_ip_address: self.vpn_tunnel_outside_ip_address,
            dry_run: self.dry_run,
        })
    }
}
