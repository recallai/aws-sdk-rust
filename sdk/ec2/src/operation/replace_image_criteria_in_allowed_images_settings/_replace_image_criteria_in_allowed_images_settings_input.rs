// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplaceImageCriteriaInAllowedImagesSettingsInput {
    /// <p>The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub image_criteria: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterionRequest>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl ReplaceImageCriteriaInAllowedImagesSettingsInput {
    /// <p>The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_criteria.is_none()`.
    pub fn image_criteria(&self) -> &[crate::types::ImageCriterionRequest] {
        self.image_criteria.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl ReplaceImageCriteriaInAllowedImagesSettingsInput {
    /// Creates a new builder-style object to manufacture [`ReplaceImageCriteriaInAllowedImagesSettingsInput`](crate::operation::replace_image_criteria_in_allowed_images_settings::ReplaceImageCriteriaInAllowedImagesSettingsInput).
    pub fn builder(
    ) -> crate::operation::replace_image_criteria_in_allowed_images_settings::builders::ReplaceImageCriteriaInAllowedImagesSettingsInputBuilder {
        crate::operation::replace_image_criteria_in_allowed_images_settings::builders::ReplaceImageCriteriaInAllowedImagesSettingsInputBuilder::default()
    }
}

/// A builder for [`ReplaceImageCriteriaInAllowedImagesSettingsInput`](crate::operation::replace_image_criteria_in_allowed_images_settings::ReplaceImageCriteriaInAllowedImagesSettingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplaceImageCriteriaInAllowedImagesSettingsInputBuilder {
    pub(crate) image_criteria: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterionRequest>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl ReplaceImageCriteriaInAllowedImagesSettingsInputBuilder {
    /// Appends an item to `image_criteria`.
    ///
    /// To override the contents of this collection use [`set_image_criteria`](Self::set_image_criteria).
    ///
    /// <p>The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn image_criteria(mut self, input: crate::types::ImageCriterionRequest) -> Self {
        let mut v = self.image_criteria.unwrap_or_default();
        v.push(input);
        self.image_criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn set_image_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterionRequest>>) -> Self {
        self.image_criteria = input;
        self
    }
    /// <p>The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn get_image_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageCriterionRequest>> {
        &self.image_criteria
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`ReplaceImageCriteriaInAllowedImagesSettingsInput`](crate::operation::replace_image_criteria_in_allowed_images_settings::ReplaceImageCriteriaInAllowedImagesSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::replace_image_criteria_in_allowed_images_settings::ReplaceImageCriteriaInAllowedImagesSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::replace_image_criteria_in_allowed_images_settings::ReplaceImageCriteriaInAllowedImagesSettingsInput {
                image_criteria: self.image_criteria,
                dry_run: self.dry_run,
            },
        )
    }
}
