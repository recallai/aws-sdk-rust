// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_vpc_block_public_access_exclusion::_delete_vpc_block_public_access_exclusion_output::DeleteVpcBlockPublicAccessExclusionOutputBuilder;

pub use crate::operation::delete_vpc_block_public_access_exclusion::_delete_vpc_block_public_access_exclusion_input::DeleteVpcBlockPublicAccessExclusionInputBuilder;

impl crate::operation::delete_vpc_block_public_access_exclusion::builders::DeleteVpcBlockPublicAccessExclusionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_vpc_block_public_access_exclusion();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteVpcBlockPublicAccessExclusion`.
///
/// <p>Delete a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the accountâ€™s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteVpcBlockPublicAccessExclusionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_vpc_block_public_access_exclusion::builders::DeleteVpcBlockPublicAccessExclusionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionOutput,
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionError,
    > for DeleteVpcBlockPublicAccessExclusionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionOutput,
            crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteVpcBlockPublicAccessExclusionFluentBuilder {
    /// Creates a new `DeleteVpcBlockPublicAccessExclusionFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteVpcBlockPublicAccessExclusion as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_vpc_block_public_access_exclusion::builders::DeleteVpcBlockPublicAccessExclusionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusion::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionOutput,
        crate::operation::delete_vpc_block_public_access_exclusion::DeleteVpcBlockPublicAccessExclusionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the exclusion.</p>
    pub fn exclusion_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.exclusion_id(input.into());
        self
    }
    /// <p>The ID of the exclusion.</p>
    pub fn set_exclusion_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_exclusion_id(input);
        self
    }
    /// <p>The ID of the exclusion.</p>
    pub fn get_exclusion_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_exclusion_id()
    }
}
