// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDeclarativePoliciesReportSummaryOutput {
    /// <p>The ID of the report.</p>
    pub report_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon S3 bucket where the report is located.</p>
    pub s3_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The prefix for your S3 object.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The root ID, organizational unit ID, or account ID.</p>
    /// <p>Format:</p>
    /// <ul>
    /// <li>
    /// <p>For root: <code>r-ab12</code></p></li>
    /// <li>
    /// <p>For OU: <code>ou-ab12-cdef1234</code></p></li>
    /// <li>
    /// <p>For account: <code>123456789012</code></p></li>
    /// </ul>
    pub target_id: ::std::option::Option<::std::string::String>,
    /// <p>The time when the report generation started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the report generation ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The total number of accounts associated with the specified <code>targetId</code>.</p>
    pub number_of_accounts: ::std::option::Option<i32>,
    /// <p>The number of accounts where attributes could not be retrieved in any Region.</p>
    pub number_of_failed_accounts: ::std::option::Option<i32>,
    /// <p>The attributes described in the report.</p>
    pub attribute_summaries: ::std::option::Option<::std::vec::Vec<crate::types::AttributeSummary>>,
    _request_id: Option<String>,
}
impl GetDeclarativePoliciesReportSummaryOutput {
    /// <p>The ID of the report.</p>
    pub fn report_id(&self) -> ::std::option::Option<&str> {
        self.report_id.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket where the report is located.</p>
    pub fn s3_bucket(&self) -> ::std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The prefix for your S3 object.</p>
    pub fn s3_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
    /// <p>The root ID, organizational unit ID, or account ID.</p>
    /// <p>Format:</p>
    /// <ul>
    /// <li>
    /// <p>For root: <code>r-ab12</code></p></li>
    /// <li>
    /// <p>For OU: <code>ou-ab12-cdef1234</code></p></li>
    /// <li>
    /// <p>For account: <code>123456789012</code></p></li>
    /// </ul>
    pub fn target_id(&self) -> ::std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p>The time when the report generation started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time when the report generation ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The total number of accounts associated with the specified <code>targetId</code>.</p>
    pub fn number_of_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_accounts
    }
    /// <p>The number of accounts where attributes could not be retrieved in any Region.</p>
    pub fn number_of_failed_accounts(&self) -> ::std::option::Option<i32> {
        self.number_of_failed_accounts
    }
    /// <p>The attributes described in the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_summaries.is_none()`.
    pub fn attribute_summaries(&self) -> &[crate::types::AttributeSummary] {
        self.attribute_summaries.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetDeclarativePoliciesReportSummaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeclarativePoliciesReportSummaryOutput {
    /// Creates a new builder-style object to manufacture [`GetDeclarativePoliciesReportSummaryOutput`](crate::operation::get_declarative_policies_report_summary::GetDeclarativePoliciesReportSummaryOutput).
    pub fn builder() -> crate::operation::get_declarative_policies_report_summary::builders::GetDeclarativePoliciesReportSummaryOutputBuilder {
        crate::operation::get_declarative_policies_report_summary::builders::GetDeclarativePoliciesReportSummaryOutputBuilder::default()
    }
}

/// A builder for [`GetDeclarativePoliciesReportSummaryOutput`](crate::operation::get_declarative_policies_report_summary::GetDeclarativePoliciesReportSummaryOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDeclarativePoliciesReportSummaryOutputBuilder {
    pub(crate) report_id: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) number_of_accounts: ::std::option::Option<i32>,
    pub(crate) number_of_failed_accounts: ::std::option::Option<i32>,
    pub(crate) attribute_summaries: ::std::option::Option<::std::vec::Vec<crate::types::AttributeSummary>>,
    _request_id: Option<String>,
}
impl GetDeclarativePoliciesReportSummaryOutputBuilder {
    /// <p>The ID of the report.</p>
    pub fn report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the report.</p>
    pub fn set_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_id = input;
        self
    }
    /// <p>The ID of the report.</p>
    pub fn get_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_id
    }
    /// <p>The name of the Amazon S3 bucket where the report is located.</p>
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where the report is located.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket where the report is located.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p>The prefix for your S3 object.</p>
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix for your S3 object.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The prefix for your S3 object.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// <p>The root ID, organizational unit ID, or account ID.</p>
    /// <p>Format:</p>
    /// <ul>
    /// <li>
    /// <p>For root: <code>r-ab12</code></p></li>
    /// <li>
    /// <p>For OU: <code>ou-ab12-cdef1234</code></p></li>
    /// <li>
    /// <p>For account: <code>123456789012</code></p></li>
    /// </ul>
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The root ID, organizational unit ID, or account ID.</p>
    /// <p>Format:</p>
    /// <ul>
    /// <li>
    /// <p>For root: <code>r-ab12</code></p></li>
    /// <li>
    /// <p>For OU: <code>ou-ab12-cdef1234</code></p></li>
    /// <li>
    /// <p>For account: <code>123456789012</code></p></li>
    /// </ul>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The root ID, organizational unit ID, or account ID.</p>
    /// <p>Format:</p>
    /// <ul>
    /// <li>
    /// <p>For root: <code>r-ab12</code></p></li>
    /// <li>
    /// <p>For OU: <code>ou-ab12-cdef1234</code></p></li>
    /// <li>
    /// <p>For account: <code>123456789012</code></p></li>
    /// </ul>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>The time when the report generation started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the report generation started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time when the report generation started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time when the report generation ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the report generation ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time when the report generation ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The total number of accounts associated with the specified <code>targetId</code>.</p>
    pub fn number_of_accounts(mut self, input: i32) -> Self {
        self.number_of_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of accounts associated with the specified <code>targetId</code>.</p>
    pub fn set_number_of_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_accounts = input;
        self
    }
    /// <p>The total number of accounts associated with the specified <code>targetId</code>.</p>
    pub fn get_number_of_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_accounts
    }
    /// <p>The number of accounts where attributes could not be retrieved in any Region.</p>
    pub fn number_of_failed_accounts(mut self, input: i32) -> Self {
        self.number_of_failed_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of accounts where attributes could not be retrieved in any Region.</p>
    pub fn set_number_of_failed_accounts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_failed_accounts = input;
        self
    }
    /// <p>The number of accounts where attributes could not be retrieved in any Region.</p>
    pub fn get_number_of_failed_accounts(&self) -> &::std::option::Option<i32> {
        &self.number_of_failed_accounts
    }
    /// Appends an item to `attribute_summaries`.
    ///
    /// To override the contents of this collection use [`set_attribute_summaries`](Self::set_attribute_summaries).
    ///
    /// <p>The attributes described in the report.</p>
    pub fn attribute_summaries(mut self, input: crate::types::AttributeSummary) -> Self {
        let mut v = self.attribute_summaries.unwrap_or_default();
        v.push(input);
        self.attribute_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The attributes described in the report.</p>
    pub fn set_attribute_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeSummary>>) -> Self {
        self.attribute_summaries = input;
        self
    }
    /// <p>The attributes described in the report.</p>
    pub fn get_attribute_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeSummary>> {
        &self.attribute_summaries
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeclarativePoliciesReportSummaryOutput`](crate::operation::get_declarative_policies_report_summary::GetDeclarativePoliciesReportSummaryOutput).
    pub fn build(self) -> crate::operation::get_declarative_policies_report_summary::GetDeclarativePoliciesReportSummaryOutput {
        crate::operation::get_declarative_policies_report_summary::GetDeclarativePoliciesReportSummaryOutput {
            report_id: self.report_id,
            s3_bucket: self.s3_bucket,
            s3_prefix: self.s3_prefix,
            target_id: self.target_id,
            start_time: self.start_time,
            end_time: self.end_time,
            number_of_accounts: self.number_of_accounts,
            number_of_failed_accounts: self.number_of_failed_accounts,
            attribute_summaries: self.attribute_summaries,
            _request_id: self._request_id,
        }
    }
}
