// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCapacityBlocksInput {
    /// <p>The IDs of the Capacity Blocks.</p>
    pub capacity_block_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>capacity-block-id</code> - The ID of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>ultraserver-type</code> - The Capacity Block type. The type can be <code>instances</code> or <code>ultraservers</code>.</p></li>
    /// <li>
    /// <p><code>availability-zone</code> - The Availability Zone of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>start-date</code> - The date and time at which the Capacity Block was started.</p></li>
    /// <li>
    /// <p><code>end-date</code> - The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p></li>
    /// <li>
    /// <p><code>create-date</code> - The date and time at which the Capacity Block was created.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Capacity Block (<code>active</code> | <code>expired</code> | <code>unavailable</code> | <code>cancelled</code> | <code>failed</code> | <code>scheduled</code> | <code>payment-pending</code> | <code>payment-failed</code>).</p></li>
    /// <li>
    /// <p><code>tags</code> - The tags assigned to the Capacity Block.</p></li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DescribeCapacityBlocksInput {
    /// <p>The IDs of the Capacity Blocks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_block_ids.is_none()`.
    pub fn capacity_block_ids(&self) -> &[::std::string::String] {
        self.capacity_block_ids.as_deref().unwrap_or_default()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>capacity-block-id</code> - The ID of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>ultraserver-type</code> - The Capacity Block type. The type can be <code>instances</code> or <code>ultraservers</code>.</p></li>
    /// <li>
    /// <p><code>availability-zone</code> - The Availability Zone of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>start-date</code> - The date and time at which the Capacity Block was started.</p></li>
    /// <li>
    /// <p><code>end-date</code> - The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p></li>
    /// <li>
    /// <p><code>create-date</code> - The date and time at which the Capacity Block was created.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Capacity Block (<code>active</code> | <code>expired</code> | <code>unavailable</code> | <code>cancelled</code> | <code>failed</code> | <code>scheduled</code> | <code>payment-pending</code> | <code>payment-failed</code>).</p></li>
    /// <li>
    /// <p><code>tags</code> - The tags assigned to the Capacity Block.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DescribeCapacityBlocksInput {
    /// Creates a new builder-style object to manufacture [`DescribeCapacityBlocksInput`](crate::operation::describe_capacity_blocks::DescribeCapacityBlocksInput).
    pub fn builder() -> crate::operation::describe_capacity_blocks::builders::DescribeCapacityBlocksInputBuilder {
        crate::operation::describe_capacity_blocks::builders::DescribeCapacityBlocksInputBuilder::default()
    }
}

/// A builder for [`DescribeCapacityBlocksInput`](crate::operation::describe_capacity_blocks::DescribeCapacityBlocksInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeCapacityBlocksInputBuilder {
    pub(crate) capacity_block_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DescribeCapacityBlocksInputBuilder {
    /// Appends an item to `capacity_block_ids`.
    ///
    /// To override the contents of this collection use [`set_capacity_block_ids`](Self::set_capacity_block_ids).
    ///
    /// <p>The IDs of the Capacity Blocks.</p>
    pub fn capacity_block_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capacity_block_ids.unwrap_or_default();
        v.push(input.into());
        self.capacity_block_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the Capacity Blocks.</p>
    pub fn set_capacity_block_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capacity_block_ids = input;
        self
    }
    /// <p>The IDs of the Capacity Blocks.</p>
    pub fn get_capacity_block_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capacity_block_ids
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>capacity-block-id</code> - The ID of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>ultraserver-type</code> - The Capacity Block type. The type can be <code>instances</code> or <code>ultraservers</code>.</p></li>
    /// <li>
    /// <p><code>availability-zone</code> - The Availability Zone of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>start-date</code> - The date and time at which the Capacity Block was started.</p></li>
    /// <li>
    /// <p><code>end-date</code> - The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p></li>
    /// <li>
    /// <p><code>create-date</code> - The date and time at which the Capacity Block was created.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Capacity Block (<code>active</code> | <code>expired</code> | <code>unavailable</code> | <code>cancelled</code> | <code>failed</code> | <code>scheduled</code> | <code>payment-pending</code> | <code>payment-failed</code>).</p></li>
    /// <li>
    /// <p><code>tags</code> - The tags assigned to the Capacity Block.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>capacity-block-id</code> - The ID of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>ultraserver-type</code> - The Capacity Block type. The type can be <code>instances</code> or <code>ultraservers</code>.</p></li>
    /// <li>
    /// <p><code>availability-zone</code> - The Availability Zone of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>start-date</code> - The date and time at which the Capacity Block was started.</p></li>
    /// <li>
    /// <p><code>end-date</code> - The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p></li>
    /// <li>
    /// <p><code>create-date</code> - The date and time at which the Capacity Block was created.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Capacity Block (<code>active</code> | <code>expired</code> | <code>unavailable</code> | <code>cancelled</code> | <code>failed</code> | <code>scheduled</code> | <code>payment-pending</code> | <code>payment-failed</code>).</p></li>
    /// <li>
    /// <p><code>tags</code> - The tags assigned to the Capacity Block.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>capacity-block-id</code> - The ID of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>ultraserver-type</code> - The Capacity Block type. The type can be <code>instances</code> or <code>ultraservers</code>.</p></li>
    /// <li>
    /// <p><code>availability-zone</code> - The Availability Zone of the Capacity Block.</p></li>
    /// <li>
    /// <p><code>start-date</code> - The date and time at which the Capacity Block was started.</p></li>
    /// <li>
    /// <p><code>end-date</code> - The date and time at which the Capacity Block expires. When a Capacity Block expires, all instances in the Capacity Block are terminated.</p></li>
    /// <li>
    /// <p><code>create-date</code> - The date and time at which the Capacity Block was created.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Capacity Block (<code>active</code> | <code>expired</code> | <code>unavailable</code> | <code>cancelled</code> | <code>failed</code> | <code>scheduled</code> | <code>payment-pending</code> | <code>payment-failed</code>).</p></li>
    /// <li>
    /// <p><code>tags</code> - The tags assigned to the Capacity Block.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DescribeCapacityBlocksInput`](crate::operation::describe_capacity_blocks::DescribeCapacityBlocksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_capacity_blocks::DescribeCapacityBlocksInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_capacity_blocks::DescribeCapacityBlocksInput {
            capacity_block_ids: self.capacity_block_ids,
            next_token: self.next_token,
            max_results: self.max_results,
            filters: self.filters,
            dry_run: self.dry_run,
        })
    }
}
