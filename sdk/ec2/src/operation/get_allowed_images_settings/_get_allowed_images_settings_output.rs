// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAllowedImagesSettingsOutput {
    /// <p>The current state of the Allowed AMIs setting at the account level in the specified Amazon Web Services Region.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>disabled</code>: All AMIs are allowed.</p></li>
    /// <li>
    /// <p><code>audit-mode</code>: All AMIs are allowed, but the <code>ImageAllowed</code> field is set to <code>true</code> if the AMI would be allowed with the current list of criteria if allowed AMIs was enabled.</p></li>
    /// <li>
    /// <p><code>enabled</code>: Only AMIs matching the image criteria are discoverable and available for use.</p></li>
    /// </ul>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The list of criteria for images that are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub image_criteria: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterion>>,
    /// <p>The entity that manages the Allowed AMIs settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The Allowed AMIs settings is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The Allowed AMIs settings is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub managed_by: ::std::option::Option<crate::types::ManagedBy>,
    _request_id: Option<String>,
}
impl GetAllowedImagesSettingsOutput {
    /// <p>The current state of the Allowed AMIs setting at the account level in the specified Amazon Web Services Region.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>disabled</code>: All AMIs are allowed.</p></li>
    /// <li>
    /// <p><code>audit-mode</code>: All AMIs are allowed, but the <code>ImageAllowed</code> field is set to <code>true</code> if the AMI would be allowed with the current list of criteria if allowed AMIs was enabled.</p></li>
    /// <li>
    /// <p><code>enabled</code>: Only AMIs matching the image criteria are discoverable and available for use.</p></li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The list of criteria for images that are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_criteria.is_none()`.
    pub fn image_criteria(&self) -> &[crate::types::ImageCriterion] {
        self.image_criteria.as_deref().unwrap_or_default()
    }
    /// <p>The entity that manages the Allowed AMIs settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The Allowed AMIs settings is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The Allowed AMIs settings is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(&self) -> ::std::option::Option<&crate::types::ManagedBy> {
        self.managed_by.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetAllowedImagesSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAllowedImagesSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetAllowedImagesSettingsOutput`](crate::operation::get_allowed_images_settings::GetAllowedImagesSettingsOutput).
    pub fn builder() -> crate::operation::get_allowed_images_settings::builders::GetAllowedImagesSettingsOutputBuilder {
        crate::operation::get_allowed_images_settings::builders::GetAllowedImagesSettingsOutputBuilder::default()
    }
}

/// A builder for [`GetAllowedImagesSettingsOutput`](crate::operation::get_allowed_images_settings::GetAllowedImagesSettingsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAllowedImagesSettingsOutputBuilder {
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) image_criteria: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterion>>,
    pub(crate) managed_by: ::std::option::Option<crate::types::ManagedBy>,
    _request_id: Option<String>,
}
impl GetAllowedImagesSettingsOutputBuilder {
    /// <p>The current state of the Allowed AMIs setting at the account level in the specified Amazon Web Services Region.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>disabled</code>: All AMIs are allowed.</p></li>
    /// <li>
    /// <p><code>audit-mode</code>: All AMIs are allowed, but the <code>ImageAllowed</code> field is set to <code>true</code> if the AMI would be allowed with the current list of criteria if allowed AMIs was enabled.</p></li>
    /// <li>
    /// <p><code>enabled</code>: Only AMIs matching the image criteria are discoverable and available for use.</p></li>
    /// </ul>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the Allowed AMIs setting at the account level in the specified Amazon Web Services Region.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>disabled</code>: All AMIs are allowed.</p></li>
    /// <li>
    /// <p><code>audit-mode</code>: All AMIs are allowed, but the <code>ImageAllowed</code> field is set to <code>true</code> if the AMI would be allowed with the current list of criteria if allowed AMIs was enabled.</p></li>
    /// <li>
    /// <p><code>enabled</code>: Only AMIs matching the image criteria are discoverable and available for use.</p></li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the Allowed AMIs setting at the account level in the specified Amazon Web Services Region.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>disabled</code>: All AMIs are allowed.</p></li>
    /// <li>
    /// <p><code>audit-mode</code>: All AMIs are allowed, but the <code>ImageAllowed</code> field is set to <code>true</code> if the AMI would be allowed with the current list of criteria if allowed AMIs was enabled.</p></li>
    /// <li>
    /// <p><code>enabled</code>: Only AMIs matching the image criteria are discoverable and available for use.</p></li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// Appends an item to `image_criteria`.
    ///
    /// To override the contents of this collection use [`set_image_criteria`](Self::set_image_criteria).
    ///
    /// <p>The list of criteria for images that are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn image_criteria(mut self, input: crate::types::ImageCriterion) -> Self {
        let mut v = self.image_criteria.unwrap_or_default();
        v.push(input);
        self.image_criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of criteria for images that are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn set_image_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImageCriterion>>) -> Self {
        self.image_criteria = input;
        self
    }
    /// <p>The list of criteria for images that are discoverable and usable in the account in the specified Amazon Web Services Region.</p>
    pub fn get_image_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageCriterion>> {
        &self.image_criteria
    }
    /// <p>The entity that manages the Allowed AMIs settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The Allowed AMIs settings is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The Allowed AMIs settings is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn managed_by(mut self, input: crate::types::ManagedBy) -> Self {
        self.managed_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that manages the Allowed AMIs settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The Allowed AMIs settings is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The Allowed AMIs settings is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn set_managed_by(mut self, input: ::std::option::Option<crate::types::ManagedBy>) -> Self {
        self.managed_by = input;
        self
    }
    /// <p>The entity that manages the Allowed AMIs settings. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>account</code> - The Allowed AMIs settings is managed by the account.</p></li>
    /// <li>
    /// <p><code>declarative-policy</code> - The Allowed AMIs settings is managed by a declarative policy and can't be modified by the account.</p></li>
    /// </ul>
    pub fn get_managed_by(&self) -> &::std::option::Option<crate::types::ManagedBy> {
        &self.managed_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAllowedImagesSettingsOutput`](crate::operation::get_allowed_images_settings::GetAllowedImagesSettingsOutput).
    pub fn build(self) -> crate::operation::get_allowed_images_settings::GetAllowedImagesSettingsOutput {
        crate::operation::get_allowed_images_settings::GetAllowedImagesSettingsOutput {
            state: self.state,
            image_criteria: self.image_criteria,
            managed_by: self.managed_by,
            _request_id: self._request_id,
        }
    }
}
