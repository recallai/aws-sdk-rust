// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLocalGatewayVirtualInterfaceInput {
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub local_gateway_virtual_interface_group_id: ::std::option::Option<::std::string::String>,
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub outpost_lag_id: ::std::option::Option<::std::string::String>,
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub vlan: ::std::option::Option<i32>,
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub local_address: ::std::option::Option<::std::string::String>,
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub peer_address: ::std::option::Option<::std::string::String>,
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub peer_bgp_asn: ::std::option::Option<i32>,
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub peer_bgp_asn_extended: ::std::option::Option<i64>,
}
impl CreateLocalGatewayVirtualInterfaceInput {
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_id(&self) -> ::std::option::Option<&str> {
        self.local_gateway_virtual_interface_group_id.as_deref()
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn outpost_lag_id(&self) -> ::std::option::Option<&str> {
        self.outpost_lag_id.as_deref()
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn vlan(&self) -> ::std::option::Option<i32> {
        self.vlan
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn local_address(&self) -> ::std::option::Option<&str> {
        self.local_address.as_deref()
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn peer_address(&self) -> ::std::option::Option<&str> {
        self.peer_address.as_deref()
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn peer_bgp_asn(&self) -> ::std::option::Option<i32> {
        self.peer_bgp_asn
    }
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn peer_bgp_asn_extended(&self) -> ::std::option::Option<i64> {
        self.peer_bgp_asn_extended
    }
}
impl CreateLocalGatewayVirtualInterfaceInput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayVirtualInterfaceInput`](crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput).
    pub fn builder() -> crate::operation::create_local_gateway_virtual_interface::builders::CreateLocalGatewayVirtualInterfaceInputBuilder {
        crate::operation::create_local_gateway_virtual_interface::builders::CreateLocalGatewayVirtualInterfaceInputBuilder::default()
    }
}

/// A builder for [`CreateLocalGatewayVirtualInterfaceInput`](crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateLocalGatewayVirtualInterfaceInputBuilder {
    pub(crate) local_gateway_virtual_interface_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_lag_id: ::std::option::Option<::std::string::String>,
    pub(crate) vlan: ::std::option::Option<i32>,
    pub(crate) local_address: ::std::option::Option<::std::string::String>,
    pub(crate) peer_address: ::std::option::Option<::std::string::String>,
    pub(crate) peer_bgp_asn: ::std::option::Option<i32>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) peer_bgp_asn_extended: ::std::option::Option<i64>,
}
impl CreateLocalGatewayVirtualInterfaceInputBuilder {
    /// <p>The ID of the local gateway virtual interface group.</p>
    /// This field is required.
    pub fn local_gateway_virtual_interface_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn set_local_gateway_virtual_interface_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_gateway_virtual_interface_group_id = input;
        self
    }
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn get_local_gateway_virtual_interface_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_gateway_virtual_interface_group_id
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    /// This field is required.
    pub fn outpost_lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_lag_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn set_outpost_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_lag_id = input;
        self
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn get_outpost_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_lag_id
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    /// This field is required.
    pub fn vlan(mut self, input: i32) -> Self {
        self.vlan = ::std::option::Option::Some(input);
        self
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn set_vlan(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vlan = input;
        self
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn get_vlan(&self) -> &::std::option::Option<i32> {
        &self.vlan
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    /// This field is required.
    pub fn local_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn set_local_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_address = input;
        self
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn get_local_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_address
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    /// This field is required.
    pub fn peer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.peer_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn set_peer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.peer_address = input;
        self
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn get_peer_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.peer_address
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn peer_bgp_asn(mut self, input: i32) -> Self {
        self.peer_bgp_asn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn set_peer_bgp_asn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.peer_bgp_asn = input;
        self
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn get_peer_bgp_asn(&self) -> &::std::option::Option<i32> {
        &self.peer_bgp_asn
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn peer_bgp_asn_extended(mut self, input: i64) -> Self {
        self.peer_bgp_asn_extended = ::std::option::Option::Some(input);
        self
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn set_peer_bgp_asn_extended(mut self, input: ::std::option::Option<i64>) -> Self {
        self.peer_bgp_asn_extended = input;
        self
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn get_peer_bgp_asn_extended(&self) -> &::std::option::Option<i64> {
        &self.peer_bgp_asn_extended
    }
    /// Consumes the builder and constructs a [`CreateLocalGatewayVirtualInterfaceInput`](crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceInput {
                local_gateway_virtual_interface_group_id: self.local_gateway_virtual_interface_group_id,
                outpost_lag_id: self.outpost_lag_id,
                vlan: self.vlan,
                local_address: self.local_address,
                peer_address: self.peer_address,
                peer_bgp_asn: self.peer_bgp_asn,
                tag_specifications: self.tag_specifications,
                dry_run: self.dry_run,
                peer_bgp_asn_extended: self.peer_bgp_asn_extended,
            },
        )
    }
}
