// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_local_gateway_virtual_interface::_create_local_gateway_virtual_interface_output::CreateLocalGatewayVirtualInterfaceOutputBuilder;

pub use crate::operation::create_local_gateway_virtual_interface::_create_local_gateway_virtual_interface_input::CreateLocalGatewayVirtualInterfaceInputBuilder;

impl crate::operation::create_local_gateway_virtual_interface::builders::CreateLocalGatewayVirtualInterfaceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_local_gateway_virtual_interface();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLocalGatewayVirtualInterface`.
///
/// <p>Create a virtual interface for a local gateway.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLocalGatewayVirtualInterfaceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_local_gateway_virtual_interface::builders::CreateLocalGatewayVirtualInterfaceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceOutput,
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceError,
    > for CreateLocalGatewayVirtualInterfaceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceOutput,
            crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLocalGatewayVirtualInterfaceFluentBuilder {
    /// Creates a new `CreateLocalGatewayVirtualInterfaceFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLocalGatewayVirtualInterface as a reference.
    pub fn as_input(&self) -> &crate::operation::create_local_gateway_virtual_interface::builders::CreateLocalGatewayVirtualInterfaceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterface::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterface::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceOutput,
        crate::operation::create_local_gateway_virtual_interface::CreateLocalGatewayVirtualInterfaceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn local_gateway_virtual_interface_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.local_gateway_virtual_interface_group_id(input.into());
        self
    }
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn set_local_gateway_virtual_interface_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_local_gateway_virtual_interface_group_id(input);
        self
    }
    /// <p>The ID of the local gateway virtual interface group.</p>
    pub fn get_local_gateway_virtual_interface_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_local_gateway_virtual_interface_group_id()
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn outpost_lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.outpost_lag_id(input.into());
        self
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn set_outpost_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_outpost_lag_id(input);
        self
    }
    /// <p>References the Link Aggregation Group (LAG) that connects the Outpost to on-premises network devices.</p>
    pub fn get_outpost_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_outpost_lag_id()
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn vlan(mut self, input: i32) -> Self {
        self.inner = self.inner.vlan(input);
        self
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn set_vlan(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_vlan(input);
        self
    }
    /// <p>The virtual local area network (VLAN) used for the local gateway virtual interface.</p>
    pub fn get_vlan(&self) -> &::std::option::Option<i32> {
        self.inner.get_vlan()
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn local_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.local_address(input.into());
        self
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn set_local_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_local_address(input);
        self
    }
    /// <p>The IP address assigned to the local gateway virtual interface on the Outpost side. Only IPv4 is supported.</p>
    pub fn get_local_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_local_address()
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn peer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.peer_address(input.into());
        self
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn set_peer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_peer_address(input);
        self
    }
    /// <p>The peer IP address for the local gateway virtual interface. Only IPv4 is supported.</p>
    pub fn get_peer_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_peer_address()
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn peer_bgp_asn(mut self, input: i32) -> Self {
        self.inner = self.inner.peer_bgp_asn(input);
        self
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn set_peer_bgp_asn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_peer_bgp_asn(input);
        self
    }
    /// <p>The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.</p>
    pub fn get_peer_bgp_asn(&self) -> &::std::option::Option<i32> {
        self.inner.get_peer_bgp_asn()
    }
    ///
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to apply to a resource when the local gateway virtual interface is being created.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn peer_bgp_asn_extended(mut self, input: i64) -> Self {
        self.inner = self.inner.peer_bgp_asn_extended(input);
        self
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn set_peer_bgp_asn_extended(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_peer_bgp_asn_extended(input);
        self
    }
    /// <p>The extended 32-bit ASN of the BGP peer for use with larger ASN values.</p>
    pub fn get_peer_bgp_asn_extended(&self) -> &::std::option::Option<i64> {
        self.inner.get_peer_bgp_asn_extended()
    }
}
