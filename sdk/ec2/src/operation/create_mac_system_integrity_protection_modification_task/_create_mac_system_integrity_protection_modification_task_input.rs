// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMacSystemIntegrityProtectionModificationTaskInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p><b>\[Apple silicon Mac instances only\]</b> Specifies the following credentials:</p>
    /// <ul>
    /// <li>
    /// <p><b>Internal disk administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - Only the default administrative user (<code>aws-managed-user</code>) is supported and it is used by default. You can't specify a different administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - If you did not change the default password for <code>aws-managed-user</code>, specify the default password, which is <i>blank</i>. Otherwise, specify your password.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b>Amazon EBS root volume administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - If you did not change the default administrative user, specify <code>ec2-user</code>. Otherwise, specify the username for your administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - Specify the password for the administrative user.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>The credentials must be specified in the following JSON format:</p>
    /// <p><code>{ "internalDiskPassword":"<i>internal-disk-admin_password</i>", "rootVolumeUsername":"<i>root-volume-admin_username</i>", "rootVolumepassword":"<i>root-volume-admin_password</i>" }</code></p>
    pub mac_credentials: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the overrides to selectively enable or disable individual SIP settings. The individual settings you specify here override the overall SIP status you specify for <b>MacSystemIntegrityProtectionStatus</b>.</p>
    pub mac_system_integrity_protection_configuration: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfigurationRequest>,
    /// <p>Specifies the overall SIP status for the instance. To enable all SIP settings, specify <code>enabled</code>. To disable all SIP settings, specify <code>disabled</code>.</p>
    pub mac_system_integrity_protection_status: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    /// <p>Specifies tags to apply to the SIP modification task.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateMacSystemIntegrityProtectionModificationTaskInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p><b>\[Apple silicon Mac instances only\]</b> Specifies the following credentials:</p>
    /// <ul>
    /// <li>
    /// <p><b>Internal disk administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - Only the default administrative user (<code>aws-managed-user</code>) is supported and it is used by default. You can't specify a different administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - If you did not change the default password for <code>aws-managed-user</code>, specify the default password, which is <i>blank</i>. Otherwise, specify your password.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b>Amazon EBS root volume administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - If you did not change the default administrative user, specify <code>ec2-user</code>. Otherwise, specify the username for your administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - Specify the password for the administrative user.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>The credentials must be specified in the following JSON format:</p>
    /// <p><code>{ "internalDiskPassword":"<i>internal-disk-admin_password</i>", "rootVolumeUsername":"<i>root-volume-admin_username</i>", "rootVolumepassword":"<i>root-volume-admin_password</i>" }</code></p>
    pub fn mac_credentials(&self) -> ::std::option::Option<&str> {
        self.mac_credentials.as_deref()
    }
    /// <p>Specifies the overrides to selectively enable or disable individual SIP settings. The individual settings you specify here override the overall SIP status you specify for <b>MacSystemIntegrityProtectionStatus</b>.</p>
    pub fn mac_system_integrity_protection_configuration(
        &self,
    ) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionConfigurationRequest> {
        self.mac_system_integrity_protection_configuration.as_ref()
    }
    /// <p>Specifies the overall SIP status for the instance. To enable all SIP settings, specify <code>enabled</code>. To disable all SIP settings, specify <code>disabled</code>.</p>
    pub fn mac_system_integrity_protection_status(&self) -> ::std::option::Option<&crate::types::MacSystemIntegrityProtectionSettingStatus> {
        self.mac_system_integrity_protection_status.as_ref()
    }
    /// <p>Specifies tags to apply to the SIP modification task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateMacSystemIntegrityProtectionModificationTaskInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMacSystemIntegrityProtectionModificationTaskInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("dry_run", &self.dry_run);
        formatter.field("instance_id", &self.instance_id);
        formatter.field("mac_credentials", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "mac_system_integrity_protection_configuration",
            &self.mac_system_integrity_protection_configuration,
        );
        formatter.field("mac_system_integrity_protection_status", &self.mac_system_integrity_protection_status);
        formatter.field("tag_specifications", &self.tag_specifications);
        formatter.finish()
    }
}
impl CreateMacSystemIntegrityProtectionModificationTaskInput {
    /// Creates a new builder-style object to manufacture [`CreateMacSystemIntegrityProtectionModificationTaskInput`](crate::operation::create_mac_system_integrity_protection_modification_task::CreateMacSystemIntegrityProtectionModificationTaskInput).
    pub fn builder() -> crate::operation::create_mac_system_integrity_protection_modification_task::builders::CreateMacSystemIntegrityProtectionModificationTaskInputBuilder{
        crate::operation::create_mac_system_integrity_protection_modification_task::builders::CreateMacSystemIntegrityProtectionModificationTaskInputBuilder::default()
    }
}

/// A builder for [`CreateMacSystemIntegrityProtectionModificationTaskInput`](crate::operation::create_mac_system_integrity_protection_modification_task::CreateMacSystemIntegrityProtectionModificationTaskInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateMacSystemIntegrityProtectionModificationTaskInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) mac_credentials: ::std::option::Option<::std::string::String>,
    pub(crate) mac_system_integrity_protection_configuration: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfigurationRequest>,
    pub(crate) mac_system_integrity_protection_status: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateMacSystemIntegrityProtectionModificationTaskInputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the Amazon EC2 Mac instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p><b>\[Apple silicon Mac instances only\]</b> Specifies the following credentials:</p>
    /// <ul>
    /// <li>
    /// <p><b>Internal disk administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - Only the default administrative user (<code>aws-managed-user</code>) is supported and it is used by default. You can't specify a different administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - If you did not change the default password for <code>aws-managed-user</code>, specify the default password, which is <i>blank</i>. Otherwise, specify your password.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b>Amazon EBS root volume administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - If you did not change the default administrative user, specify <code>ec2-user</code>. Otherwise, specify the username for your administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - Specify the password for the administrative user.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>The credentials must be specified in the following JSON format:</p>
    /// <p><code>{ "internalDiskPassword":"<i>internal-disk-admin_password</i>", "rootVolumeUsername":"<i>root-volume-admin_username</i>", "rootVolumepassword":"<i>root-volume-admin_password</i>" }</code></p>
    pub fn mac_credentials(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac_credentials = ::std::option::Option::Some(input.into());
        self
    }
    /// <p><b>\[Apple silicon Mac instances only\]</b> Specifies the following credentials:</p>
    /// <ul>
    /// <li>
    /// <p><b>Internal disk administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - Only the default administrative user (<code>aws-managed-user</code>) is supported and it is used by default. You can't specify a different administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - If you did not change the default password for <code>aws-managed-user</code>, specify the default password, which is <i>blank</i>. Otherwise, specify your password.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b>Amazon EBS root volume administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - If you did not change the default administrative user, specify <code>ec2-user</code>. Otherwise, specify the username for your administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - Specify the password for the administrative user.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>The credentials must be specified in the following JSON format:</p>
    /// <p><code>{ "internalDiskPassword":"<i>internal-disk-admin_password</i>", "rootVolumeUsername":"<i>root-volume-admin_username</i>", "rootVolumepassword":"<i>root-volume-admin_password</i>" }</code></p>
    pub fn set_mac_credentials(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac_credentials = input;
        self
    }
    /// <p><b>\[Apple silicon Mac instances only\]</b> Specifies the following credentials:</p>
    /// <ul>
    /// <li>
    /// <p><b>Internal disk administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - Only the default administrative user (<code>aws-managed-user</code>) is supported and it is used by default. You can't specify a different administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - If you did not change the default password for <code>aws-managed-user</code>, specify the default password, which is <i>blank</i>. Otherwise, specify your password.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b>Amazon EBS root volume administrative user</b></p>
    /// <ul>
    /// <li>
    /// <p><b>Username</b> - If you did not change the default administrative user, specify <code>ec2-user</code>. Otherwise, specify the username for your administrative user.</p></li>
    /// <li>
    /// <p><b>Password</b> - Specify the password for the administrative user.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>The credentials must be specified in the following JSON format:</p>
    /// <p><code>{ "internalDiskPassword":"<i>internal-disk-admin_password</i>", "rootVolumeUsername":"<i>root-volume-admin_username</i>", "rootVolumepassword":"<i>root-volume-admin_password</i>" }</code></p>
    pub fn get_mac_credentials(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac_credentials
    }
    /// <p>Specifies the overrides to selectively enable or disable individual SIP settings. The individual settings you specify here override the overall SIP status you specify for <b>MacSystemIntegrityProtectionStatus</b>.</p>
    pub fn mac_system_integrity_protection_configuration(mut self, input: crate::types::MacSystemIntegrityProtectionConfigurationRequest) -> Self {
        self.mac_system_integrity_protection_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the overrides to selectively enable or disable individual SIP settings. The individual settings you specify here override the overall SIP status you specify for <b>MacSystemIntegrityProtectionStatus</b>.</p>
    pub fn set_mac_system_integrity_protection_configuration(
        mut self,
        input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionConfigurationRequest>,
    ) -> Self {
        self.mac_system_integrity_protection_configuration = input;
        self
    }
    /// <p>Specifies the overrides to selectively enable or disable individual SIP settings. The individual settings you specify here override the overall SIP status you specify for <b>MacSystemIntegrityProtectionStatus</b>.</p>
    pub fn get_mac_system_integrity_protection_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionConfigurationRequest> {
        &self.mac_system_integrity_protection_configuration
    }
    /// <p>Specifies the overall SIP status for the instance. To enable all SIP settings, specify <code>enabled</code>. To disable all SIP settings, specify <code>disabled</code>.</p>
    /// This field is required.
    pub fn mac_system_integrity_protection_status(mut self, input: crate::types::MacSystemIntegrityProtectionSettingStatus) -> Self {
        self.mac_system_integrity_protection_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the overall SIP status for the instance. To enable all SIP settings, specify <code>enabled</code>. To disable all SIP settings, specify <code>disabled</code>.</p>
    pub fn set_mac_system_integrity_protection_status(
        mut self,
        input: ::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus>,
    ) -> Self {
        self.mac_system_integrity_protection_status = input;
        self
    }
    /// <p>Specifies the overall SIP status for the instance. To enable all SIP settings, specify <code>enabled</code>. To disable all SIP settings, specify <code>disabled</code>.</p>
    pub fn get_mac_system_integrity_protection_status(&self) -> &::std::option::Option<crate::types::MacSystemIntegrityProtectionSettingStatus> {
        &self.mac_system_integrity_protection_status
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>Specifies tags to apply to the SIP modification task.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies tags to apply to the SIP modification task.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>Specifies tags to apply to the SIP modification task.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// Consumes the builder and constructs a [`CreateMacSystemIntegrityProtectionModificationTaskInput`](crate::operation::create_mac_system_integrity_protection_modification_task::CreateMacSystemIntegrityProtectionModificationTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_mac_system_integrity_protection_modification_task::CreateMacSystemIntegrityProtectionModificationTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_mac_system_integrity_protection_modification_task::CreateMacSystemIntegrityProtectionModificationTaskInput {
                client_token: self.client_token,
                dry_run: self.dry_run,
                instance_id: self.instance_id,
                mac_credentials: self.mac_credentials,
                mac_system_integrity_protection_configuration: self.mac_system_integrity_protection_configuration,
                mac_system_integrity_protection_status: self.mac_system_integrity_protection_status,
                tag_specifications: self.tag_specifications,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateMacSystemIntegrityProtectionModificationTaskInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMacSystemIntegrityProtectionModificationTaskInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("dry_run", &self.dry_run);
        formatter.field("instance_id", &self.instance_id);
        formatter.field("mac_credentials", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "mac_system_integrity_protection_configuration",
            &self.mac_system_integrity_protection_configuration,
        );
        formatter.field("mac_system_integrity_protection_status", &self.mac_system_integrity_protection_status);
        formatter.field("tag_specifications", &self.tag_specifications);
        formatter.finish()
    }
}
