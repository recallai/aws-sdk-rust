// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportVerifiedAccessInstanceClientConfigurationOutput {
    /// <p>The version.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Verified Access instance.</p>
    pub verified_access_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The device trust providers.</p>
    pub device_trust_providers: ::std::option::Option<::std::vec::Vec<crate::types::DeviceTrustProviderType>>,
    /// <p>The user identity trust provider.</p>
    pub user_trust_provider: ::std::option::Option<crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration>,
    /// <p>The Open VPN configuration.</p>
    pub open_vpn_configurations: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration>>,
    _request_id: Option<String>,
}
impl ExportVerifiedAccessInstanceClientConfigurationOutput {
    /// <p>The version.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The ID of the Verified Access instance.</p>
    pub fn verified_access_instance_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_instance_id.as_deref()
    }
    /// <p>The Region.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The device trust providers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.device_trust_providers.is_none()`.
    pub fn device_trust_providers(&self) -> &[crate::types::DeviceTrustProviderType] {
        self.device_trust_providers.as_deref().unwrap_or_default()
    }
    /// <p>The user identity trust provider.</p>
    pub fn user_trust_provider(&self) -> ::std::option::Option<&crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration> {
        self.user_trust_provider.as_ref()
    }
    /// <p>The Open VPN configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.open_vpn_configurations.is_none()`.
    pub fn open_vpn_configurations(&self) -> &[crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration] {
        self.open_vpn_configurations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ExportVerifiedAccessInstanceClientConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ExportVerifiedAccessInstanceClientConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ExportVerifiedAccessInstanceClientConfigurationOutput`](crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput).
    pub fn builder(
    ) -> crate::operation::export_verified_access_instance_client_configuration::builders::ExportVerifiedAccessInstanceClientConfigurationOutputBuilder
    {
        crate::operation::export_verified_access_instance_client_configuration::builders::ExportVerifiedAccessInstanceClientConfigurationOutputBuilder::default()
    }
}

/// A builder for [`ExportVerifiedAccessInstanceClientConfigurationOutput`](crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExportVerifiedAccessInstanceClientConfigurationOutputBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) device_trust_providers: ::std::option::Option<::std::vec::Vec<crate::types::DeviceTrustProviderType>>,
    pub(crate) user_trust_provider: ::std::option::Option<crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration>,
    pub(crate) open_vpn_configurations: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration>>,
    _request_id: Option<String>,
}
impl ExportVerifiedAccessInstanceClientConfigurationOutputBuilder {
    /// <p>The version.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The ID of the Verified Access instance.</p>
    pub fn verified_access_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Verified Access instance.</p>
    pub fn set_verified_access_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_instance_id = input;
        self
    }
    /// <p>The ID of the Verified Access instance.</p>
    pub fn get_verified_access_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_instance_id
    }
    /// <p>The Region.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Appends an item to `device_trust_providers`.
    ///
    /// To override the contents of this collection use [`set_device_trust_providers`](Self::set_device_trust_providers).
    ///
    /// <p>The device trust providers.</p>
    pub fn device_trust_providers(mut self, input: crate::types::DeviceTrustProviderType) -> Self {
        let mut v = self.device_trust_providers.unwrap_or_default();
        v.push(input);
        self.device_trust_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The device trust providers.</p>
    pub fn set_device_trust_providers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeviceTrustProviderType>>) -> Self {
        self.device_trust_providers = input;
        self
    }
    /// <p>The device trust providers.</p>
    pub fn get_device_trust_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeviceTrustProviderType>> {
        &self.device_trust_providers
    }
    /// <p>The user identity trust provider.</p>
    pub fn user_trust_provider(mut self, input: crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration) -> Self {
        self.user_trust_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user identity trust provider.</p>
    pub fn set_user_trust_provider(
        mut self,
        input: ::std::option::Option<crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration>,
    ) -> Self {
        self.user_trust_provider = input;
        self
    }
    /// <p>The user identity trust provider.</p>
    pub fn get_user_trust_provider(&self) -> &::std::option::Option<crate::types::VerifiedAccessInstanceUserTrustProviderClientConfiguration> {
        &self.user_trust_provider
    }
    /// Appends an item to `open_vpn_configurations`.
    ///
    /// To override the contents of this collection use [`set_open_vpn_configurations`](Self::set_open_vpn_configurations).
    ///
    /// <p>The Open VPN configuration.</p>
    pub fn open_vpn_configurations(mut self, input: crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration) -> Self {
        let mut v = self.open_vpn_configurations.unwrap_or_default();
        v.push(input);
        self.open_vpn_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Open VPN configuration.</p>
    pub fn set_open_vpn_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration>>,
    ) -> Self {
        self.open_vpn_configurations = input;
        self
    }
    /// <p>The Open VPN configuration.</p>
    pub fn get_open_vpn_configurations(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::VerifiedAccessInstanceOpenVpnClientConfiguration>> {
        &self.open_vpn_configurations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ExportVerifiedAccessInstanceClientConfigurationOutput`](crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput {
        crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput {
            version: self.version,
            verified_access_instance_id: self.verified_access_instance_id,
            region: self.region,
            device_trust_providers: self.device_trust_providers,
            user_trust_provider: self.user_trust_provider,
            open_vpn_configurations: self.open_vpn_configurations,
            _request_id: self._request_id,
        }
    }
}
