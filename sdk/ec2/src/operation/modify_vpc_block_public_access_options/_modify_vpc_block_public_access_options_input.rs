// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyVpcBlockPublicAccessOptionsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub internet_gateway_block_mode: ::std::option::Option<crate::types::InternetGatewayBlockMode>,
}
impl ModifyVpcBlockPublicAccessOptionsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn internet_gateway_block_mode(&self) -> ::std::option::Option<&crate::types::InternetGatewayBlockMode> {
        self.internet_gateway_block_mode.as_ref()
    }
}
impl ModifyVpcBlockPublicAccessOptionsInput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcBlockPublicAccessOptionsInput`](crate::operation::modify_vpc_block_public_access_options::ModifyVpcBlockPublicAccessOptionsInput).
    pub fn builder() -> crate::operation::modify_vpc_block_public_access_options::builders::ModifyVpcBlockPublicAccessOptionsInputBuilder {
        crate::operation::modify_vpc_block_public_access_options::builders::ModifyVpcBlockPublicAccessOptionsInputBuilder::default()
    }
}

/// A builder for [`ModifyVpcBlockPublicAccessOptionsInput`](crate::operation::modify_vpc_block_public_access_options::ModifyVpcBlockPublicAccessOptionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyVpcBlockPublicAccessOptionsInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) internet_gateway_block_mode: ::std::option::Option<crate::types::InternetGatewayBlockMode>,
}
impl ModifyVpcBlockPublicAccessOptionsInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    /// This field is required.
    pub fn internet_gateway_block_mode(mut self, input: crate::types::InternetGatewayBlockMode) -> Self {
        self.internet_gateway_block_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn set_internet_gateway_block_mode(mut self, input: ::std::option::Option<crate::types::InternetGatewayBlockMode>) -> Self {
        self.internet_gateway_block_mode = input;
        self
    }
    /// <p>The mode of VPC BPA.</p>
    /// <ul>
    /// <li>
    /// <p><code>off</code>: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.</p></li>
    /// <li>
    /// <p><code>block-bidirectional</code>: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).</p></li>
    /// <li>
    /// <p><code>block-ingress</code>: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.</p></li>
    /// </ul>
    pub fn get_internet_gateway_block_mode(&self) -> &::std::option::Option<crate::types::InternetGatewayBlockMode> {
        &self.internet_gateway_block_mode
    }
    /// Consumes the builder and constructs a [`ModifyVpcBlockPublicAccessOptionsInput`](crate::operation::modify_vpc_block_public_access_options::ModifyVpcBlockPublicAccessOptionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_vpc_block_public_access_options::ModifyVpcBlockPublicAccessOptionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::modify_vpc_block_public_access_options::ModifyVpcBlockPublicAccessOptionsInput {
                dry_run: self.dry_run,
                internet_gateway_block_mode: self.internet_gateway_block_mode,
            },
        )
    }
}
