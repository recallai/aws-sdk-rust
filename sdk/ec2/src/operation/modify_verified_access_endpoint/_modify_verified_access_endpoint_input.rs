// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyVerifiedAccessEndpointInput {
    /// <p>The ID of the Verified Access endpoint.</p>
    pub verified_access_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Verified Access group.</p>
    pub verified_access_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The load balancer details if creating the Verified Access endpoint as <code>load-balancer</code>type.</p>
    pub load_balancer_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions>,
    /// <p>The network interface options.</p>
    pub network_interface_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointEniOptions>,
    /// <p>A description for the Verified Access endpoint.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The RDS options.</p>
    pub rds_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointRdsOptions>,
    /// <p>The CIDR options.</p>
    pub cidr_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointCidrOptions>,
}
impl ModifyVerifiedAccessEndpointInput {
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn verified_access_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_endpoint_id.as_deref()
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_group_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_group_id.as_deref()
    }
    /// <p>The load balancer details if creating the Verified Access endpoint as <code>load-balancer</code>type.</p>
    pub fn load_balancer_options(&self) -> ::std::option::Option<&crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions> {
        self.load_balancer_options.as_ref()
    }
    /// <p>The network interface options.</p>
    pub fn network_interface_options(&self) -> ::std::option::Option<&crate::types::ModifyVerifiedAccessEndpointEniOptions> {
        self.network_interface_options.as_ref()
    }
    /// <p>A description for the Verified Access endpoint.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The RDS options.</p>
    pub fn rds_options(&self) -> ::std::option::Option<&crate::types::ModifyVerifiedAccessEndpointRdsOptions> {
        self.rds_options.as_ref()
    }
    /// <p>The CIDR options.</p>
    pub fn cidr_options(&self) -> ::std::option::Option<&crate::types::ModifyVerifiedAccessEndpointCidrOptions> {
        self.cidr_options.as_ref()
    }
}
impl ModifyVerifiedAccessEndpointInput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessEndpointInput`](crate::operation::modify_verified_access_endpoint::ModifyVerifiedAccessEndpointInput).
    pub fn builder() -> crate::operation::modify_verified_access_endpoint::builders::ModifyVerifiedAccessEndpointInputBuilder {
        crate::operation::modify_verified_access_endpoint::builders::ModifyVerifiedAccessEndpointInputBuilder::default()
    }
}

/// A builder for [`ModifyVerifiedAccessEndpointInput`](crate::operation::modify_verified_access_endpoint::ModifyVerifiedAccessEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyVerifiedAccessEndpointInputBuilder {
    pub(crate) verified_access_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) load_balancer_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions>,
    pub(crate) network_interface_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointEniOptions>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) rds_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointRdsOptions>,
    pub(crate) cidr_options: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointCidrOptions>,
}
impl ModifyVerifiedAccessEndpointInputBuilder {
    /// <p>The ID of the Verified Access endpoint.</p>
    /// This field is required.
    pub fn verified_access_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn set_verified_access_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_endpoint_id = input;
        self
    }
    /// <p>The ID of the Verified Access endpoint.</p>
    pub fn get_verified_access_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_endpoint_id
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn set_verified_access_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_group_id = input;
        self
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn get_verified_access_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_group_id
    }
    /// <p>The load balancer details if creating the Verified Access endpoint as <code>load-balancer</code>type.</p>
    pub fn load_balancer_options(mut self, input: crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions) -> Self {
        self.load_balancer_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The load balancer details if creating the Verified Access endpoint as <code>load-balancer</code>type.</p>
    pub fn set_load_balancer_options(mut self, input: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions>) -> Self {
        self.load_balancer_options = input;
        self
    }
    /// <p>The load balancer details if creating the Verified Access endpoint as <code>load-balancer</code>type.</p>
    pub fn get_load_balancer_options(&self) -> &::std::option::Option<crate::types::ModifyVerifiedAccessEndpointLoadBalancerOptions> {
        &self.load_balancer_options
    }
    /// <p>The network interface options.</p>
    pub fn network_interface_options(mut self, input: crate::types::ModifyVerifiedAccessEndpointEniOptions) -> Self {
        self.network_interface_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network interface options.</p>
    pub fn set_network_interface_options(mut self, input: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointEniOptions>) -> Self {
        self.network_interface_options = input;
        self
    }
    /// <p>The network interface options.</p>
    pub fn get_network_interface_options(&self) -> &::std::option::Option<crate::types::ModifyVerifiedAccessEndpointEniOptions> {
        &self.network_interface_options
    }
    /// <p>A description for the Verified Access endpoint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the Verified Access endpoint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the Verified Access endpoint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The RDS options.</p>
    pub fn rds_options(mut self, input: crate::types::ModifyVerifiedAccessEndpointRdsOptions) -> Self {
        self.rds_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The RDS options.</p>
    pub fn set_rds_options(mut self, input: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointRdsOptions>) -> Self {
        self.rds_options = input;
        self
    }
    /// <p>The RDS options.</p>
    pub fn get_rds_options(&self) -> &::std::option::Option<crate::types::ModifyVerifiedAccessEndpointRdsOptions> {
        &self.rds_options
    }
    /// <p>The CIDR options.</p>
    pub fn cidr_options(mut self, input: crate::types::ModifyVerifiedAccessEndpointCidrOptions) -> Self {
        self.cidr_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIDR options.</p>
    pub fn set_cidr_options(mut self, input: ::std::option::Option<crate::types::ModifyVerifiedAccessEndpointCidrOptions>) -> Self {
        self.cidr_options = input;
        self
    }
    /// <p>The CIDR options.</p>
    pub fn get_cidr_options(&self) -> &::std::option::Option<crate::types::ModifyVerifiedAccessEndpointCidrOptions> {
        &self.cidr_options
    }
    /// Consumes the builder and constructs a [`ModifyVerifiedAccessEndpointInput`](crate::operation::modify_verified_access_endpoint::ModifyVerifiedAccessEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_verified_access_endpoint::ModifyVerifiedAccessEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_verified_access_endpoint::ModifyVerifiedAccessEndpointInput {
            verified_access_endpoint_id: self.verified_access_endpoint_id,
            verified_access_group_id: self.verified_access_group_id,
            load_balancer_options: self.load_balancer_options,
            network_interface_options: self.network_interface_options,
            description: self.description,
            client_token: self.client_token,
            dry_run: self.dry_run,
            rds_options: self.rds_options,
            cidr_options: self.cidr_options,
        })
    }
}
