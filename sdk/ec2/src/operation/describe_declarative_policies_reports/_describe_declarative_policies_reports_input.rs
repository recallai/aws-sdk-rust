// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDeclarativePoliciesReportsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>One or more report IDs.</p>
    pub report_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeDeclarativePoliciesReportsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>One or more report IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.report_ids.is_none()`.
    pub fn report_ids(&self) -> &[::std::string::String] {
        self.report_ids.as_deref().unwrap_or_default()
    }
}
impl DescribeDeclarativePoliciesReportsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDeclarativePoliciesReportsInput`](crate::operation::describe_declarative_policies_reports::DescribeDeclarativePoliciesReportsInput).
    pub fn builder() -> crate::operation::describe_declarative_policies_reports::builders::DescribeDeclarativePoliciesReportsInputBuilder {
        crate::operation::describe_declarative_policies_reports::builders::DescribeDeclarativePoliciesReportsInputBuilder::default()
    }
}

/// A builder for [`DescribeDeclarativePoliciesReportsInput`](crate::operation::describe_declarative_policies_reports::DescribeDeclarativePoliciesReportsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeDeclarativePoliciesReportsInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) report_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeDeclarativePoliciesReportsInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `report_ids`.
    ///
    /// To override the contents of this collection use [`set_report_ids`](Self::set_report_ids).
    ///
    /// <p>One or more report IDs.</p>
    pub fn report_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.report_ids.unwrap_or_default();
        v.push(input.into());
        self.report_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more report IDs.</p>
    pub fn set_report_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.report_ids = input;
        self
    }
    /// <p>One or more report IDs.</p>
    pub fn get_report_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.report_ids
    }
    /// Consumes the builder and constructs a [`DescribeDeclarativePoliciesReportsInput`](crate::operation::describe_declarative_policies_reports::DescribeDeclarativePoliciesReportsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_declarative_policies_reports::DescribeDeclarativePoliciesReportsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_declarative_policies_reports::DescribeDeclarativePoliciesReportsInput {
                dry_run: self.dry_run,
                next_token: self.next_token,
                max_results: self.max_results,
                report_ids: self.report_ids,
            },
        )
    }
}
