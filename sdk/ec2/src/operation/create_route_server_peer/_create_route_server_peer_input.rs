// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRouteServerPeerInput {
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub route_server_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address of the peer device.</p>
    pub peer_address: ::std::option::Option<::std::string::String>,
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub bgp_options: ::std::option::Option<crate::types::RouteServerBgpOptionsRequest>,
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateRouteServerPeerInput {
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn route_server_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.route_server_endpoint_id.as_deref()
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn peer_address(&self) -> ::std::option::Option<&str> {
        self.peer_address.as_deref()
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn bgp_options(&self) -> ::std::option::Option<&crate::types::RouteServerBgpOptionsRequest> {
        self.bgp_options.as_ref()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The tags to apply to the route server peer during creation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
}
impl CreateRouteServerPeerInput {
    /// Creates a new builder-style object to manufacture [`CreateRouteServerPeerInput`](crate::operation::create_route_server_peer::CreateRouteServerPeerInput).
    pub fn builder() -> crate::operation::create_route_server_peer::builders::CreateRouteServerPeerInputBuilder {
        crate::operation::create_route_server_peer::builders::CreateRouteServerPeerInputBuilder::default()
    }
}

/// A builder for [`CreateRouteServerPeerInput`](crate::operation::create_route_server_peer::CreateRouteServerPeerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRouteServerPeerInputBuilder {
    pub(crate) route_server_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) peer_address: ::std::option::Option<::std::string::String>,
    pub(crate) bgp_options: ::std::option::Option<crate::types::RouteServerBgpOptionsRequest>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateRouteServerPeerInputBuilder {
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    /// This field is required.
    pub fn route_server_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_server_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn set_route_server_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_server_endpoint_id = input;
        self
    }
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn get_route_server_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_server_endpoint_id
    }
    /// <p>The IPv4 address of the peer device.</p>
    /// This field is required.
    pub fn peer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.peer_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn set_peer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.peer_address = input;
        self
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn get_peer_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.peer_address
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    /// This field is required.
    pub fn bgp_options(mut self, input: crate::types::RouteServerBgpOptionsRequest) -> Self {
        self.bgp_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn set_bgp_options(mut self, input: ::std::option::Option<crate::types::RouteServerBgpOptionsRequest>) -> Self {
        self.bgp_options = input;
        self
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn get_bgp_options(&self) -> &::std::option::Option<crate::types::RouteServerBgpOptionsRequest> {
        &self.bgp_options
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// Consumes the builder and constructs a [`CreateRouteServerPeerInput`](crate::operation::create_route_server_peer::CreateRouteServerPeerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_route_server_peer::CreateRouteServerPeerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_route_server_peer::CreateRouteServerPeerInput {
            route_server_endpoint_id: self.route_server_endpoint_id,
            peer_address: self.peer_address,
            bgp_options: self.bgp_options,
            dry_run: self.dry_run,
            tag_specifications: self.tag_specifications,
        })
    }
}
