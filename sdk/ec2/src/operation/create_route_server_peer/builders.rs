// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_route_server_peer::_create_route_server_peer_output::CreateRouteServerPeerOutputBuilder;

pub use crate::operation::create_route_server_peer::_create_route_server_peer_input::CreateRouteServerPeerInputBuilder;

impl crate::operation::create_route_server_peer::builders::CreateRouteServerPeerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_route_server_peer::CreateRouteServerPeerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_route_server_peer::CreateRouteServerPeerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_route_server_peer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateRouteServerPeer`.
///
/// <p>Creates a new BGP peer for a specified route server endpoint.</p>
/// <p>A route server peer is a session between a route server endpoint and the device deployed in Amazon Web Services (such as a firewall appliance or other network security function running on an EC2 instance). The device must meet these requirements:</p>
/// <ul>
/// <li>
/// <p>Have an elastic network interface in the VPC</p></li>
/// <li>
/// <p>Support BGP (Border Gateway Protocol)</p></li>
/// <li>
/// <p>Can initiate BGP sessions</p></li>
/// </ul>
/// <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateRouteServerPeerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_route_server_peer::builders::CreateRouteServerPeerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_route_server_peer::CreateRouteServerPeerOutput,
        crate::operation::create_route_server_peer::CreateRouteServerPeerError,
    > for CreateRouteServerPeerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_route_server_peer::CreateRouteServerPeerOutput,
            crate::operation::create_route_server_peer::CreateRouteServerPeerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateRouteServerPeerFluentBuilder {
    /// Creates a new `CreateRouteServerPeerFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateRouteServerPeer as a reference.
    pub fn as_input(&self) -> &crate::operation::create_route_server_peer::builders::CreateRouteServerPeerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_route_server_peer::CreateRouteServerPeerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_route_server_peer::CreateRouteServerPeerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_route_server_peer::CreateRouteServerPeer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_route_server_peer::CreateRouteServerPeer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_route_server_peer::CreateRouteServerPeerOutput,
        crate::operation::create_route_server_peer::CreateRouteServerPeerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn route_server_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.route_server_endpoint_id(input.into());
        self
    }
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn set_route_server_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_route_server_endpoint_id(input);
        self
    }
    /// <p>The ID of the route server endpoint for which to create a peer.</p>
    pub fn get_route_server_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_route_server_endpoint_id()
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn peer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.peer_address(input.into());
        self
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn set_peer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_peer_address(input);
        self
    }
    /// <p>The IPv4 address of the peer device.</p>
    pub fn get_peer_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_peer_address()
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn bgp_options(mut self, input: crate::types::RouteServerBgpOptionsRequest) -> Self {
        self.inner = self.inner.bgp_options(input);
        self
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn set_bgp_options(mut self, input: ::std::option::Option<crate::types::RouteServerBgpOptionsRequest>) -> Self {
        self.inner = self.inner.set_bgp_options(input);
        self
    }
    /// <p>The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.</p>
    pub fn get_bgp_options(&self) -> &::std::option::Option<crate::types::RouteServerBgpOptionsRequest> {
        self.inner.get_bgp_options()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    ///
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the route server peer during creation.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
}
