// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeRouteServerEndpointsInput {
    /// <p>The IDs of the route server endpoints to describe.</p>
    pub route_server_endpoint_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return with a single call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>One or more filters to apply to the describe request.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DescribeRouteServerEndpointsInput {
    /// <p>The IDs of the route server endpoints to describe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.route_server_endpoint_ids.is_none()`.
    pub fn route_server_endpoint_ids(&self) -> &[::std::string::String] {
        self.route_server_endpoint_ids.as_deref().unwrap_or_default()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return with a single call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>One or more filters to apply to the describe request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DescribeRouteServerEndpointsInput {
    /// Creates a new builder-style object to manufacture [`DescribeRouteServerEndpointsInput`](crate::operation::describe_route_server_endpoints::DescribeRouteServerEndpointsInput).
    pub fn builder() -> crate::operation::describe_route_server_endpoints::builders::DescribeRouteServerEndpointsInputBuilder {
        crate::operation::describe_route_server_endpoints::builders::DescribeRouteServerEndpointsInputBuilder::default()
    }
}

/// A builder for [`DescribeRouteServerEndpointsInput`](crate::operation::describe_route_server_endpoints::DescribeRouteServerEndpointsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeRouteServerEndpointsInputBuilder {
    pub(crate) route_server_endpoint_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DescribeRouteServerEndpointsInputBuilder {
    /// Appends an item to `route_server_endpoint_ids`.
    ///
    /// To override the contents of this collection use [`set_route_server_endpoint_ids`](Self::set_route_server_endpoint_ids).
    ///
    /// <p>The IDs of the route server endpoints to describe.</p>
    pub fn route_server_endpoint_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.route_server_endpoint_ids.unwrap_or_default();
        v.push(input.into());
        self.route_server_endpoint_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the route server endpoints to describe.</p>
    pub fn set_route_server_endpoint_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.route_server_endpoint_ids = input;
        self
    }
    /// <p>The IDs of the route server endpoints to describe.</p>
    pub fn get_route_server_endpoint_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.route_server_endpoint_ids
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return with a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return with a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters to apply to the describe request.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters to apply to the describe request.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>One or more filters to apply to the describe request.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DescribeRouteServerEndpointsInput`](crate::operation::describe_route_server_endpoints::DescribeRouteServerEndpointsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_route_server_endpoints::DescribeRouteServerEndpointsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_route_server_endpoints::DescribeRouteServerEndpointsInput {
            route_server_endpoint_ids: self.route_server_endpoint_ids,
            next_token: self.next_token,
            max_results: self.max_results,
            filters: self.filters,
            dry_run: self.dry_run,
        })
    }
}
