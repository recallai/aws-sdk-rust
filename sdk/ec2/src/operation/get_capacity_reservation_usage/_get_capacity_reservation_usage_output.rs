// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCapacityReservationUsageOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The capacity is available for use.</p></li>
    /// <li>
    /// <p><code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>cancelled</code> - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p></li>
    /// <li>
    /// <p><code>failed</code> - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.</p></li>
    /// <li>
    /// <p><code>scheduled</code> - (<i>Future-dated Capacity Reservations</i>) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.</p></li>
    /// <li>
    /// <p><code>payment-pending</code> - (<i>Capacity Blocks</i>) The upfront payment has not been processed yet.</p></li>
    /// <li>
    /// <p><code>payment-failed</code> - (<i>Capacity Blocks</i>) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.</p></li>
    /// <li>
    /// <p><code>assessing</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.</p></li>
    /// <li>
    /// <p><code>delayed</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.</p></li>
    /// <li>
    /// <p><code>unsupported</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.</p></li>
    /// </ul>
    pub state: ::std::option::Option<crate::types::CapacityReservationState>,
    /// <p>Information about the Capacity Reservation usage.</p>
    pub instance_usages: ::std::option::Option<::std::vec::Vec<crate::types::InstanceUsage>>,
    _request_id: Option<String>,
}
impl GetCapacityReservationUsageOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_id(&self) -> ::std::option::Option<&str> {
        self.capacity_reservation_id.as_deref()
    }
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The capacity is available for use.</p></li>
    /// <li>
    /// <p><code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>cancelled</code> - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p></li>
    /// <li>
    /// <p><code>failed</code> - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.</p></li>
    /// <li>
    /// <p><code>scheduled</code> - (<i>Future-dated Capacity Reservations</i>) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.</p></li>
    /// <li>
    /// <p><code>payment-pending</code> - (<i>Capacity Blocks</i>) The upfront payment has not been processed yet.</p></li>
    /// <li>
    /// <p><code>payment-failed</code> - (<i>Capacity Blocks</i>) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.</p></li>
    /// <li>
    /// <p><code>assessing</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.</p></li>
    /// <li>
    /// <p><code>delayed</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.</p></li>
    /// <li>
    /// <p><code>unsupported</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.</p></li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CapacityReservationState> {
        self.state.as_ref()
    }
    /// <p>Information about the Capacity Reservation usage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_usages.is_none()`.
    pub fn instance_usages(&self) -> &[crate::types::InstanceUsage] {
        self.instance_usages.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetCapacityReservationUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCapacityReservationUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetCapacityReservationUsageOutput`](crate::operation::get_capacity_reservation_usage::GetCapacityReservationUsageOutput).
    pub fn builder() -> crate::operation::get_capacity_reservation_usage::builders::GetCapacityReservationUsageOutputBuilder {
        crate::operation::get_capacity_reservation_usage::builders::GetCapacityReservationUsageOutputBuilder::default()
    }
}

/// A builder for [`GetCapacityReservationUsageOutput`](crate::operation::get_capacity_reservation_usage::GetCapacityReservationUsageOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCapacityReservationUsageOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) state: ::std::option::Option<crate::types::CapacityReservationState>,
    pub(crate) instance_usages: ::std::option::Option<::std::vec::Vec<crate::types::InstanceUsage>>,
    _request_id: Option<String>,
}
impl GetCapacityReservationUsageOutputBuilder {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn set_capacity_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_reservation_id = input;
        self
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn get_capacity_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_reservation_id
    }
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The capacity is available for use.</p></li>
    /// <li>
    /// <p><code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>cancelled</code> - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p></li>
    /// <li>
    /// <p><code>failed</code> - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.</p></li>
    /// <li>
    /// <p><code>scheduled</code> - (<i>Future-dated Capacity Reservations</i>) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.</p></li>
    /// <li>
    /// <p><code>payment-pending</code> - (<i>Capacity Blocks</i>) The upfront payment has not been processed yet.</p></li>
    /// <li>
    /// <p><code>payment-failed</code> - (<i>Capacity Blocks</i>) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.</p></li>
    /// <li>
    /// <p><code>assessing</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.</p></li>
    /// <li>
    /// <p><code>delayed</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.</p></li>
    /// <li>
    /// <p><code>unsupported</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.</p></li>
    /// </ul>
    pub fn state(mut self, input: crate::types::CapacityReservationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The capacity is available for use.</p></li>
    /// <li>
    /// <p><code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>cancelled</code> - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p></li>
    /// <li>
    /// <p><code>failed</code> - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.</p></li>
    /// <li>
    /// <p><code>scheduled</code> - (<i>Future-dated Capacity Reservations</i>) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.</p></li>
    /// <li>
    /// <p><code>payment-pending</code> - (<i>Capacity Blocks</i>) The upfront payment has not been processed yet.</p></li>
    /// <li>
    /// <p><code>payment-failed</code> - (<i>Capacity Blocks</i>) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.</p></li>
    /// <li>
    /// <p><code>assessing</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.</p></li>
    /// <li>
    /// <p><code>delayed</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.</p></li>
    /// <li>
    /// <p><code>unsupported</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.</p></li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CapacityReservationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The capacity is available for use.</p></li>
    /// <li>
    /// <p><code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>cancelled</code> - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.</p></li>
    /// <li>
    /// <p><code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p></li>
    /// <li>
    /// <p><code>failed</code> - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.</p></li>
    /// <li>
    /// <p><code>scheduled</code> - (<i>Future-dated Capacity Reservations</i>) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.</p></li>
    /// <li>
    /// <p><code>payment-pending</code> - (<i>Capacity Blocks</i>) The upfront payment has not been processed yet.</p></li>
    /// <li>
    /// <p><code>payment-failed</code> - (<i>Capacity Blocks</i>) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.</p></li>
    /// <li>
    /// <p><code>assessing</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.</p></li>
    /// <li>
    /// <p><code>delayed</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.</p></li>
    /// <li>
    /// <p><code>unsupported</code> - (<i>Future-dated Capacity Reservations</i>) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.</p></li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CapacityReservationState> {
        &self.state
    }
    /// Appends an item to `instance_usages`.
    ///
    /// To override the contents of this collection use [`set_instance_usages`](Self::set_instance_usages).
    ///
    /// <p>Information about the Capacity Reservation usage.</p>
    pub fn instance_usages(mut self, input: crate::types::InstanceUsage) -> Self {
        let mut v = self.instance_usages.unwrap_or_default();
        v.push(input);
        self.instance_usages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the Capacity Reservation usage.</p>
    pub fn set_instance_usages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceUsage>>) -> Self {
        self.instance_usages = input;
        self
    }
    /// <p>Information about the Capacity Reservation usage.</p>
    pub fn get_instance_usages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceUsage>> {
        &self.instance_usages
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCapacityReservationUsageOutput`](crate::operation::get_capacity_reservation_usage::GetCapacityReservationUsageOutput).
    pub fn build(self) -> crate::operation::get_capacity_reservation_usage::GetCapacityReservationUsageOutput {
        crate::operation::get_capacity_reservation_usage::GetCapacityReservationUsageOutput {
            next_token: self.next_token,
            capacity_reservation_id: self.capacity_reservation_id,
            instance_type: self.instance_type,
            total_instance_count: self.total_instance_count,
            available_instance_count: self.available_instance_count,
            state: self.state,
            instance_usages: self.instance_usages,
            _request_id: self._request_id,
        }
    }
}
