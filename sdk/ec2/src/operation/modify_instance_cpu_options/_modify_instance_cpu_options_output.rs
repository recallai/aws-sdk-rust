// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyInstanceCpuOptionsOutput {
    /// <p>The ID of the instance that was updated.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of CPU cores that are running for the specified instance after the update.</p>
    pub core_count: ::std::option::Option<i32>,
    /// <p>The number of threads that are running per CPU core for the specified instance after the update.</p>
    pub threads_per_core: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ModifyInstanceCpuOptionsOutput {
    /// <p>The ID of the instance that was updated.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The number of CPU cores that are running for the specified instance after the update.</p>
    pub fn core_count(&self) -> ::std::option::Option<i32> {
        self.core_count
    }
    /// <p>The number of threads that are running per CPU core for the specified instance after the update.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
}
impl ::aws_types::request_id::RequestId for ModifyInstanceCpuOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ModifyInstanceCpuOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCpuOptionsOutput`](crate::operation::modify_instance_cpu_options::ModifyInstanceCpuOptionsOutput).
    pub fn builder() -> crate::operation::modify_instance_cpu_options::builders::ModifyInstanceCpuOptionsOutputBuilder {
        crate::operation::modify_instance_cpu_options::builders::ModifyInstanceCpuOptionsOutputBuilder::default()
    }
}

/// A builder for [`ModifyInstanceCpuOptionsOutput`](crate::operation::modify_instance_cpu_options::ModifyInstanceCpuOptionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyInstanceCpuOptionsOutputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) core_count: ::std::option::Option<i32>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ModifyInstanceCpuOptionsOutputBuilder {
    /// <p>The ID of the instance that was updated.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance that was updated.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance that was updated.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The number of CPU cores that are running for the specified instance after the update.</p>
    pub fn core_count(mut self, input: i32) -> Self {
        self.core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores that are running for the specified instance after the update.</p>
    pub fn set_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.core_count = input;
        self
    }
    /// <p>The number of CPU cores that are running for the specified instance after the update.</p>
    pub fn get_core_count(&self) -> &::std::option::Option<i32> {
        &self.core_count
    }
    /// <p>The number of threads that are running per CPU core for the specified instance after the update.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of threads that are running per CPU core for the specified instance after the update.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>The number of threads that are running per CPU core for the specified instance after the update.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ModifyInstanceCpuOptionsOutput`](crate::operation::modify_instance_cpu_options::ModifyInstanceCpuOptionsOutput).
    pub fn build(self) -> crate::operation::modify_instance_cpu_options::ModifyInstanceCpuOptionsOutput {
        crate::operation::modify_instance_cpu_options::ModifyInstanceCpuOptionsOutput {
            instance_id: self.instance_id,
            core_count: self.core_count,
            threads_per_core: self.threads_per_core,
            _request_id: self._request_id,
        }
    }
}
