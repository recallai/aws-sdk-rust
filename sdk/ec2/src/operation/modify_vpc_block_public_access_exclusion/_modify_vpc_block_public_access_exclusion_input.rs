// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyVpcBlockPublicAccessExclusionInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of an exclusion.</p>
    pub exclusion_id: ::std::option::Option<::std::string::String>,
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub internet_gateway_exclusion_mode: ::std::option::Option<crate::types::InternetGatewayExclusionMode>,
}
impl ModifyVpcBlockPublicAccessExclusionInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of an exclusion.</p>
    pub fn exclusion_id(&self) -> ::std::option::Option<&str> {
        self.exclusion_id.as_deref()
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn internet_gateway_exclusion_mode(&self) -> ::std::option::Option<&crate::types::InternetGatewayExclusionMode> {
        self.internet_gateway_exclusion_mode.as_ref()
    }
}
impl ModifyVpcBlockPublicAccessExclusionInput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcBlockPublicAccessExclusionInput`](crate::operation::modify_vpc_block_public_access_exclusion::ModifyVpcBlockPublicAccessExclusionInput).
    pub fn builder() -> crate::operation::modify_vpc_block_public_access_exclusion::builders::ModifyVpcBlockPublicAccessExclusionInputBuilder {
        crate::operation::modify_vpc_block_public_access_exclusion::builders::ModifyVpcBlockPublicAccessExclusionInputBuilder::default()
    }
}

/// A builder for [`ModifyVpcBlockPublicAccessExclusionInput`](crate::operation::modify_vpc_block_public_access_exclusion::ModifyVpcBlockPublicAccessExclusionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyVpcBlockPublicAccessExclusionInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) exclusion_id: ::std::option::Option<::std::string::String>,
    pub(crate) internet_gateway_exclusion_mode: ::std::option::Option<crate::types::InternetGatewayExclusionMode>,
}
impl ModifyVpcBlockPublicAccessExclusionInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of an exclusion.</p>
    /// This field is required.
    pub fn exclusion_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exclusion_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of an exclusion.</p>
    pub fn set_exclusion_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exclusion_id = input;
        self
    }
    /// <p>The ID of an exclusion.</p>
    pub fn get_exclusion_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.exclusion_id
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    /// This field is required.
    pub fn internet_gateway_exclusion_mode(mut self, input: crate::types::InternetGatewayExclusionMode) -> Self {
        self.internet_gateway_exclusion_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn set_internet_gateway_exclusion_mode(mut self, input: ::std::option::Option<crate::types::InternetGatewayExclusionMode>) -> Self {
        self.internet_gateway_exclusion_mode = input;
        self
    }
    /// <p>The exclusion mode for internet gateway traffic.</p>
    /// <ul>
    /// <li>
    /// <p><code>allow-bidirectional</code>: Allow all internet traffic to and from the excluded VPCs and subnets.</p></li>
    /// <li>
    /// <p><code>allow-egress</code>: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.</p></li>
    /// </ul>
    pub fn get_internet_gateway_exclusion_mode(&self) -> &::std::option::Option<crate::types::InternetGatewayExclusionMode> {
        &self.internet_gateway_exclusion_mode
    }
    /// Consumes the builder and constructs a [`ModifyVpcBlockPublicAccessExclusionInput`](crate::operation::modify_vpc_block_public_access_exclusion::ModifyVpcBlockPublicAccessExclusionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_vpc_block_public_access_exclusion::ModifyVpcBlockPublicAccessExclusionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::modify_vpc_block_public_access_exclusion::ModifyVpcBlockPublicAccessExclusionInput {
                dry_run: self.dry_run,
                exclusion_id: self.exclusion_id,
                internet_gateway_exclusion_mode: self.internet_gateway_exclusion_mode,
            },
        )
    }
}
