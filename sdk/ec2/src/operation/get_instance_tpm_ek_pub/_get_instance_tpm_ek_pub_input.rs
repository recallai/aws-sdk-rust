// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetInstanceTpmEkPubInput {
    /// <p>The ID of the instance for which to get the public endorsement key.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The required public endorsement key type.</p>
    pub key_type: ::std::option::Option<crate::types::EkPubKeyType>,
    /// <p>The required public endorsement key format. Specify <code>der</code> for a DER-encoded public key that is compatible with OpenSSL. Specify <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools. The returned key is base64 encoded.</p>
    pub key_format: ::std::option::Option<crate::types::EkPubKeyFormat>,
    /// <p>Specify this parameter to verify whether the request will succeed, without actually making the request. If the request will succeed, the response is <code>DryRunOperation</code>. Otherwise, the response is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl GetInstanceTpmEkPubInput {
    /// <p>The ID of the instance for which to get the public endorsement key.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The required public endorsement key type.</p>
    pub fn key_type(&self) -> ::std::option::Option<&crate::types::EkPubKeyType> {
        self.key_type.as_ref()
    }
    /// <p>The required public endorsement key format. Specify <code>der</code> for a DER-encoded public key that is compatible with OpenSSL. Specify <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools. The returned key is base64 encoded.</p>
    pub fn key_format(&self) -> ::std::option::Option<&crate::types::EkPubKeyFormat> {
        self.key_format.as_ref()
    }
    /// <p>Specify this parameter to verify whether the request will succeed, without actually making the request. If the request will succeed, the response is <code>DryRunOperation</code>. Otherwise, the response is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl GetInstanceTpmEkPubInput {
    /// Creates a new builder-style object to manufacture [`GetInstanceTpmEkPubInput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubInput).
    pub fn builder() -> crate::operation::get_instance_tpm_ek_pub::builders::GetInstanceTpmEkPubInputBuilder {
        crate::operation::get_instance_tpm_ek_pub::builders::GetInstanceTpmEkPubInputBuilder::default()
    }
}

/// A builder for [`GetInstanceTpmEkPubInput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetInstanceTpmEkPubInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_type: ::std::option::Option<crate::types::EkPubKeyType>,
    pub(crate) key_format: ::std::option::Option<crate::types::EkPubKeyFormat>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl GetInstanceTpmEkPubInputBuilder {
    /// <p>The ID of the instance for which to get the public endorsement key.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance for which to get the public endorsement key.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance for which to get the public endorsement key.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The required public endorsement key type.</p>
    /// This field is required.
    pub fn key_type(mut self, input: crate::types::EkPubKeyType) -> Self {
        self.key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The required public endorsement key type.</p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::EkPubKeyType>) -> Self {
        self.key_type = input;
        self
    }
    /// <p>The required public endorsement key type.</p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::EkPubKeyType> {
        &self.key_type
    }
    /// <p>The required public endorsement key format. Specify <code>der</code> for a DER-encoded public key that is compatible with OpenSSL. Specify <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools. The returned key is base64 encoded.</p>
    /// This field is required.
    pub fn key_format(mut self, input: crate::types::EkPubKeyFormat) -> Self {
        self.key_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The required public endorsement key format. Specify <code>der</code> for a DER-encoded public key that is compatible with OpenSSL. Specify <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools. The returned key is base64 encoded.</p>
    pub fn set_key_format(mut self, input: ::std::option::Option<crate::types::EkPubKeyFormat>) -> Self {
        self.key_format = input;
        self
    }
    /// <p>The required public endorsement key format. Specify <code>der</code> for a DER-encoded public key that is compatible with OpenSSL. Specify <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools. The returned key is base64 encoded.</p>
    pub fn get_key_format(&self) -> &::std::option::Option<crate::types::EkPubKeyFormat> {
        &self.key_format
    }
    /// <p>Specify this parameter to verify whether the request will succeed, without actually making the request. If the request will succeed, the response is <code>DryRunOperation</code>. Otherwise, the response is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify this parameter to verify whether the request will succeed, without actually making the request. If the request will succeed, the response is <code>DryRunOperation</code>. Otherwise, the response is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Specify this parameter to verify whether the request will succeed, without actually making the request. If the request will succeed, the response is <code>DryRunOperation</code>. Otherwise, the response is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`GetInstanceTpmEkPubInput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubInput {
            instance_id: self.instance_id,
            key_type: self.key_type,
            key_format: self.key_format,
            dry_run: self.dry_run,
        })
    }
}
