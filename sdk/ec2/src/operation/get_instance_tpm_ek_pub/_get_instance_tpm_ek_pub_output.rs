// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetInstanceTpmEkPubOutput {
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The public endorsement key type.</p>
    pub key_type: ::std::option::Option<crate::types::EkPubKeyType>,
    /// <p>The public endorsement key format.</p>
    pub key_format: ::std::option::Option<crate::types::EkPubKeyFormat>,
    /// <p>The public endorsement key material.</p>
    pub key_value: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceTpmEkPubOutput {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The public endorsement key type.</p>
    pub fn key_type(&self) -> ::std::option::Option<&crate::types::EkPubKeyType> {
        self.key_type.as_ref()
    }
    /// <p>The public endorsement key format.</p>
    pub fn key_format(&self) -> ::std::option::Option<&crate::types::EkPubKeyFormat> {
        self.key_format.as_ref()
    }
    /// <p>The public endorsement key material.</p>
    pub fn key_value(&self) -> ::std::option::Option<&str> {
        self.key_value.as_deref()
    }
}
impl ::std::fmt::Debug for GetInstanceTpmEkPubOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetInstanceTpmEkPubOutput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("key_type", &self.key_type);
        formatter.field("key_format", &self.key_format);
        formatter.field("key_value", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetInstanceTpmEkPubOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInstanceTpmEkPubOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceTpmEkPubOutput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubOutput).
    pub fn builder() -> crate::operation::get_instance_tpm_ek_pub::builders::GetInstanceTpmEkPubOutputBuilder {
        crate::operation::get_instance_tpm_ek_pub::builders::GetInstanceTpmEkPubOutputBuilder::default()
    }
}

/// A builder for [`GetInstanceTpmEkPubOutput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetInstanceTpmEkPubOutputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_type: ::std::option::Option<crate::types::EkPubKeyType>,
    pub(crate) key_format: ::std::option::Option<crate::types::EkPubKeyFormat>,
    pub(crate) key_value: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceTpmEkPubOutputBuilder {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The public endorsement key type.</p>
    pub fn key_type(mut self, input: crate::types::EkPubKeyType) -> Self {
        self.key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The public endorsement key type.</p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::EkPubKeyType>) -> Self {
        self.key_type = input;
        self
    }
    /// <p>The public endorsement key type.</p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::EkPubKeyType> {
        &self.key_type
    }
    /// <p>The public endorsement key format.</p>
    pub fn key_format(mut self, input: crate::types::EkPubKeyFormat) -> Self {
        self.key_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The public endorsement key format.</p>
    pub fn set_key_format(mut self, input: ::std::option::Option<crate::types::EkPubKeyFormat>) -> Self {
        self.key_format = input;
        self
    }
    /// <p>The public endorsement key format.</p>
    pub fn get_key_format(&self) -> &::std::option::Option<crate::types::EkPubKeyFormat> {
        &self.key_format
    }
    /// <p>The public endorsement key material.</p>
    pub fn key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public endorsement key material.</p>
    pub fn set_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_value = input;
        self
    }
    /// <p>The public endorsement key material.</p>
    pub fn get_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_value
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInstanceTpmEkPubOutput`](crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubOutput).
    pub fn build(self) -> crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubOutput {
        crate::operation::get_instance_tpm_ek_pub::GetInstanceTpmEkPubOutput {
            instance_id: self.instance_id,
            key_type: self.key_type,
            key_format: self.key_format,
            key_value: self.key_value,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetInstanceTpmEkPubOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetInstanceTpmEkPubOutputBuilder");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("key_type", &self.key_type);
        formatter.field("key_format", &self.key_format);
        formatter.field("key_value", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
