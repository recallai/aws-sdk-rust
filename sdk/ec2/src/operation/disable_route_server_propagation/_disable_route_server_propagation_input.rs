// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisableRouteServerPropagationInput {
    /// <p>The ID of the route server for which to disable propagation.</p>
    pub route_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the route table for which to disable route server propagation.</p>
    pub route_table_id: ::std::option::Option<::std::string::String>,
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DisableRouteServerPropagationInput {
    /// <p>The ID of the route server for which to disable propagation.</p>
    pub fn route_server_id(&self) -> ::std::option::Option<&str> {
        self.route_server_id.as_deref()
    }
    /// <p>The ID of the route table for which to disable route server propagation.</p>
    pub fn route_table_id(&self) -> ::std::option::Option<&str> {
        self.route_table_id.as_deref()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DisableRouteServerPropagationInput {
    /// Creates a new builder-style object to manufacture [`DisableRouteServerPropagationInput`](crate::operation::disable_route_server_propagation::DisableRouteServerPropagationInput).
    pub fn builder() -> crate::operation::disable_route_server_propagation::builders::DisableRouteServerPropagationInputBuilder {
        crate::operation::disable_route_server_propagation::builders::DisableRouteServerPropagationInputBuilder::default()
    }
}

/// A builder for [`DisableRouteServerPropagationInput`](crate::operation::disable_route_server_propagation::DisableRouteServerPropagationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DisableRouteServerPropagationInputBuilder {
    pub(crate) route_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) route_table_id: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DisableRouteServerPropagationInputBuilder {
    /// <p>The ID of the route server for which to disable propagation.</p>
    /// This field is required.
    pub fn route_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the route server for which to disable propagation.</p>
    pub fn set_route_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_server_id = input;
        self
    }
    /// <p>The ID of the route server for which to disable propagation.</p>
    pub fn get_route_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_server_id
    }
    /// <p>The ID of the route table for which to disable route server propagation.</p>
    /// This field is required.
    pub fn route_table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_table_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the route table for which to disable route server propagation.</p>
    pub fn set_route_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_table_id = input;
        self
    }
    /// <p>The ID of the route table for which to disable route server propagation.</p>
    pub fn get_route_table_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_table_id
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DisableRouteServerPropagationInput`](crate::operation::disable_route_server_propagation::DisableRouteServerPropagationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disable_route_server_propagation::DisableRouteServerPropagationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::disable_route_server_propagation::DisableRouteServerPropagationInput {
            route_server_id: self.route_server_id,
            route_table_id: self.route_table_id,
            dry_run: self.dry_run,
        })
    }
}
