// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRouteServerAssociationsOutput {
    /// <p>Information about the associations for the specified route server.</p>
    pub route_server_associations: ::std::option::Option<::std::vec::Vec<crate::types::RouteServerAssociation>>,
    _request_id: Option<String>,
}
impl GetRouteServerAssociationsOutput {
    /// <p>Information about the associations for the specified route server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.route_server_associations.is_none()`.
    pub fn route_server_associations(&self) -> &[crate::types::RouteServerAssociation] {
        self.route_server_associations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetRouteServerAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRouteServerAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetRouteServerAssociationsOutput`](crate::operation::get_route_server_associations::GetRouteServerAssociationsOutput).
    pub fn builder() -> crate::operation::get_route_server_associations::builders::GetRouteServerAssociationsOutputBuilder {
        crate::operation::get_route_server_associations::builders::GetRouteServerAssociationsOutputBuilder::default()
    }
}

/// A builder for [`GetRouteServerAssociationsOutput`](crate::operation::get_route_server_associations::GetRouteServerAssociationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRouteServerAssociationsOutputBuilder {
    pub(crate) route_server_associations: ::std::option::Option<::std::vec::Vec<crate::types::RouteServerAssociation>>,
    _request_id: Option<String>,
}
impl GetRouteServerAssociationsOutputBuilder {
    /// Appends an item to `route_server_associations`.
    ///
    /// To override the contents of this collection use [`set_route_server_associations`](Self::set_route_server_associations).
    ///
    /// <p>Information about the associations for the specified route server.</p>
    pub fn route_server_associations(mut self, input: crate::types::RouteServerAssociation) -> Self {
        let mut v = self.route_server_associations.unwrap_or_default();
        v.push(input);
        self.route_server_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the associations for the specified route server.</p>
    pub fn set_route_server_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteServerAssociation>>) -> Self {
        self.route_server_associations = input;
        self
    }
    /// <p>Information about the associations for the specified route server.</p>
    pub fn get_route_server_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteServerAssociation>> {
        &self.route_server_associations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRouteServerAssociationsOutput`](crate::operation::get_route_server_associations::GetRouteServerAssociationsOutput).
    pub fn build(self) -> crate::operation::get_route_server_associations::GetRouteServerAssociationsOutput {
        crate::operation::get_route_server_associations::GetRouteServerAssociationsOutput {
            route_server_associations: self.route_server_associations,
            _request_id: self._request_id,
        }
    }
}
